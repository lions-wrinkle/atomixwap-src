"use strict";(self.webpackChunkatomixwap=self.webpackChunkatomixwap||[]).push([[186],{7186:(t,e,s)=>{s.r(e),s.d(e,{OptIn:()=>r});var n=s(2592),a=s(4050),i=s.n(a);class r{constructor(t,e,s){this.walletConnect=t,this.algodClient=e,this.ui=document.createElement("div"),this.suggestedParams,this.displayUI(),this.loadAssets(s)}displayUI(){this.ui.innerHTML='\n        <h4 id="claim-title">Opt-in assets</h4>\n        <div id="optin-list">Loading...</div>\n        '}async loadAssets(t){this.suggestedParams=await this.algodClient.getTransactionParams().do();let e=t.split(",");e=e.map((t=>parseInt(t.trim())));let s=0,a=[];const i=document.createElement("div"),r=this.ui.querySelector("#optin-list");r.textContent="",r.append(i);let l,o,d=0,c=0;for(const t of e){if(!t){console.error(new Error(`Error parsing asset ${t}`));continue}0===c&&(l=document.createElement("div"),l.className="mt-4 mb-1",i.append(l),o=o=document.createElement("div"),o.className="row text-center gx-2 gy-2 mb-3",l.append(o));const r=await this.algodClient.getAssetByID(t).do();let p="";try{await this.algodClient.accountAssetInformation(this.walletConnect.walletAddress,t).do(),p='<br><span class="opted-in"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-circle-fill" viewBox="0 0 16 16">\n        <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>\n      </svg> Already opted-in</span>'}catch(e){a.push(t),s++}const h=document.createElement("div");if(h.className="col-6 col-md-3",h.innerHTML=`<div class="h-100 nft-card"><img src="default.png" class="img-fluid" id="nft-${t}"><div class="nft-card-info"><strong>${r.params.name}</strong><br>\n      <small><a href="https://www.nftexplorer.app/asset/${t}" target="_blank">${t}</a></small>${p}</div></div>`,(0,n.g)(t,h.querySelector(`#nft-${t}`),400),o.append(h),c++,s>0&&(d===e.length-1||16===s)){const t=document.createElement("button");t.className="btn btn-generate",t.textContent="Opt-in "+(s>1?`(${s})`:""),t.dataset.assetIds=a.join(","),t.addEventListener("click",this.optin.bind(this),!1),l.append(t),s=0,a=[],c=0}d++}}async optin(t){const e=t.currentTarget;try{e.innerHTML='<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>\n      Waiting for signatures...',e.disabled=!0;const s=t.currentTarget.dataset.assetIds.split(",");let n=[];for(const t of s){let e=i().makeAssetTransferTxnWithSuggestedParamsFromObject({from:this.walletConnect.walletAddress,to:this.walletConnect.walletAddress,amount:0,assetIndex:parseInt(t),suggestedParams:this.suggestedParams});n.push(e)}i().assignGroupID(n);const a=await this.walletConnect.signTransactions(n);e.innerHTML='<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>\n      Sending transactions...',e.disabled=!0;try{const t=await this.algodClient.sendRawTransaction(a).do();e.innerHTML='<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>\n        Waiting for confirmation...',e.disabled=!0,await i().waitForConfirmation(this.algodClient,t.txId,4),e.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-check-circle-fill" viewBox="0 0 16 16">\n        <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>\n      </svg>\n        Opted-in',e.disabled=!0}catch(t){throw t}}catch(t){console.error(t),alert(t.message),e.textContent="Opt-in",e.disabled=!1}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,