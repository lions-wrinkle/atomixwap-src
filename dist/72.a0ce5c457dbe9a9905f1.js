(self.webpackChunkatomixwap=self.webpackChunkatomixwap||[]).push([[72],{50:(t,e,r)=>{t.exports=r(3992)},3992:t=>{t.exports=class{constructor(t,e){this.channelName=t,this.onMessage=e,this._installListener(),this._requests=new Map,this._nextId=0,this._defaultTimeout=4e3}_installListener(){const t=this;this._listener=function(e){if(!e.data||"string"!=typeof e.data)return;let r;try{if(r=JSON.parse(e.data),!r.channel||r.channel!==t.channelName)return;if("object"!=typeof r.message)return}catch(t){return}if(void 0!==r.replyId){if("number"!=typeof r.replyId||r.replyId%1!=0)return;const e=t._requests.get(r.replyId);e&&(clearTimeout(e.timeout),t._requests.delete(r.replyId),e.resolve(r.message))}else{if("number"!=typeof r.id||r.id%1!=0||!t.onMessage)return;const s=t.channelName,n=r.id,i=e.origin,o=function(t){const r={channel:s,replyId:n,message:t};e.source.postMessage(JSON.stringify(r),i)};t.onMessage(r.message,e.origin,e.source,o,t)}},window.addEventListener("message",this._listener)}sendMessage(t,e,r,s){const n={channel:this.channelName,id:this.getNextId(),message:e};if(s&&s.waitForReply){const e=this;return new Promise((function(i,o){const a=setTimeout((function(){e._requests.get(n.id)&&(e._requests.delete(n.id),o(new Error("Timeout expired for the message response")))}),s&&s.timeout?s.timeout:e._defaultTimeout);e._requests.set(n.id,{timeout:a,resolve:i}),t.postMessage(JSON.stringify(n),r)}))}t.postMessage(JSON.stringify(n),r)}close(){window.removeEventListener("message",this._listener),this._listener=null,delete this._requests}getNextId(){return this._nextId+=1,this._nextId}}},1072:(t,e,r)=>{t.exports=r(7151)},7151:(t,e,r)=>{var s=r(8764).Buffer;const{openPopup:n}=r(4259),{sleep:i,prepareTxn:o}=r(2780),a=r(4587),u=r(6035);let c=null;t.exports=class{constructor(t){c||(c=new u),this.bridge=c,this.timeout=t&&t.timeout?t.timeout:16e5,this.url=t&&t.bridgeUrl?t.bridgeUrl:"https://wallet.myalgo.com/bridge",this.url.endsWith("/")&&(this.url=this.url.slice(0,-1)),this.currentConnectPopup=null,this.currentSigntxPopup=null,this.currentSignLogicSigPopup=null,this.currentTealSignPopup=null,this.options={waitForReply:!0,timeout:this.timeout},this.disableLedgerNano=!(!t||!t.disableLedgerNano)&&t.disableLedgerNano}async connect(t={shouldSelectOneAccount:!1,openManager:!1}){this.currentConnectPopup&&(this.currentConnectPopup.closed?this.currentConnectPopup=null:this.focusWindow(this.currentConnectPopup));try{this.currentConnectPopup=n(this.url+"/connect.html"),await this.waitForWindowToLoad(this.currentConnectPopup);const e=await this.bridge.sendMessage(this.currentConnectPopup,{method:"unlock",params:Object.assign(t,{disableLedgerNano:this.disableLedgerNano})},this.url,this.options);if(this.closeWindow(this.currentConnectPopup),this.currentConnectPopup=null,"error"===e.status)throw new Error(e.message);return e.data.accounts}catch(t){throw this.closeWindow(this.currentConnectPopup),this.currentConnectPopup=null,t}}async signTransaction(t,e){let r;this.currentSigntxPopup&&(this.currentSigntxPopup.closed?this.currentSigntxPopup=null:this.focusWindow(this.currentSigntxPopup)),r=Array.isArray(t)?Array.from(t).map((t=>o(t))):o(t);try{this.currentSigntxPopup=n(this.url+"/signtx.html"),await this.waitForWindowToLoad(this.currentSigntxPopup);const t=await this.bridge.sendMessage(this.currentSigntxPopup,{method:"transaction",params:{txn:r,settings:{disableLedgerNano:this.disableLedgerNano},options:e}},this.url,this.options);if(this.closeWindow(this.currentSigntxPopup),this.currentSigntxPopup=null,"error"===t.status)throw new Error(t.message);if(Array.isArray(t.data)){const e=[];for(const r of t.data)r.blob=new Uint8Array(s.from(r.blob,"hex")),e.push(r);return e}return t.data.blob=new Uint8Array(s.from(t.data.blob,"hex")),t.data}catch(t){throw this.closeWindow(this.currentSigntxPopup),this.currentSigntxPopup=null,t}}async signLogicSig(t,e){this.currentSignLogicSigPopup&&(this.currentSignLogicSigPopup.closed?this.currentSignLogicSigPopup=null:this.focusWindow(this.currentSignLogicSigPopup));try{this.currentSignLogicSigPopup=n(this.url+"/logicsigtx.html"),await this.waitForWindowToLoad(this.currentSignLogicSigPopup);let r=t;t.constructor===Uint8Array&&(r=s.from(t).toString("base64"));const i=await this.bridge.sendMessage(this.currentSignLogicSigPopup,{method:"logicsig",params:{logic:r,address:e}},this.url,this.options);if(this.closeWindow(this.currentSignLogicSigPopup),this.currentSignLogicSigPopup=null,"error"===i.status)throw new Error(i.message);return new Uint8Array(s.from(i.data.signedTeal,"base64"))}catch(t){throw this.closeWindow(this.currentSignLogicSigPopup),this.currentSignLogicSigPopup=null,t}}async tealSign(t,e,r){this.currentTealSignPopup&&(this.currentTealSignPopup.closed?this.currentTealSignPopup=null:this.focusWindow(this.currentTealSignPopup));try{this.currentTealSignPopup=n(this.url+"/tealsign.html"),await this.waitForWindowToLoad(this.currentTealSignPopup);let i=t;t.constructor===Uint8Array&&(i=s.from(t).toString("base64"));const o=await this.bridge.sendMessage(this.currentTealSignPopup,{method:"tealsign",params:{data:i,contractAddress:e,address:r}},this.url,this.options);if(this.closeWindow(this.currentTealSignPopup),this.currentTealSignPopup=null,"error"===o.status)throw new Error(o.message);return new Uint8Array(s.from(o.data.signature,"base64"))}catch(t){throw this.closeWindow(this.currentTealSignPopup),this.currentTealSignPopup=null,t}}async waitForWindowToLoad(t,e=30){for(let r=0;r<e&&(await i(300),t);r++)try{if("success"==(await c.sendMessage(t,{method:"status"},this.url)).status)return}catch(t){}throw new Error(a.WINDOW_NOT_LOADED)}closeWindow(t){t&&!t.closed&&t.close&&t.close()}focusWindow(t){throw t&&t.focus?(t.focus(),new Error(a.WINDOW_IS_OPENED)):new Error(a.INVALID_WINDOW)}}},6035:(t,e,r)=>{const s=r(50);t.exports=class{constructor(t){const e=this;this.options={waitForReply:!0,timeout:250},this.listenerCallback=t,this.bridge=new s("wallet-bridge-communication-channel",(function(t,r,s,n){e.listenerCallback&&e.listenerCallback(t,s)}))}sendMessage(t,e,r,s){return this.bridge.sendMessage(t,e,r,s||this.options)}setNewListener(t){this.listenerCallback=t}close(){this.bridge.close()}}},4259:(t,e,r)=>{const{WINDOW_NOT_OPENED:s}=r(4587),n={width:400,height:600};t.exports={openPopup:function(t,e=n){let{name:r="",width:i,height:o,top:a=0,left:u=0}=e;i&&(window.outerWidth?u=Math.round((window.outerWidth-i)/2)+window.screenX:window.screen.width&&(u=Math.round((window.screen.width-i)/2))),o&&(window.outerHeight?a=Math.round((window.outerHeight-o)/2)+window.screenY:window.screen.height&&(a=Math.round((window.screen.height-o)/2))),i&&o&&(e={top:a,left:u,width:i,height:o,status:1,toolbar:0,menubar:0,resizable:1,scrollbars:1});const c=Object.keys(e).map((t=>{const r=e[t];if(null!=r&&"function"==typeof r.toString)return`${t}=${r.toString()}`})).filter(Boolean).join(",");let p;try{p=window.open(t,r,c)}catch(t){throw new Error(`${s} - ${t.stack||t.message}`)}if(!p||window.closed)throw new Error(`${s} - blocked`);return p}}},4587:t=>{t.exports={WINDOW_NOT_LOADED:"Window not loaded",WINDOW_IS_OPENED:"Windows is opened",WINDOW_NOT_OPENED:"Can not open popup window",INVALID_WINDOW:"Invalid window"}},2780:(t,e,r)=>{var s=r(8764).Buffer;t.exports={sleep:function(t=200){return new Promise((e=>setTimeout(e,t)))},prepareTxn:function(t){if(t.constructor===Uint8Array)return s.from(t).toString("base64");if("string"==typeof t)return t;const e=Object.assign({},t);if(e.note&&e.note.constructor===Uint8Array&&(e.note=s.from(e.note).toString("base64")),e.assetMetadataHash&&e.assetMetadataHash.constructor===Uint8Array&&(e.assetMetadataHash=s.from(e.assetMetadataHash).toString("base64")),e.group&&e.group.constructor===Uint8Array&&(e.group=s.from(e.group).toString("base64")),"appl"===e.type&&e.appApprovalProgram&&e.appApprovalProgram.constructor===Uint8Array&&(e.appApprovalProgram=s.from(e.appApprovalProgram).toString("base64")),"appl"===e.type&&e.appClearProgram&&e.appClearProgram.constructor===Uint8Array&&(e.appClearProgram=s.from(e.appClearProgram).toString("base64")),"appl"===e.type&&e.appArgs&&e.appArgs.length>0)for(let t=0;t<e.appArgs.length;t++)e.appArgs[t].constructor===Uint8Array&&(e.appArgs[t]=s.from(e.appArgs[t]).toString("base64"));return e}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,