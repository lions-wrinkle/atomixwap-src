/*! For license information please see 339.6b396ea21e7358d92ee6.js.LICENSE.txt */
(self.webpackChunkatomixwap=self.webpackChunkatomixwap||[]).push([[339],{2622:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.STANDARD_ERROR_MAP=e.SERVER_ERROR_CODE_RANGE=e.RESERVED_ERROR_CODES=e.SERVER_ERROR=e.INTERNAL_ERROR=e.INVALID_PARAMS=e.METHOD_NOT_FOUND=e.INVALID_REQUEST=e.PARSE_ERROR=void 0,e.PARSE_ERROR="PARSE_ERROR",e.INVALID_REQUEST="INVALID_REQUEST",e.METHOD_NOT_FOUND="METHOD_NOT_FOUND",e.INVALID_PARAMS="INVALID_PARAMS",e.INTERNAL_ERROR="INTERNAL_ERROR",e.SERVER_ERROR="SERVER_ERROR",e.RESERVED_ERROR_CODES=[-32700,-32600,-32601,-32602,-32603],e.SERVER_ERROR_CODE_RANGE=[-32e3,-32099],e.STANDARD_ERROR_MAP={[e.PARSE_ERROR]:{code:-32700,message:"Parse error"},[e.INVALID_REQUEST]:{code:-32600,message:"Invalid Request"},[e.METHOD_NOT_FOUND]:{code:-32601,message:"Method not found"},[e.INVALID_PARAMS]:{code:-32602,message:"Invalid params"},[e.INTERNAL_ERROR]:{code:-32603,message:"Internal error"},[e.SERVER_ERROR]:{code:-32e3,message:"Server error"}}},2843:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.validateJsonRpcError=e.getErrorByCode=e.getError=e.isValidErrorCode=e.isReservedErrorCode=e.isServerErrorCode=void 0;const n=r(2622);function i(t){return n.RESERVED_ERROR_CODES.includes(t)}function a(t){return"number"==typeof t}function s(t){return Object.values(n.STANDARD_ERROR_MAP).find((e=>e.code===t))||n.STANDARD_ERROR_MAP[n.INTERNAL_ERROR]}e.isServerErrorCode=function(t){return t<=n.SERVER_ERROR_CODE_RANGE[0]&&t>=n.SERVER_ERROR_CODE_RANGE[1]},e.isReservedErrorCode=i,e.isValidErrorCode=a,e.getError=function(t){return Object.keys(n.STANDARD_ERROR_MAP).includes(t)?n.STANDARD_ERROR_MAP[t]:n.STANDARD_ERROR_MAP[n.INTERNAL_ERROR]},e.getErrorByCode=s,e.validateJsonRpcError=function(t){if(void 0===t.error.code)return{valid:!1,error:"Missing code for JSON-RPC error"};if(void 0===t.error.message)return{valid:!1,error:"Missing message for JSON-RPC error"};if(!a(t.error.code))return{valid:!1,error:`Invalid error code type for JSON-RPC: ${t.error.code}`};if(i(t.error.code)){const e=s(t.error.code);if(e.message!==n.STANDARD_ERROR_MAP[n.INTERNAL_ERROR].message&&t.error.message===e.message)return{valid:!1,error:`Invalid error code message for JSON-RPC: ${t.error.code}`}}return{valid:!0}}},3251:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.formatErrorMessage=e.formatJsonRpcError=e.formatJsonRpcResult=e.formatJsonRpcRequest=e.payloadId=void 0;const n=r(2843),i=r(2622);function a(){return Date.now()*Math.pow(10,3)+Math.floor(Math.random()*Math.pow(10,3))}function s(t){if(void 0===t)return n.getError(i.INTERNAL_ERROR);if("string"==typeof t&&(t=Object.assign(Object.assign({},n.getError(i.SERVER_ERROR)),{message:t})),n.isReservedErrorCode(t.code)&&(t=n.getErrorByCode(t.code)),!n.isServerErrorCode(t.code))throw new Error("Error code is not in server code range");return t}e.payloadId=a,e.formatJsonRpcRequest=function(t,e,r){return{id:r||a(),jsonrpc:"2.0",method:t,params:e}},e.formatJsonRpcResult=function(t,e){return{id:t,jsonrpc:"2.0",result:e}},e.formatJsonRpcError=function(t,e){return{id:t,jsonrpc:"2.0",error:s(e)}},e.formatErrorMessage=s},2339:(t,e,r)=>{"use strict";var n=r(8764).Buffer;Object.defineProperty(e,"__esModule",{value:!0});var i=r(9868),a=r(3251),s=r(7294),o=r(745),l=r(5718),h=r(9260),u=r(4050);function c(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var p=c(i),f=c(s),d=c(o),m=c(h),g=c(u);function y(t,e,r,n){return new(r||(r=Promise))((function(i,a){function s(t){try{l(n.next(t))}catch(t){a(t)}}function o(t){try{l(n.throw(t))}catch(t){a(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,o)}l((n=n.apply(t,e||[])).next())}))}class v extends Error{constructor(t,e,...r){super(...r),Error.captureStackTrace&&Error.captureStackTrace(this,v),this.name="PeraWalletConnectError",this.data=t,this.message=e}}function b(t,e){void 0===e&&(e={});var r=e.insertAt;if(t&&"undefined"!=typeof document){var n=document.head||document.getElementsByTagName("head")[0],i=document.createElement("style");i.type="text/css","top"===r&&n.firstChild?n.insertBefore(i,n.firstChild):n.appendChild(i),i.styleSheet?i.styleSheet.cssText=t:i.appendChild(document.createTextNode(t))}}b('@import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap");\n.pera-wallet-connect-modal {\n  --pera-wallet-connect-modal-font-family: "Inter", sans-serif;\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  z-index: 10;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.3);\n}\n.pera-wallet-connect-modal * {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  font-family: var(--pera-wallet-connect-modal-font-family);\n  font-smooth: antialiased;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.pera-wallet-connect-modal ul,\n.pera-wallet-connect-modal ol,\n.pera-wallet-connect-modal li {\n  list-style-type: none;\n}\n\n.pera-wallet-connect-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: auto;\n  height: 48px;\n  padding: 14px;\n  border: none;\n  border-radius: 12px;\n  outline: none;\n  cursor: pointer;\n  font-family: var(--pera-wallet-connect-modal-font-family);\n  font-size: 14px;\n}\n\n.pera-wallet-connect-modal__logo img {\n  display: block;\n  width: 32px;\n}\n\n.pera-wallet-connect-modal__close-button {\n  width: 40px;\n  height: 40px;\n  margin: 0;\n  padding: 0;\n  background: #333333;\n  border: 1.5px solid rgba(255, 255, 255, 0.08);\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.15);\n  border-radius: 100%;\n}\n\n.pera-wallet-connect-modal__body {\n  position: relative;\n  top: 50%;\n  left: 50%;\n  width: 655px;\n  max-width: calc(100vw - 80px);\n  padding: 28px;\n  background-color: #edeffb;\n  box-shadow: 1px 2px 2px rgba(0, 0, 0, 0.08);\n  border-radius: 24px;\n  animation: 0.3s PeraWalletConnectSlideIn ease-out;\n  transform: translate(-50%, -50%);\n}\n.pera-wallet-connect-modal__body::before {\n  --background-line: #1e0972 0 1.2px, transparent 0 calc(100% - 1.2px), #1e0972;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: -1;\n  content: "";\n  background-image: linear-gradient(var(--background-line)), linear-gradient(90deg, var(--background-line));\n  background-size: 116px 116px;\n  mix-blend-mode: overlay;\n  border-radius: 24px;\n  opacity: 0.8;\n  pointer-events: none;\n}\n\n.pera-wallet-connect-modal__body__header {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  position: absolute;\n  top: -44px;\n  right: -44px;\n  left: 0;\n}\n\n@media (max-width: 767px) {\n  .pera-wallet-connect-modal__body {\n    top: 40px;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    max-width: unset;\n    height: calc(100 * var(--vh));\n    padding: 20px;\n    background-color: #ffffff;\n    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.02), 0 4px 12px rgba(0, 0, 0, 0.03);\n    border-radius: 20px 20px 0px 0px;\n    animation: 0.3s PeraWalletConnectMobileSlideIn ease-out;\n    overflow-y: auto;\n    transform: unset;\n  }\n  .pera-wallet-connect-modal__body::before {\n    background-image: unset;\n  }\n\n  .pera-wallet-connect-modal__body__header {\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    position: static;\n  }\n\n  .pera-wallet-connect-modal__close-button {\n    width: 24px;\n    height: 24px;\n    margin: 0;\n    padding: 0;\n    background: transparent;\n    border: unset;\n    box-shadow: unset;\n  }\n}\n@keyframes PeraWalletConnectSlideIn {\n  0% {\n    opacity: 0;\n    transform: translate(-50%, calc(-50% + 24px));\n  }\n  100% {\n    opacity: 1;\n    transform: translate(-50%, -50%);\n  }\n}\n@keyframes PeraWalletConnectMobileSlideIn {\n  0% {\n    top: 30%;\n    opacity: 0;\n  }\n  100% {\n    top: 40px;\n    opacity: 1;\n  }\n}');function w(){return function(t){const e="matchMedia"in window,[r,n]=s.useState(e&&Boolean(window.matchMedia(t).matches));return s.useEffect((()=>{let r,i;return e&&(r=window.matchMedia(t),i=function(){n(Boolean(r.matches))},r&&r.addListener(i)),()=>{e&&i&&r&&r.removeListener(i)}}),[t,e]),r}("(max-width: 767px)")}function x(){return"undefined"!=typeof navigator}function _(){return x()&&/Android/i.test(navigator.userAgent)}function k(){return x()&&/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)}b(".pera-wallet-connect-modal-touch-screen-mode {\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 46px;\n  padding: 4px;\n}\n.pera-wallet-connect-modal-touch-screen-mode--pending-message-view {\n  gap: 56px;\n  grid-template-rows: auto 48px;\n  height: 100%;\n  padding-bottom: 70px;\n}\n\n.pera-wallet-connect-modal-touch-screen-mode__launch-pera-wallet-button,\n.pera-wallet-connect-modal-touch-screen-mode__install-pera-wallet-button {\n  display: block;\n  padding: 14px;\n  border-radius: 12px;\n  text-decoration: none;\n  text-align: center;\n  font-size: 14px;\n  line-height: 20px;\n  letter-spacing: -0.09px;\n  font-weight: 500;\n}\n\n.pera-wallet-connect-modal-touch-screen-mode__launch-pera-wallet-button {\n  margin-bottom: 32px;\n  background-color: #6b46fe;\n  color: #ffffff;\n}\n\n.pera-wallet-connect-modal-touch-screen-mode__install-pera-wallet-button {\n  margin-bottom: 20px;\n  background-color: #f2f3f8;\n  color: #2c3559;\n}\n\n.pera-wallet-connect-modal-touch-screen-mode__new-to-pera-box {\n  position: relative;\n  margin-bottom: 32px;\n  border-top: 1px solid #e6e8ee;\n}\n\n.pera-wallet-connect-modal-touch-screen-mode__new-to-pera-box__text {\n  position: absolute;\n  top: -12px;\n  right: calc(50% - 56px);\n  width: 116px;\n  color: #69708d;\n  background-color: #ffffff;\n  font-size: 13px;\n  font-weight: 500;\n  line-height: 24px;\n  letter-spacing: -0.04px;\n  text-align: center;\n}");const S=_()?"algorand://":"algorand-wc://",E="PeraWallet.Wallet",C="PeraWallet.BridgeURL",M="PeraWallet.DeepLink",P="PeraWallet.AppMeta";function A(){return"undefined"==typeof localStorage?void 0:localStorage}function T(){var t;return(null===(t=A())||void 0===t?void 0:t.getItem(M))||S}function D(){var t;const e=null===(t=A())||void 0===t?void 0:t.getItem(P);return e?JSON.parse(e):{logo:"data:image/svg+xml,%3csvg width='32' height='35' viewBox='0 0 32 35' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M18.2837 5.09271C19.0234 8.12325 18.7827 10.7913 17.7463 11.0519C16.7098 11.3126 15.27 9.06712 14.5304 6.03657C13.7908 3.00603 14.0315 0.337996 15.0679 0.0773547C16.1044 -0.183287 17.5441 2.06216 18.2837 5.09271Z' fill='%232C3559'/%3e%3cpath d='M30.376 7.66915C28.7507 5.95537 25.5271 6.42918 23.1759 8.72745C20.8247 11.0257 20.2361 14.2781 21.8614 15.9919C23.4866 17.7057 26.7102 17.2319 29.0614 14.9336C31.4127 12.6354 32.0012 9.38294 30.376 7.66915Z' fill='%232C3559'/%3e%3cpath d='M17.5511 34.0071C18.5876 33.7465 18.7914 30.9276 18.0064 27.711C17.2214 24.4945 15.7448 22.0982 14.7084 22.3589C13.6719 22.6195 13.4681 25.4383 14.2531 28.6549C15.0381 31.8715 16.5147 34.2677 17.5511 34.0071Z' fill='%232C3559'/%3e%3cpath d='M6.91617 9.3015C9.9105 10.1763 12.1008 11.7187 11.8083 12.7466C11.5158 13.7745 8.85126 13.8986 5.85693 13.0239C2.8626 12.1491 0.672334 10.6067 0.964835 9.57881C1.25734 8.5509 3.92184 8.42674 6.91617 9.3015Z' fill='%232C3559'/%3e%3cpath d='M26.3656 20.8508C29.5437 21.7793 31.883 23.3652 31.5905 24.3932C31.298 25.4211 28.4845 25.5017 25.3063 24.5732C22.1282 23.6448 19.7889 22.0588 20.0814 21.0309C20.3739 20.003 23.1874 19.9224 26.3656 20.8508Z' fill='%232C3559'/%3e%3cpath d='M10.3069 18.7365C9.56299 17.9692 7.13209 19.0948 4.87736 21.2506C2.62264 23.4064 1.39791 25.776 2.14185 26.5432C2.8858 27.3105 5.3167 26.1849 7.57143 24.0291C9.82615 21.8733 11.0509 19.5037 10.3069 18.7365Z' fill='%232C3559'/%3e%3c/svg%3e",name:"Pera Wallet",main_color:"#ffee55"}}function I(t){let e=T();x()&&/iPhone|iPad|iPod/i.test(navigator.userAgent)&&!e.includes("-wc")&&(e=e.replace("://","-wc://"));let r=`${e}wc?uri=${encodeURIComponent(t)}`;const n=function(){if(!x())return null;const{userAgent:t}=navigator;let e;return e=t.match(/chrome|chromium|crios/i)?"chrome":t.match(/firefox|fxios/i)?"firefox":t.match(/safari/i)?"safari":t.match(/opr\//i)?"opera":t.match(/edg/i)?"edge":void 0,navigator.brave&&(e="brave"),e}();return _()&&(r=t),n&&(r=`${r}&browser=${n}`),r}function F(){const t=w(),{logo:e,name:r}=D();return f.default.createElement("section",{className:"pera-wallet-connect-modal-information-section"},f.default.createElement("img",{className:"pera-wallet-connect-modal-information-section__pera-icon",src:t?e:"data:image/svg+xml,%3csvg width='84' height='38' viewBox='0 0 84 38' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M19.806 8.62846C20.4415 11.2617 20.2267 13.5779 19.3261 13.802C18.4255 14.026 17.1803 12.073 16.5447 9.4398C15.9092 6.80659 16.124 4.49032 17.0246 4.26628C17.9252 4.04224 19.1704 5.99525 19.806 8.62846Z' fill='%232C3559'/%3e%3cpath d='M30.3006 10.8924C28.8931 9.40064 26.0929 9.80497 24.0461 11.7955C21.9993 13.786 21.4811 16.609 22.8886 18.1007C24.2961 19.5925 27.0963 19.1881 29.1431 17.1976C31.1899 15.2071 31.7081 12.3841 30.3006 10.8924Z' fill='%232C3559'/%3e%3cpath d='M19.1061 33.7347C20.0066 33.5107 20.1899 31.0634 19.5153 28.2685C18.8407 25.4737 17.5638 23.3896 16.6632 23.6137C15.7627 23.8377 15.5795 26.285 16.254 29.0799C16.9286 31.8747 18.2055 33.9588 19.1061 33.7347Z' fill='%232C3559'/%3e%3cpath d='M9.92565 12.2581C12.5239 13.0243 14.4224 14.3685 14.1661 15.2604C13.9099 16.1524 11.5958 16.2543 8.99765 15.4881C6.39944 14.7219 4.50092 13.3777 4.75718 12.4858C5.01344 11.5938 7.32744 11.4919 9.92565 12.2581Z' fill='%232C3559'/%3e%3cpath d='M26.7891 22.3299C29.5468 23.1431 31.5746 24.5255 31.3183 25.4174C31.0621 26.3093 28.6188 26.3731 25.8611 25.5599C23.1034 24.7467 21.0756 23.3644 21.3319 22.4724C21.5881 21.5805 24.0314 21.5167 26.7891 22.3299Z' fill='%232C3559'/%3e%3cpath d='M12.8492 20.4585C12.2049 19.7906 10.0915 20.7626 8.1289 22.6296C6.16625 24.4966 5.09753 26.5516 5.74184 27.2195C6.38615 27.8874 8.49952 26.9153 10.4622 25.0483C12.4248 23.1813 13.4935 21.1264 12.8492 20.4585Z' fill='%232C3559'/%3e%3cpath d='M41.6909 12.534V11.9628H39.3365V27.195H41.6909V23.0908C41.6909 22.6465 41.6909 22.2868 41.6481 21.8002H41.6909C42.5471 23.1965 44.0025 23.937 45.7148 23.937C48.6043 23.937 51.1299 21.7579 51.1299 17.7172C51.1299 13.761 48.6043 11.6243 45.7148 11.6243C44.0667 11.6243 42.6113 12.3436 41.6909 13.761H41.6481C41.6909 13.2956 41.6909 12.9571 41.6909 12.534ZM45.1155 21.9272C42.9323 21.906 41.6695 20.0655 41.6695 17.696C41.6695 15.4535 42.9323 13.6552 45.1155 13.6341C47.2559 13.6129 48.6685 15.2631 48.6685 17.7172C48.6685 20.2347 47.2559 21.9483 45.1155 21.9272Z' fill='%232C3559'/%3e%3cpath d='M63.4932 16.7228C63.4932 13.8033 61.1388 11.6243 57.9282 11.6243C54.5037 11.6243 52.1279 13.9303 52.1279 17.7806C52.1279 21.4829 54.4609 23.937 57.9282 23.937C60.7749 23.937 62.8939 22.2868 63.3861 20.0232H60.8177C60.411 21.1656 59.2981 21.9272 57.9282 21.9272C56.1731 21.9272 54.8889 20.679 54.6107 18.6057H63.4932V16.7228ZM57.9282 13.6341C59.6619 13.6341 60.8605 14.8188 61.1174 16.5324H54.6321C54.9317 14.8823 56.1517 13.6341 57.9282 13.6341Z' fill='%232C3559'/%3e%3cpath d='M65.224 23.5985H67.5784V17.0402C67.5784 14.7977 68.8198 13.6341 70.7461 13.6341H72.0089V11.6243H71.003C69.2693 11.6243 68.1991 12.7667 67.5784 13.761H67.5356V11.9628H65.224V23.5985Z' fill='%232C3559'/%3e%3cpath d='M83.0154 21.5675C82.6943 21.5675 82.5445 21.3771 82.5445 20.9963V15.8766C82.5445 13.4225 81.3459 11.6243 77.8143 11.6243C74.3898 11.6243 72.8273 13.3167 72.6561 15.7285H75.0105C75.1603 14.4168 76.2091 13.6341 77.8143 13.6341C79.1842 13.6341 80.1259 14.2264 80.1259 15.1573C80.1259 15.9189 79.5908 16.3843 77.8357 16.3843H76.894C74.0901 16.3843 72.2066 17.5056 72.2066 20.0655C72.2066 22.7523 74.1971 23.9793 76.5301 23.9793C78.2638 23.9793 79.7407 23.2177 80.3185 21.5887C80.3828 22.7734 81.1747 23.5985 82.6729 23.5985H84V21.5675H83.0154ZM80.1901 18.1826C80.1901 20.8059 78.7561 21.9483 76.9154 21.9483C75.3101 21.9483 74.668 21.0175 74.668 20.0655C74.668 19.1558 75.2245 18.4153 76.9368 18.4153H77.2792C78.9273 18.4153 79.9547 17.8441 80.1687 16.8498H80.1901V18.1826Z' fill='%232C3559'/%3e%3c/svg%3e",alt:"Pera Wallet Logo"}),t&&f.default.createElement("h1",{className:"pera-wallet-connect-modal-information-section__connect-pera-title"},`Connect to ${r}`),f.default.createElement("h1",{className:"pera-wallet-connect-modal-information-section__title"},"Simply the best Algorand wallet."),!t&&f.default.createElement("h2",{className:"pera-wallet-connect-modal-information-section__secondary-title"},"Features"),f.default.createElement("ul",null,f.default.createElement("li",{className:"pera-wallet-connect-modal-information-section__features-item"},f.default.createElement("div",{className:"pera-wallet-connect-modal-information-section__features-item__icon-wrapper"},f.default.createElement("img",{src:"data:image/svg+xml,%3csvg width='20' height='21' viewBox='0 0 20 21' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M2.5 10.1373C2.5 10.8373 3.025 11.6456 3.66667 11.929L9.325 14.4456C9.75833 14.6373 10.25 14.6373 10.675 14.4456L16.3333 11.929C16.975 11.6456 17.5 10.8373 17.5 10.1373M2.5 14.304C2.5 15.079 2.95833 15.779 3.66667 16.0956L9.325 18.6123C9.75833 18.804 10.25 18.804 10.675 18.6123L16.3333 16.0956C17.0417 15.779 17.5 15.079 17.5 14.304M10.8417 3.40381L15.7583 5.58714C17.175 6.21214 17.175 7.24547 15.7583 7.87047L10.8417 10.0538C10.2833 10.3038 9.36668 10.3038 8.80835 10.0538L3.89168 7.87047C2.47502 7.24547 2.47502 6.21214 3.89168 5.58714L8.80835 3.40381C9.36668 3.15381 10.2833 3.15381 10.8417 3.40381Z' stroke='%239099BD' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/%3e%3c/svg%3e",alt:"Layer Icon"})),f.default.createElement("p",{className:"pera-wallet-connect-modal-information-section__features-item__description"},"Connect to any Algorand dApp securely")),f.default.createElement("li",{className:"pera-wallet-connect-modal-information-section__features-item"},f.default.createElement("div",{className:"pera-wallet-connect-modal-information-section__features-item__icon-wrapper"},f.default.createElement("img",{src:"data:image/svg+xml,%3csvg width='24' height='25' viewBox='0 0 24 25' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M9.04991 12.8408L10.6599 14.4508L14.9599 10.1508M20.5899 8.09076C20.5899 6.86076 19.6499 5.50076 18.4999 5.07076L13.5099 3.20076C12.6799 2.89076 11.3199 2.89076 10.4899 3.20076L5.49991 5.08076C4.34991 5.51076 3.40991 6.87076 3.40991 8.09076V15.5208C3.40991 16.7008 4.18991 18.2508 5.13991 18.9608L9.43991 22.1708C10.8499 23.2308 13.1699 23.2308 14.5799 22.1708L18.8799 18.9608C19.8299 18.2508 20.6099 16.7008 20.6099 15.5208V8.09076' stroke='%239099BD' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/%3e%3c/svg%3e",alt:"Tick Icon"})),f.default.createElement("p",{className:"pera-wallet-connect-modal-information-section__features-item__description"},"Your private keys are safely stored locally")),f.default.createElement("li",{className:"pera-wallet-connect-modal-information-section__features-item"},f.default.createElement("div",{className:"pera-wallet-connect-modal-information-section__features-item__icon-wrapper"},f.default.createElement("img",{src:"data:image/svg+xml,%3csvg width='20' height='21' viewBox='0 0 20 21' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M12.55 17.129C15.15 17.379 16.5334 16.1623 17.2334 13.154L18.05 9.67063C18.8667 6.18729 17.8 4.4623 14.3084 3.64563L12.9167 3.32063C10.1334 2.6623 8.47503 3.20396 7.50003 5.22063M12.55 17.129C12.1334 17.0956 11.6834 17.0206 11.2 16.904L9.80003 16.5706C6.32503 15.7456 5.25003 14.029 6.0667 10.5456L6.88337 7.05396C7.05003 6.34563 7.25003 5.72896 7.50003 5.22063M12.55 17.129C12.0334 17.479 11.3834 17.7706 10.5917 18.029L9.27504 18.4623C5.96671 19.529 4.22504 18.6373 3.15004 15.329L2.08337 12.0373C1.01671 8.72897 1.90004 6.97897 5.20837 5.91231L6.52504 5.47897C6.86671 5.37064 7.1917 5.27896 7.50003 5.22063M10.5334 8.07897L14.575 9.10397M9.71671 11.304L12.1334 11.9206' stroke='%239099BD' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/%3e%3c/svg%3e",alt:"Note Icon"})),f.default.createElement("p",{className:"pera-wallet-connect-modal-information-section__features-item__description"},"View NFTs, buy and swap crypto and more"))))}function R({onClose:t}){const{logo:e,name:r}=D();return f.default.createElement(f.default.Fragment,null,f.default.createElement("div",{className:"pera-wallet-connect-modal-pending-message"},f.default.createElement("img",{src:e,alt:"Pera Wallet Logo"}),f.default.createElement("div",{className:"pera-wallet-connect-modal-pending-message__text"},"Please wait while we connect you to",f.default.createElement("b",null,` ${r}...`))),f.default.createElement("button",{className:"pera-wallet-connect-button pera-wallet-connect-modal-pending-message__cancel-button",onClick:function(){t()}},"Cancel"))}function B({uri:t}){const[e,r]=s.useState("default"),{name:n}=D();return f.default.createElement("div",{className:"pera-wallet-connect-modal-touch-screen-mode "+("launching-app"===e?"pera-wallet-connect-modal-touch-screen-mode--pending-message-view":"")},"launching-app"===e?f.default.createElement(R,{onClose:i}):f.default.createElement(f.default.Fragment,null,f.default.createElement(F,null),f.default.createElement("div",null,f.default.createElement("a",{onClick:i,className:"pera-wallet-connect-modal-touch-screen-mode__launch-pera-wallet-button",href:I(t),rel:"noopener noreferrer",target:"_blank"},`Launch ${n}`),f.default.createElement("div",{className:"pera-wallet-connect-modal-touch-screen-mode__new-to-pera-box"},f.default.createElement("p",{className:"pera-wallet-connect-modal-touch-screen-mode__new-to-pera-box__text"},"New to Pera?")),f.default.createElement("a",{href:"https://perawallet.app/download/",className:"pera-wallet-connect-modal-touch-screen-mode__install-pera-wallet-button",rel:"noopener noreferrer",target:"_blank"},`Install ${n}`))));function i(){"default"===e?r("launching-app"):"launching-app"===e&&r("default")}}function L(){return f.default.createElement("img",{src:"data:image/svg+xml,%3csvg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M8.5 19L15.5 12L8.5 5' stroke='%232C3559' stroke-width='2'/%3e%3c/svg%3e",className:"pera-wallet-accordion-icon"})}function N({children:t,onClick:e}){return f.default.createElement("button",{className:"pera-wallet-accordion-button",onClick:e},f.default.createElement(L,null),f.default.createElement("p",null,t))}function O({children:t}){return f.default.createElement("div",{className:"pera-wallet-accordion-panel"},f.default.createElement("div",{className:"pera-wallet-accordion-panel__description"},t))}function V({data:t,onToggle:e,isActive:r}){const{title:n,description:i}=t;return f.default.createElement("li",{className:"pera-wallet-accordion-item "+(r?"pera-wallet-accordion-item--active":"")},f.default.createElement(N,{onClick:e},n),f.default.createElement(O,null,i))}function z({items:t}){const[e,r]=s.useState(0);return f.default.createElement("ul",{className:"pera-wallet-accordion"},t.map(((t,r)=>f.default.createElement(V,{key:t.id,data:t,onToggle:n(r),isActive:r===e}))));function n(t){return()=>{e===t&&r(0),r(t)}}}function G({uri:t}){return f.default.createElement("div",{className:"pera-wallet-connect-modal-desktop-mode"},f.default.createElement(F,null),f.default.createElement(z,{items:J(t)}))}b(".pera-wallet-connect-modal-information-section {\n  padding: 12px;\n  padding-right: 0;\n}\n\n.pera-wallet-connect-modal-information-section__pera-icon {\n  margin-bottom: 32px;\n}\n\n.pera-wallet-connect-modal-information-section__title {\n  margin-bottom: 82px;\n  color: #2c3559;\n  font-size: 22px;\n  line-height: 30px;\n  letter-spacing: -0.4px;\n  font-weight: 500;\n}\n\n.pera-wallet-connect-modal-information-section__secondary-title {\n  margin-bottom: 16px;\n  color: #69708d;\n  font-size: 10px;\n  line-height: 20px;\n  letter-spacing: 2px;\n  font-weight: 500;\n  text-transform: uppercase;\n}\n\n.pera-wallet-connect-modal-information-section__features-item {\n  display: grid;\n  align-items: center;\n  grid-template-columns: 36px auto;\n  gap: 16px;\n}\n.pera-wallet-connect-modal-information-section__features-item:not(:last-of-type) {\n  margin-bottom: 20px;\n}\n\n.pera-wallet-connect-modal-information-section__features-item__icon-wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 36px;\n  height: 36px;\n  background-color: #ffffff;\n  border-radius: 50%;\n}\n\n.pera-wallet-connect-modal-information-section__features-item__description {\n  color: #2c3559;\n  font-size: 12px;\n  line-height: 20px;\n  letter-spacing: 0.01px;\n  font-weight: 500;\n}\n\n@media (max-width: 767px) {\n  .pera-wallet-connect-modal-information-section__information-section {\n    padding: 0;\n  }\n\n  .pera-wallet-connect-modal-information-section__pera-icon {\n    margin-bottom: 16px;\n  }\n\n  .pera-wallet-connect-modal-information-section__connect-pera-title {\n    margin-bottom: 8px;\n    color: #2c3559;\n    font-size: 18px;\n    font-weight: 600;\n    line-height: 22px;\n    letter-spacing: -0.2px;\n  }\n\n  .pera-wallet-connect-modal-information-section__title {\n    margin-bottom: 40px;\n    color: #2c3559;\n    font-size: 14px;\n    line-height: 24px;\n    letter-spacing: -0.09px;\n    font-weight: 400;\n  }\n\n  .pera-wallet-connect-modal-information-section__features-item__icon-wrapper {\n    background-color: #f2f3f8;\n  }\n\n  .pera-wallet-connect-modal-information-section__features-item__description {\n    color: #69708d;\n  }\n}"),b(".pera-wallet-connect-modal-pending-message {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  text-align: center;\n}\n\n.pera-wallet-connect-modal-pending-message__text {\n  max-width: 271px;\n  margin-top: 20px;\n  color: #2c3559;\n  font-size: 18px;\n  font-weight: 500;\n  line-height: 28px;\n  letter-spacing: -0.26px;\n}\n\n.pera-wallet-connect-modal-pending-message__cancel-button {\n  display: block;\n  width: 100%;\n  padding: 14px;\n  color: #2c3559;\n  background-color: #f2f3f8;\n  border-radius: 12px;\n  text-decoration: none;\n  text-align: center;\n  font-size: 14px;\n  line-height: 20px;\n  letter-spacing: -0.09px;\n  font-weight: 500;\n}"),b(".pera-wallet-connect-modal-desktop-mode {\n  display: grid;\n  grid-template-columns: 205px auto;\n  gap: 80px;\n}\n\n.pera-wallet-connect-modal-desktop-mode__accordion__description {\n  padding: 0 40px 40px 64px;\n}\n\n.pera-wallet-connect-modal-desktop-mode__pera-download-qr-code {\n  display: flex;\n  width: 264px;\n  height: 264px;\n  margin: -12px auto 0;\n}\n\n#pera-wallet-connect-modal-desktop-mode__qr-code {\n  width: 164px;\n  height: 164px;\n  margin: 0 auto;\n  display: flex;\n  box-shadow: 0px 20px 60px rgba(26, 35, 91, 0.15), 0px 4px 12px rgba(26, 35, 91, 0.05), 0px 1px 4px rgba(26, 35, 91, 0.06);\n  border-radius: 24px;\n}"),b(".pera-wallet-accordion-item {\n  background-color: #ffffff;\n  border-radius: 24px;\n}\n.pera-wallet-accordion-item:not(:last-of-type) {\n  margin-bottom: 20px;\n}\n\n.pera-wallet-accordion-item--active .pera-wallet-accordion-panel {\n  height: 296px;\n  border-radius: 0 0 24px 24px;\n  transition: height ease-in 0.2s;\n}\n.pera-wallet-accordion-item--active .pera-wallet-accordion-button {\n  padding: 28px 24px 12px;\n  border-radius: 24px 24px 0 0;\n  transition: all ease-in 0.2s;\n}\n.pera-wallet-accordion-item--active .pera-wallet-accordion-icon {\n  transform: rotate(90deg);\n}"),b(".pera-wallet-accordion-button {\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  width: 100%;\n  padding: 12px 24px;\n  color: #2c3559;\n  background-color: #ffffff;\n  border: none;\n  border-radius: 24px;\n  outline: none;\n  cursor: pointer;\n  font-size: 16px;\n  line-height: 18px;\n  letter-spacing: -0.1px;\n  font-weight: 600;\n  transition: all ease-in 0.2s;\n}"),b(".pera-wallet-accordion-icon {\n  transition: all ease-in 0.2s;\n}"),b(".pera-wallet-accordion-panel {\n  height: 0;\n  overflow: hidden;\n  color: #69708d;\n  background-color: #ffffff;\n  font-size: 13px;\n  font-weight: 500;\n  line-height: 20px;\n  letter-spacing: -0.04px;\n  transition: height ease-in 0.2s;\n}");const j={debounceTime:150};function H(){function t(){document.documentElement.style.setProperty("--vh",.01*window.innerHeight+"px")}s.useEffect((()=>{t()}),[]),function(t,e=j){const r=s.useRef(void 0),n=s.useRef(t);s.useEffect((()=>{n.current=t}),[t]),s.useEffect((()=>{return window.addEventListener("resize",t),()=>{window.removeEventListener("resize",t),clearTimeout(r.current)};function t(){r.current||(r.current=setTimeout((()=>{n.current(),r.current=void 0}),e.debounceTime))}}),[e.debounceTime])}((()=>{t()}))}function q({uri:t,onClose:e}){const r=w();return H(),f.default.createElement("div",{className:"pera-wallet-connect-modal"},f.default.createElement("div",{className:"pera-wallet-connect-modal__body"},f.default.createElement("div",{className:"pera-wallet-connect-modal__body__header"},f.default.createElement("button",{className:"pera-wallet-connect-button pera-wallet-connect-modal__close-button",onClick:e},f.default.createElement("img",{src:r?"data:image/svg+xml,%3csvg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M18 6L12 12M12 12L6 18M12 12L18 18M12 12L6 6' stroke='%232C3559' stroke-width='2'/%3e%3c/svg%3e":"data:image/svg+xml,%3csvg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M18 6L12 12M12 12L6 18M12 12L18 18M12 12L6 6' stroke='white' stroke-width='2'/%3e%3c/svg%3e"}))),r?f.default.createElement(B,{uri:t}):f.default.createElement(G,{uri:t})))}function W({onClose:t}){const{name:e,main_color:r}=D();return H(),s.useEffect((()=>{const e=window.open(T());e&&e.addEventListener("load",t)}),[]),f.default.createElement("div",{className:"pera-wallet-connect-modal",style:{"--pera-wallet-main-color":r}},f.default.createElement("div",{className:"pera-wallet-connect-modal__body"},f.default.createElement("div",{className:"pera-wallet-wallet-redirect-modal"},f.default.createElement("div",{className:"pera-wallet-redirect-modal__content"},f.default.createElement("img",{src:"data:image/svg+xml,%3csvg width='120' height='38' viewBox='0 0 120 38' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cg clip-path='url(%23clip0_38844_290434)'%3e%3cpath d='M103.739 28.6746H109.565' stroke='%236B46FE' stroke-width='3' stroke-linecap='round' stroke-linejoin='round'/%3e%3cpath d='M112.25 37H100.75C97.5731 37 95 34.2336 95 30.8182V9.18182C95 5.76636 97.5731 3 100.75 3H112.25C115.427 3 118 5.76636 118 9.18182V30.8182C118 34.2336 115.427 37 112.25 37Z' fill='%236B46FE' fill-opacity='0.1' stroke='%236B46FE' stroke-width='3' stroke-linecap='round' stroke-linejoin='round'/%3e%3crect y='1' width='36' height='36' rx='7.76829' fill='%236B46FE' fill-opacity='0.1'/%3e%3cpath d='M19.6057 9.47351C20.1851 11.8819 19.9967 14.0022 19.1848 14.2093C18.373 14.4164 17.2452 12.6319 16.6658 10.2235C16.0864 7.81514 16.2748 5.69486 17.0867 5.48775C17.8985 5.28063 19.0263 7.06512 19.6057 9.47351Z' fill='%236B46FE'/%3e%3cpath d='M29.0775 11.5213C27.8045 10.1593 25.2795 10.5358 23.4378 12.3621C21.5961 14.1885 21.1352 16.7732 22.4083 18.1352C23.6814 19.4972 26.2064 19.1207 28.048 17.2943C29.8897 15.4679 30.3506 12.8832 29.0775 11.5213Z' fill='%236B46FE'/%3e%3cpath d='M19.0324 32.4518C19.8443 32.2446 20.0039 30.0045 19.3889 27.4483C18.774 24.8921 17.6173 22.9877 16.8055 23.1948C15.9937 23.402 15.834 25.6421 16.449 28.1983C17.064 30.7545 18.2206 32.6589 19.0324 32.4518Z' fill='%236B46FE'/%3e%3cpath d='M10.7016 12.818C13.0471 13.5132 14.7627 14.739 14.5336 15.5559C14.3045 16.3728 12.2175 16.4714 9.87199 15.7762C7.52653 15.0809 5.81087 13.8551 6.03996 13.0383C6.26906 12.2214 8.35615 12.1228 10.7016 12.818Z' fill='%236B46FE'/%3e%3cpath d='M25.9365 21.9967C28.4259 22.7346 30.2583 23.995 30.0292 24.8119C29.8001 25.6287 27.5963 25.6927 25.1069 24.9548C22.6174 24.2169 20.7851 22.9565 21.0141 22.1397C21.2432 21.3228 23.447 21.2588 25.9365 21.9967Z' fill='%236B46FE'/%3e%3cpath d='M13.3578 20.316C12.775 19.7063 10.8709 20.6007 9.10487 22.3139C7.33879 24.0271 6.37952 25.9102 6.96226 26.5199C7.54501 27.1297 9.4491 26.2352 11.2152 24.522C12.9813 22.8089 13.9405 20.9258 13.3578 20.316Z' fill='%236B46FE'/%3e%3cpath d='M70.2098 10L75.3049 15.0945L52 15.0945' stroke='%23D0CAE7' stroke-width='3'/%3e%3cpath d='M60.7902 29.5945L55.6951 24.5L79 24.5' stroke='%23D0CAE7' stroke-width='3'/%3e%3c/g%3e%3cdefs%3e%3cclipPath id='clip0_38844_290434'%3e%3crect width='120' height='38' fill='white'/%3e%3c/clipPath%3e%3c/defs%3e%3c/svg%3e"}),f.default.createElement("h1",{className:"pera-wallet-redirect-modal__content__title"},"Can't Launch Pera"),f.default.createElement("p",{className:"pera-wallet-redirect-modal__content__description"},"We couldn't redirect you to Pera Wallet automatically. Please try again."),f.default.createElement("p",{className:"pera-wallet-redirect-modal__content__install-pera-text"},"Don't have Pera Wallet installed yet?",f.default.createElement("br",null),f.default.createElement("a",{onClick:n,className:"pera-wallet-redirect-modal__content__install-pera-text__link",href:"https://perawallet.app/download/",rel:"noopener noreferrer",target:"_blank"},"Tap here to install."))),f.default.createElement("a",{onClick:n,className:"pera-wallet-redirect-modal__launch-pera-wallet-button",href:T(),rel:"noopener noreferrer",target:"_blank"},`Launch ${e}`))));function n(){t()}}b(".pera-wallet-wallet-redirect-modal {\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 56px;\n  grid-template-rows: auto 48px;\n  height: 100%;\n  padding: 4px;\n  padding-bottom: 70px;\n}\n\n.pera-wallet-redirect-modal__content {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n}\n\n.pera-wallet-redirect-modal__content__title {\n  margin: 20px 0 8px;\n  color: #2c3559;\n  font-size: 18px;\n  font-weight: 600;\n  line-height: 22px;\n  letter-spacing: -0.26px;\n}\n\n.pera-wallet-redirect-modal__content__description,\n.pera-wallet-redirect-modal__content__install-pera-text {\n  color: #2c3559;\n  max-width: 271px;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 24px;\n  letter-spacing: -0.09px;\n  text-align: center;\n}\n\n.pera-wallet-redirect-modal__content__description {\n  margin-bottom: 24px;\n}\n\n.pera-wallet-redirect-modal__content__install-pera-text__link {\n  color: #6b46fe;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 24px;\n  letter-spacing: -0.09px;\n  text-align: center;\n}\n\n.pera-wallet-redirect-modal__launch-pera-wallet-button {\n  display: block;\n  padding: 14px;\n  color: #ffffff;\n  background-color: #6b46fe;\n  border-radius: 12px;\n  text-decoration: none;\n  text-align: center;\n  font-size: 14px;\n  line-height: 20px;\n  letter-spacing: -0.09px;\n  font-weight: 500;\n}"),b('.pera-wallet-sign-txn-toast {\n  --pera-wallet-sign-txn-toast-width: 422px;\n  --pera-wallet-sign-txn-toast-height: 134px;\n  --pera-wallet-sign-txn-toast-font-family: "Inter", sans-serif;\n  position: fixed;\n  bottom: 28px;\n  right: 35px;\n  z-index: 11;\n  overflow: hidden;\n  width: var(--pera-wallet-sign-txn-toast-width);\n  height: var(--pera-wallet-sign-txn-toast-height);\n  background: #edeffb;\n  border-radius: 8px;\n  animation: 0.2s PeraWalletSignTxnToastSlideIn ease-out;\n}\n.pera-wallet-sign-txn-toast * {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  font-family: var(--pera-wallet-sign-txn-toast-font-family);\n  font-smooth: antialiased;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.pera-wallet-sign-txn-toast ul,\n.pera-wallet-sign-txn-toast ol,\n.pera-wallet-sign-txn-toast li {\n  list-style-type: none;\n}\n\n.pera-wallet-sign-txn-toast__header__close-button {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  width: 20px;\n  height: 20px;\n  margin: 0;\n  padding: 0;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n}\n\n.pera-wallet-sign-txn-toast__content__lottie-animation {\n  position: absolute;\n  top: -75px;\n  left: -100px;\n  width: 368px;\n  height: 368px;\n}\n\n.pera-wallet-sign-txn-toast__content__description {\n  position: absolute;\n  top: 40px;\n  right: 48px;\n  max-width: 197px;\n  color: #2c3559;\n  font-size: 14px;\n  line-height: 22px;\n  letter-spacing: -0.1px;\n}\n\n@media (max-width: 767px) {\n  .pera-wallet-sign-txn-toast {\n    display: none;\n  }\n}\n@keyframes PeraWalletSignTxnToastSlideIn {\n  0% {\n    bottom: 12px;\n    opacity: 0;\n  }\n  100% {\n    bottom: 26px;\n    opacity: 1;\n  }\n}');var U={v:"4.8.0",meta:{g:"LottieFiles AE 1.1.0",a:"",k:"",d:"",tc:""},fr:30,ip:0,op:180,w:600,h:600,nm:"Animation",ddd:0,assets:[{id:"comp_0",layers:[{ddd:0,ind:1,ty:4,nm:"Logo",sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:0,ix:10},p:{a:0,k:[254.235,236.75,0],ix:2},a:{a:0,k:[88,88,0],ix:1},s:{a:0,k:[40,40,100],ix:6}},ao:0,shapes:[{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[3.145,3.26],[9.58,-9.112],[-3.145,-3.26],[-9.58,9.112]],o:[[-3.145,-3.26],[-9.579,9.113],[3.145,3.26],[9.58,-9.113]],v:[[17.346,-16.5],[-5.695,-5.903],[-17.346,16.5],[5.695,5.903]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.517647058824,.580392156863,.733333333333,1],ix:4},o:{a:0,k:100,ix:5},r:1,bm:0,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[45.371,111.619],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 1",np:2,cix:2,bm:0,ix:1,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-13.461,-3.969],[1.25,-4.354],[13.46,3.969],[-1.251,4.353]],o:[[13.46,3.969],[-1.251,4.354],[-13.46,-3.97],[1.251,-4.354]],v:[[2.266,-7.883],[24.372,7.187],[-2.265,7.883],[-24.372,-7.187]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.517647058824,.580392156863,.733333333333,1],ix:4},o:{a:0,k:100,ix:5},r:1,bm:0,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[128.492,112.136],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 2",np:2,cix:2,bm:0,ix:2,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-12.682,-3.74],[1.25,-4.353],[12.681,3.739],[-1.251,4.354]],o:[[12.682,3.74],[-1.251,4.354],[-12.682,-3.74],[1.251,-4.353]],v:[[2.265,-7.883],[22.963,6.771],[-2.264,7.883],[-22.962,-6.771]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.517647058824,.580392156863,.733333333333,1],ix:4},o:{a:0,k:100,ix:5},r:1,bm:0,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[46.182,62.976],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 3",np:2,cix:2,bm:0,ix:3,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-4.396,1.094],[3.293,13.642],[4.395,-1.093],[-3.292,-13.641]],o:[[4.396,-1.093],[-3.292,-13.641],[-4.396,1.094],[3.293,13.642]],v:[[5.962,24.7],[7.958,-1.98],[-5.962,-24.701],[-7.96,1.98]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.517647058824,.580392156863,.733333333333,1],ix:4},o:{a:0,k:100,ix:5},r:1,bm:0,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[87.295,135.219],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 4",np:2,cix:2,bm:0,ix:4,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[6.87,7.281],[9.99,-9.716],[-6.87,-7.281],[-9.991,9.716]],o:[[-6.87,-7.281],[-9.99,9.716],[6.869,7.282],[9.99,-9.715]],v:[[18.089,-17.592],[-12.439,-13.184],[-18.089,17.591],[12.439,13.183]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.517647058824,.580392156863,.733333333333,1],ix:4},o:{a:0,k:100,ix:5},r:1,bm:0,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[129.807,66.019],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 5",np:2,cix:2,bm:0,ix:5,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-3.102,-12.852],[4.395,-1.094],[3.102,12.853],[-4.396,1.094]],o:[[3.102,12.853],[-4.396,1.093],[-3.102,-12.853],[4.396,-1.093]],v:[[7.959,-1.98],[5.617,23.272],[-7.959,1.98],[-5.617,-23.272]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.517647058824,.580392156863,.733333333333,1],ix:4},o:{a:0,k:100,ix:5},r:1,bm:0,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[88.713,39.357],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 6",np:2,cix:2,bm:0,ix:6,mn:"ADBE Vector Group",hd:!1}],ip:0,op:200,st:0,bm:0},{ddd:0,ind:2,ty:4,nm:"Button",sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:0,ix:10},p:{a:0,k:[255.5,370,0],ix:2},a:{a:0,k:[5.5,-98,0],ix:1},s:{a:1,k:[{i:{x:[.667,.667,.667],y:[1,1,1]},o:{x:[.6,.6,.333],y:[0,0,0]},t:55,s:[100,100,100]},{i:{x:[.4,.4,.667],y:[1,1,1]},o:{x:[.333,.333,.333],y:[0,0,0]},t:61,s:[90,90,100]},{t:67,s:[100,100,100]}],ix:6}},ao:0,shapes:[{ty:"gr",it:[{ty:"st",c:{a:0,k:[1,1,1,1],ix:3},o:{a:0,k:100,ix:4},w:{a:0,k:2,ix:5},lc:1,lj:1,ml:4,bm:0,nm:"Stroke 1",mn:"ADBE Vector Graphic - Stroke",hd:!1},{ty:"fl",c:{a:0,k:[.419607843137,.274509803922,.996078431373,1],ix:4},o:{a:0,k:100,ix:5},r:1,bm:0,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Shape 1",np:2,cix:2,bm:0,ix:1,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[63.521,12.602],[63.521,39.804],[-61.45,39.804],[-61.45,12.602]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.419607843137,.274509803922,.996078431373,1],ix:4},o:{a:0,k:100,ix:5},r:1,bm:0,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[3.974,-124.852],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Rectangle 1",np:3,cix:2,bm:0,ix:2,mn:"ADBE Vector Group",hd:!1},{ty:"rd",nm:"Round Corners 1",r:{a:0,k:6,ix:1},ix:3,mn:"ADBE Vector Filter - RC",hd:!1}],ip:0,op:200,st:0,bm:0},{ddd:0,ind:3,ty:4,nm:"Transaction",sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:0,ix:10},p:{a:0,k:[250,294,0],ix:2},a:{a:0,k:[0,0,0],ix:1},s:{a:0,k:[100,100,100],ix:6}},ao:0,shapes:[{ty:"gr",it:[{ty:"st",c:{a:0,k:[.765150122549,.793584546856,.907322303922,1],ix:3},o:{a:0,k:100,ix:4},w:{a:0,k:1,ix:5},lc:1,lj:1,ml:4,bm:0,nm:"Stroke 1",mn:"ADBE Vector Graphic - Stroke",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Shape 1",np:2,cix:2,bm:0,ix:1,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[63.521,9.852],[63.521,124.804],[-61.45,124.804],[-61.45,9.852]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"st",c:{a:0,k:[.765150122549,.793584546856,.907322303922,1],ix:3},o:{a:0,k:100,ix:4},w:{a:0,k:1,ix:5},lc:1,lj:1,ml:4,bm:0,nm:"Stroke 1",mn:"ADBE Vector Graphic - Stroke",hd:!1},{ty:"tr",p:{a:0,k:[3.974,-124.852],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Rectangle 1",np:3,cix:2,bm:0,ix:2,mn:"ADBE Vector Group",hd:!1},{ty:"rd",nm:"Round Corners 1",r:{a:0,k:6,ix:1},ix:3,mn:"ADBE Vector Filter - RC",hd:!1}],ip:0,op:200,st:0,bm:0},{ddd:0,ind:4,ty:4,nm:"Title",sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:0,ix:10},p:{a:0,k:[250,250,0],ix:2},a:{a:0,k:[0,0,0],ix:1},s:{a:0,k:[100,100,100],ix:6}},ao:0,shapes:[{ty:"gr",it:[{ty:"st",c:{a:0,k:[.764705882353,.792156862745,.905882352941,1],ix:3},o:{a:0,k:100,ix:4},w:{a:0,k:1,ix:5},lc:1,lj:1,ml:4,bm:0,nm:"Stroke 1",mn:"ADBE Vector Graphic - Stroke",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Shape 1",np:2,cix:2,bm:0,ix:1,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[63.521,9.852],[63.521,39.804],[-61.45,39.804],[-61.45,9.852]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"st",c:{a:0,k:[.764705882353,.792156862745,.905882352941,1],ix:3},o:{a:0,k:100,ix:4},w:{a:0,k:1,ix:5},lc:1,lj:1,ml:4,bm:0,nm:"Stroke 1",mn:"ADBE Vector Graphic - Stroke",hd:!1},{ty:"tr",p:{a:0,k:[3.974,-124.852],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Rectangle 1",np:3,cix:2,bm:0,ix:2,mn:"ADBE Vector Group",hd:!1},{ty:"rd",nm:"Round Corners 1",r:{a:0,k:6,ix:1},ix:3,mn:"ADBE Vector Filter - RC",hd:!1}],ip:0,op:200,st:0,bm:0},{ddd:0,ind:5,ty:4,nm:"Frame",sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:0,ix:10},p:{a:0,k:[250,250,0],ix:2},a:{a:0,k:[0,0,0],ix:1},s:{a:0,k:[100,100,100],ix:6}},ao:0,shapes:[{ty:"gr",it:[{ty:"fl",c:{a:0,k:[1,1,1,1],ix:4},o:{a:0,k:100,ix:5},r:1,bm:0,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Shape 1",np:2,cix:2,bm:0,ix:1,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[79.021,-27.148],[79.021,272.804],[-75.95,272.804],[-75.95,-27.148]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[1,1,1,1],ix:4},o:{a:0,k:100,ix:5},r:1,bm:0,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[3.974,-124.852],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Rectangle 1",np:3,cix:2,bm:0,ix:2,mn:"ADBE Vector Group",hd:!1},{ty:"rd",nm:"Round Corners 1",r:{a:0,k:18,ix:1},ix:3,mn:"ADBE Vector Filter - RC",hd:!1}],ip:0,op:200,st:0,bm:0}]}],layers:[{ddd:0,ind:1,ty:4,nm:"Touch",sr:1,ks:{o:{a:0,k:34,ix:11},r:{a:0,k:0,ix:10},p:{a:1,k:[{i:{x:.4,y:1},o:{x:.6,y:0},t:39,s:[592,207,0],to:[-11.333,0,0],ti:[11.333,0,0]},{i:{x:.4,y:.4},o:{x:.6,y:.6},t:52,s:[524,207,0],to:[0,0,0],ti:[0,0,0]},{i:{x:.4,y:1},o:{x:.6,y:0},t:67,s:[524,207,0],to:[11.333,0,0],ti:[-11.333,0,0]},{t:80,s:[592,207,0]}],ix:2},a:{a:0,k:[0,0,0],ix:1},s:{a:0,k:[100,100,100],ix:6}},ao:0,shapes:[{ty:"gr",it:[{d:1,ty:"el",s:{a:0,k:[35.796,35.796],ix:2},p:{a:0,k:[0,0],ix:3},nm:"Ellipse Path 1",mn:"ADBE Vector Shape - Ellipse",hd:!1},{ty:"fl",c:{a:0,k:[.572549019608,.627450980392,.760784373564,1],ix:4},o:{a:0,k:100,ix:5},r:1,bm:0,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[-224.082,44.349],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Ellipse 1",np:3,cix:2,bm:0,ix:1,mn:"ADBE Vector Group",hd:!1}],ip:0,op:180,st:0,bm:0},{ddd:0,ind:2,ty:0,nm:"Phone",refId:"comp_0",sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:0,ix:10},p:{a:1,k:[{i:{x:.35,y:1},o:{x:.65,y:0},t:15,s:[292,300,0],to:[0,-26.167,0],ti:[0,26.167,0]},{i:{x:.35,y:.35},o:{x:.65,y:.65},t:30,s:[292,143,0],to:[0,0,0],ti:[0,0,0]},{i:{x:.35,y:1},o:{x:.65,y:0},t:92,s:[292,143,0],to:[0,26.167,0],ti:[0,-26.167,0]},{t:107,s:[292,300,0]}],ix:2},a:{a:0,k:[250,250,0],ix:1},s:{a:0,k:[100,100,100],ix:6}},ao:0,w:500,h:500,ip:0,op:200,st:0,bm:0},{ddd:0,ind:3,ty:4,nm:"Shadow",sr:1,ks:{o:{a:0,k:70,ix:11},r:{a:0,k:0,ix:10},p:{a:1,k:[{i:{x:.35,y:1},o:{x:.65,y:0},t:15,s:[292,300,0],to:[0,-26.167,0],ti:[0,26.167,0]},{i:{x:.35,y:.35},o:{x:.65,y:.65},t:30,s:[292,143,0],to:[0,0,0],ti:[0,0,0]},{i:{x:.35,y:1},o:{x:.65,y:0},t:92,s:[292,143,0],to:[0,26.167,0],ti:[0,-26.167,0]},{t:107,s:[292,300,0]}],ix:2},a:{a:0,k:[0,0,0],ix:1},s:{a:0,k:[87,95,100],ix:6}},ao:0,ef:[{ty:29,nm:"Gaussian Blur",np:5,mn:"ADBE Gaussian Blur 2",ix:1,en:1,ef:[{ty:0,nm:"Blurriness",mn:"ADBE Gaussian Blur 2-0001",ix:1,v:{a:0,k:100,ix:1}},{ty:7,nm:"Blur Dimensions",mn:"ADBE Gaussian Blur 2-0002",ix:2,v:{a:0,k:1,ix:2}},{ty:7,nm:"Repeat Edge Pixels",mn:"ADBE Gaussian Blur 2-0003",ix:3,v:{a:0,k:0,ix:3}}]}],shapes:[{ty:"gr",it:[{ty:"fl",c:{a:0,k:[.517647058824,.580392156863,.733333333333,1],ix:4},o:{a:0,k:100,ix:5},r:1,bm:0,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Shape 1",np:2,cix:2,bm:0,ix:1,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[79.021,-27.148],[79.021,272.804],[-75.95,272.804],[-75.95,-27.148]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.517647058824,.580392156863,.733333333333,1],ix:4},o:{a:0,k:100,ix:5},r:1,bm:0,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[3.974,-124.852],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Rectangle 1",np:3,cix:2,bm:0,ix:2,mn:"ADBE Vector Group",hd:!1},{ty:"rd",nm:"Round Corners 1",r:{a:0,k:18,ix:1},ix:3,mn:"ADBE Vector Filter - RC",hd:!1}],ip:0,op:200,st:0,bm:0}],markers:[]};function $({onClose:t}){return f.default.createElement("div",{className:"pera-wallet-sign-txn-toast"},f.default.createElement("div",{className:"pera-wallet-sign-txn-toast__header"},f.default.createElement("button",{className:"pera-wallet-sign-txn-toast__header__close-button",onClick:t},f.default.createElement("img",{src:"data:image/svg+xml,%3csvg width='20' height='20' viewBox='0 0 20 20' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M14.4107 4.41074L9.41074 9.41074L10.5893 10.5893L15.5893 5.58926L14.4107 4.41074ZM9.41074 9.41074L4.41074 14.4107L5.58926 15.5893L10.5893 10.5893L9.41074 9.41074ZM15.5893 14.4107L10.5893 9.41074L9.41074 10.5893L14.4107 15.5893L15.5893 14.4107ZM10.5893 9.41074L5.58926 4.41074L4.41074 5.58926L9.41074 10.5893L10.5893 9.41074Z' fill='%239099BD'/%3e%3c/svg%3e"}))),f.default.createElement("div",{className:"pera-wallet-sign-txn-toast__content"},f.default.createElement(m.default,{className:"pera-wallet-sign-txn-toast__content__lottie-animation",animationData:U,width:368,height:368}),f.default.createElement("p",{className:"pera-wallet-sign-txn-toast__content__description"},"Please launch ",f.default.createElement("b",null,"Pera Wallet")," on your iOS or Android device to sign this transaction.")))}function Z(t){const e=document.createElement("div");return e.setAttribute("id",t),document.body.appendChild(e),e}function Q(t){return(e,r)=>{d.default.createRoot(Z("pera-wallet-connect-modal-wrapper")).render(f.default.createElement(q,{onClose:function(){K("pera-wallet-connect-modal-wrapper"),r(),t&&t(new v({type:"CONNECT_MODAL_CLOSED"},"The modal has been closed by the user."))},uri:e}))}}function Y(){K("pera-wallet-sign-txn-toast-wrapper")}function K(t){const e=document.getElementById(t);e&&e.remove()}function J(t){return[{id:"scan-to-connect",title:"Scan to connect",description:f.default.createElement(f.default.Fragment,null,f.default.createElement("p",{className:"pera-wallet-connect-modal-desktop-mode__accordion__description"},"Scan the QR code below with Pera Wallet's scan feature."),f.default.createElement(l.QRCode,{id:"pera-wallet-connect-modal-desktop-mode__qr-code",logoImage:"data:image/svg+xml,%3csvg width='56' height='56' viewBox='0 0 56 56' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M46.0001 28C46.0001 37.9411 37.9412 46 28.0001 46C18.0589 46 10.0001 37.9411 10.0001 28C10.0001 18.0589 18.0589 10 28.0001 10C37.9412 10 46.0001 18.0589 46.0001 28Z' fill='%23FFEE55'/%3e%3cpath fill-rule='evenodd' clip-rule='evenodd' d='M55.84 28C55.84 43.3756 43.3756 55.84 28 55.84C12.6244 55.84 0.160034 43.3756 0.160034 28C0.160034 12.6244 12.6244 0.160034 28 0.160034C43.3756 0.160034 55.84 12.6244 55.84 28ZM28 46C37.9412 46 46 37.9412 46 28C46 18.0589 37.9412 10 28 10C18.0589 10 10 18.0589 10 28C10 37.9412 18.0589 46 28 46Z' fill='white'/%3e%3cpath d='M29.1968 20.969C29.6267 22.7541 29.4814 24.3243 28.8721 24.4762C28.2629 24.6281 27.4204 23.3041 26.9904 21.519C26.5604 19.734 26.7058 18.1637 27.3151 18.0119C27.9243 17.86 28.7668 19.184 29.1968 20.969Z' fill='black'/%3e%3cpath d='M36.2967 22.5038C35.3445 21.4925 33.4501 21.7666 32.0653 23.116C30.6806 24.4654 30.33 26.3791 31.2823 27.3904C32.2345 28.4016 34.129 28.1275 35.5137 26.7781C36.8984 25.4287 37.249 23.515 36.2967 22.5038Z' fill='black'/%3e%3cpath d='M28.7233 37.9888C29.3325 37.8369 29.4565 36.1779 29.0001 34.2832C28.5437 32.3886 27.6799 30.9758 27.0706 31.1277C26.4613 31.2795 26.3374 32.9386 26.7937 34.8332C27.2501 36.7279 28.114 38.1407 28.7233 37.9888Z' fill='black'/%3e%3cpath d='M22.5124 23.4296C24.2702 23.949 25.5546 24.8603 25.3812 25.4649C25.2078 26.0696 23.6423 26.1387 21.8846 25.6193C20.1268 25.0998 18.8424 24.1886 19.0157 23.584C19.1891 22.9793 20.7546 22.9102 22.5124 23.4296Z' fill='black'/%3e%3cpath d='M33.9211 30.2574C35.7868 30.8087 37.1586 31.7458 36.9853 32.3504C36.8119 32.9551 35.1589 32.9983 33.2933 32.447C31.4276 31.8957 30.0557 30.9586 30.2291 30.354C30.4024 29.7493 32.0554 29.7061 33.9211 30.2574Z' fill='black'/%3e%3cpath d='M24.4903 28.9887C24.0544 28.5359 22.6246 29.1949 21.2968 30.4606C19.969 31.7262 19.246 33.1193 19.6819 33.5721C20.1178 34.0249 21.5476 33.3659 22.8754 32.1002C24.2032 30.8345 24.9262 29.4415 24.4903 28.9887Z' fill='black'/%3e%3c/svg%3e",value:t,qrStyle:"dots",quietZone:20,logoWidth:48,logoHeight:48,eyeRadius:5}))},{id:"new-to-pera-wallet",title:"New to Pera Wallet?",description:f.default.createElement(f.default.Fragment,null,f.default.createElement("p",{className:"pera-wallet-connect-modal-desktop-mode__accordion__description"},"Scan the QR code with your phone to download Pera Wallet."),f.default.createElement(l.QRCode,{id:"pera-wallet-connect-modal-desktop-mode__qr-code",logoImage:"data:image/svg+xml,%3csvg width='56' height='56' viewBox='0 0 56 56' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M46.0001 28C46.0001 37.9411 37.9412 46 28.0001 46C18.0589 46 10.0001 37.9411 10.0001 28C10.0001 18.0589 18.0589 10 28.0001 10C37.9412 10 46.0001 18.0589 46.0001 28Z' fill='black'/%3e%3cpath fill-rule='evenodd' clip-rule='evenodd' d='M55.84 28C55.84 43.3756 43.3756 55.84 28 55.84C12.6244 55.84 0.160034 43.3756 0.160034 28C0.160034 12.6244 12.6244 0.160034 28 0.160034C43.3756 0.160034 55.84 12.6244 55.84 28ZM28 46C37.9412 46 46 37.9412 46 28C46 18.0589 37.9412 10 28 10C18.0589 10 10 18.0589 10 28C10 37.9412 18.0589 46 28 46Z' fill='white'/%3e%3cpath d='M29.1968 20.969C29.6267 22.7541 29.4814 24.3243 28.8721 24.4762C28.2629 24.6281 27.4204 23.3041 26.9904 21.519C26.5604 19.734 26.7058 18.1637 27.3151 18.0119C27.9243 17.86 28.7668 19.184 29.1968 20.969Z' fill='%23FFEE55'/%3e%3cpath d='M36.2967 22.5038C35.3445 21.4925 33.4501 21.7666 32.0653 23.116C30.6806 24.4654 30.33 26.3791 31.2823 27.3904C32.2345 28.4016 34.129 28.1275 35.5137 26.7781C36.8984 25.4287 37.249 23.515 36.2967 22.5038Z' fill='%23FFEE55'/%3e%3cpath d='M28.7233 37.9888C29.3325 37.8369 29.4565 36.1779 29.0001 34.2832C28.5437 32.3886 27.6799 30.9758 27.0706 31.1277C26.4613 31.2795 26.3374 32.9386 26.7937 34.8332C27.2501 36.7279 28.114 38.1407 28.7233 37.9888Z' fill='%23FFEE55'/%3e%3cpath d='M22.5124 23.4296C24.2702 23.949 25.5546 24.8603 25.3812 25.4649C25.2078 26.0696 23.6423 26.1387 21.8846 25.6193C20.1268 25.0998 18.8424 24.1886 19.0157 23.584C19.1891 22.9793 20.7546 22.9102 22.5124 23.4296Z' fill='%23FFEE55'/%3e%3cpath d='M33.9211 30.2574C35.7868 30.8087 37.1586 31.7458 36.9853 32.3504C36.8119 32.9551 35.1589 32.9983 33.2933 32.447C31.4276 31.8957 30.0557 30.9586 30.2291 30.354C30.4024 29.7493 32.0554 29.7061 33.9211 30.2574Z' fill='%23FFEE55'/%3e%3cpath d='M24.4903 28.9887C24.0544 28.5359 22.6246 29.1949 21.2968 30.4606C19.969 31.7262 19.246 33.1193 19.6819 33.5721C20.1178 34.0249 21.5476 33.3659 22.8754 32.1002C24.2032 30.8345 24.9262 29.4415 24.4903 28.9887Z' fill='%23FFEE55'/%3e%3c/svg%3e",value:"https://perawallet.app/download/",qrStyle:"dots",quietZone:20,logoWidth:48,logoHeight:48,eyeRadius:5}))}]}function X(){return function(t,e={}){return fetch("https://wc.perawallet.app/servers.json",e).then((t=>t.json())).then((t=>t))}()}function tt(t){return Uint8Array.from(window.atob(t),(t=>t.charCodeAt(0)))}function et(t){return{open:Q(t),close:()=>K("pera-wallet-connect-modal-wrapper")}}"undefined"!=typeof window&&(window.global=window,window.Buffer=window.Buffer||r(8764).Buffer),e.PeraWalletConnect=class{constructor(t){var e,r,n;this.bridge=(null==t?void 0:t.bridge)||(null===(e=A())||void 0===e?void 0:e.getItem(C))||"",(null==t?void 0:t.deep_link)&&(null===(r=A())||void 0===r||r.setItem(M,t.deep_link)),(null==t?void 0:t.app_meta)&&(null===(n=A())||void 0===n||n.setItem(P,JSON.stringify(t.app_meta))),this.connector=null,this.shouldShowSignTxnToast=void 0===(null==t?void 0:t.shouldShowSignTxnToast)||t.shouldShowSignTxnToast}connect(){return new Promise(((t,e)=>y(this,void 0,void 0,(function*(){var r;try{(null===(r=this.connector)||void 0===r?void 0:r.connected)&&(yield this.connector.killSession());let n="";this.bridge||(n=yield function(){var t,e;return y(this,void 0,void 0,(function*(){const r=null===(t=A())||void 0===t?void 0:t.getItem(C);if(r)return r;const n=function(t){const e=t.slice();for(let t=e.length-1;t>0;t--){const r=Math.floor(Math.random()*(t+1));[e[t],e[r]]=[e[r],e[t]]}return e}((yield X()).servers)[0];return null===(e=A())||void 0===e||e.setItem(C,n),n}))}()),this.connector=new p.default({bridge:this.bridge||n,qrcodeModal:et(e)}),yield this.connector.createSession({chainId:4160}),this.connector.on("connect",((r,n)=>{var i,a;r&&e(r),t((null===(i=this.connector)||void 0===i?void 0:i.accounts)||[]),function(t){var e;null===(e=A())||void 0===e||e.setItem(E,JSON.stringify({type:"pera-wallet",accounts:t,selectedAccount:t[0]}))}((null===(a=this.connector)||void 0===a?void 0:a.accounts)||[])}))}catch(t){console.log(t);const{name:r}=D();e(new v({type:"SESSION_CONNECT",detail:t},t.message||`There was an error while connecting to ${r}`))}}))))}reconnectSession(){var t;return y(this,void 0,void 0,(function*(){try{if(this.connector)return this.connector.accounts||[];if((yield X()).servers.includes(this.bridge))return this.connector=new p.default({bridge:this.bridge,qrcodeModal:et()}),(null===(t=this.connector)||void 0===t?void 0:t.accounts)||[];throw new v({type:"SESSION_RECONNECT",detail:""},"The bridge server is not active anymore. Disconnecting.")}catch(t){this.disconnect();const{name:e}=D();throw new v({type:"SESSION_RECONNECT",detail:t},t.message||`There was an error while reconnecting to ${e}`)}}))}disconnect(){var t;const e=null===(t=this.connector)||void 0===t?void 0:t.killSession();return null==e||e.then((()=>{this.connector=null})),function(){var t,e,r;null===(t=A())||void 0===t||t.removeItem("walletconnect"),null===(e=A())||void 0===e||e.removeItem(E),null===(r=A())||void 0===r||r.removeItem(C)}(),e}signTransaction(t,e){if(!this.connector)throw new Error("PeraWalletConnect was not initialized correctly.");const r=t.flatMap((t=>t.map((t=>{let r;e&&!(t.signers||[]).includes(e)&&(r=[]);const i={txn:(a=t.txn,n.from(g.default.encodeUnsignedTransaction(a)).toString("base64"))};var a;return Array.isArray(r)&&(i.signers=r),i})))),i=a.formatJsonRpcRequest("algo_signTxn",[r]);return k()?d.default.createRoot(Z("pera-wallet-redirect-modal-wrapper")).render(f.default.createElement(W,{onClose:function(){K("pera-wallet-redirect-modal-wrapper")}})):!k()&&this.shouldShowSignTxnToast&&d.default.createRoot(Z("pera-wallet-sign-txn-toast-wrapper")).render(f.default.createElement($,{onClose:Y})),this.connector.sendCustomRequest(i).then((t=>{const e=t.filter(Boolean);return"string"==typeof e[0]?e.map(tt):e.map((t=>Uint8Array.from(t)))})).catch((t=>Promise.reject(new v({type:"SIGN_TRANSACTIONS",detail:t},t.message||"Failed to sign transaction")))).finally((()=>{K("pera-wallet-redirect-modal-wrapper"),K("pera-wallet-sign-txn-toast-wrapper")}))}},e.closePeraWalletSignTxnToast=Y},9868:(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>vt});var n={};r.r(n),r.d(n,{decrypt:()=>yt,encrypt:()=>gt,generateKey:()=>dt,verifyHmac:()=>mt});var i=r(5755),a=r(2873),s=function(t,e,r){this.name=t,this.version=e,this.os=r,this.type="browser"},o=function(t){this.version=t,this.type="node",this.name="node",this.os=process.platform},l=function(t,e,r,n){this.name=t,this.version=e,this.os=r,this.bot=n,this.type="bot-device"},h=function(){this.type="bot",this.bot=!0,this.name="bot",this.version=null,this.os=null},u=function(){this.type="react-native",this.name="react-native",this.version=null,this.os=null},c=/(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/,p=[["aol",/AOLShield\/([0-9\._]+)/],["edge",/Edge\/([0-9\._]+)/],["edge-ios",/EdgiOS\/([0-9\._]+)/],["yandexbrowser",/YaBrowser\/([0-9\._]+)/],["kakaotalk",/KAKAOTALK\s([0-9\.]+)/],["samsung",/SamsungBrowser\/([0-9\.]+)/],["silk",/\bSilk\/([0-9._-]+)\b/],["miui",/MiuiBrowser\/([0-9\.]+)$/],["beaker",/BeakerBrowser\/([0-9\.]+)/],["edge-chromium",/EdgA?\/([0-9\.]+)/],["chromium-webview",/(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["chrome",/(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["phantomjs",/PhantomJS\/([0-9\.]+)(:?\s|$)/],["crios",/CriOS\/([0-9\.]+)(:?\s|$)/],["firefox",/Firefox\/([0-9\.]+)(?:\s|$)/],["fxios",/FxiOS\/([0-9\.]+)/],["opera-mini",/Opera Mini.*Version\/([0-9\.]+)/],["opera",/Opera\/([0-9\.]+)(?:\s|$)/],["opera",/OPR\/([0-9\.]+)(:?\s|$)/],["ie",/Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],["ie",/MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],["ie",/MSIE\s(7\.0)/],["bb10",/BB10;\sTouch.*Version\/([0-9\.]+)/],["android",/Android\s([0-9\.]+)/],["ios",/Version\/([0-9\._]+).*Mobile.*Safari.*/],["safari",/Version\/([0-9\._]+).*Safari/],["facebook",/FBAV\/([0-9\.]+)/],["instagram",/Instagram\s([0-9\.]+)/],["ios-webview",/AppleWebKit\/([0-9\.]+).*Mobile/],["ios-webview",/AppleWebKit\/([0-9\.]+).*Gecko\)$/],["searchbot",/alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/]],f=[["iOS",/iP(hone|od|ad)/],["Android OS",/Android/],["BlackBerry OS",/BlackBerry|BB10/],["Windows Mobile",/IEMobile/],["Amazon OS",/Kindle/],["Windows 3.11",/Win16/],["Windows 95",/(Windows 95)|(Win95)|(Windows_95)/],["Windows 98",/(Windows 98)|(Win98)/],["Windows 2000",/(Windows NT 5.0)|(Windows 2000)/],["Windows XP",/(Windows NT 5.1)|(Windows XP)/],["Windows Server 2003",/(Windows NT 5.2)/],["Windows Vista",/(Windows NT 6.0)/],["Windows 7",/(Windows NT 6.1)/],["Windows 8",/(Windows NT 6.2)/],["Windows 8.1",/(Windows NT 6.3)/],["Windows 10",/(Windows NT 10.0)/],["Windows ME",/Windows ME/],["Open BSD",/OpenBSD/],["Sun OS",/SunOS/],["Chrome OS",/CrOS/],["Linux",/(Linux)|(X11)/],["Mac OS",/(Mac_PowerPC)|(Macintosh)/],["QNX",/QNX/],["BeOS",/BeOS/],["OS/2",/OS\/2/]];function d(t){var e=function(t){return""!==t&&p.reduce((function(e,r){var n=r[0],i=r[1];if(e)return e;var a=i.exec(t);return!!a&&[n,a]}),!1)}(t);if(!e)return null;var r=e[0],n=e[1];if("searchbot"===r)return new h;var i=n[1]&&n[1].split(/[._]/).slice(0,3);i?i.length<3&&(i=function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var a=arguments[e],s=0,o=a.length;s<o;s++,i++)n[i]=a[s];return n}(i,function(t){for(var e=[],r=0;r<t;r++)e.push("0");return e}(3-i.length))):i=[];var a=i.join("."),o=function(t){for(var e=0,r=f.length;e<r;e++){var n=f[e],i=n[0];if(n[1].exec(t))return i}return null}(t),u=c.exec(t);return u&&u[1]?new l(r,a,o,u[1]):new s(r,a,o)}function m(t){return function(t){return t?d(t):"undefined"==typeof document&&"undefined"!=typeof navigator&&"ReactNative"===navigator.product?new u:"undefined"!=typeof navigator?d(navigator.userAgent):"undefined"!=typeof process&&process.version?new o(process.version.slice(1)):null}(t)}function g(){const t=m();return t&&t.os?t.os:void 0}a.getFromWindow,a.getFromWindowOrThrow,a.getDocumentOrThrow,a.getDocument,a.getNavigatorOrThrow;const y=a.getNavigator,v=(a.getLocationOrThrow,a.getLocation),b=(a.getCryptoOrThrow,a.getCrypto,a.getLocalStorageOrThrow,a.getLocalStorage);function w(){return i.D()}function x(t){let e=null,r=null;const n=b();return n&&(r=n.getItem(t)),e=r?function(t){if("string"!=typeof t)throw new Error("Cannot safe json parse value of type "+typeof t);try{return JSON.parse(t)}catch(e){return t}}(r):r,e}function _(t){const e=b();e&&e.removeItem(t)}const k="WALLETCONNECT_DEEPLINK_CHOICE",S=["session_request","session_update","exchange_key","connect","disconnect","display_uri","modal_closed","transport_open","transport_close","transport_error"],E=["eth_sendTransaction","eth_signTransaction","eth_sign","eth_signTypedData","eth_signTypedData_v1","eth_signTypedData_v2","eth_signTypedData_v3","eth_signTypedData_v4","personal_sign","wallet_addEthereumChain","wallet_switchEthereumChain","wallet_getPermissions","wallet_requestPermissions","wallet_registerOnboarding","wallet_watchAsset","wallet_scanQRCode"];var C=r(1460),M=r.n(C),P=(r(4501),r(5054)),A=r.n(P),T=r(8764).Buffer;const D="utf8";function I(t){return new Uint8Array(t)}function F(t,e=!1){const r=t.toString("hex");return e?G(r):r}function R(t){return A()(t)}function B(t,e=!1){return F(R(t),e)}function L(t){return R(t).toString(D)}function N(t){return I(function(t){return T.from(z(t),"hex")}(t))}function O(t){return T.from(t,D)}function V(...t){let e=[];return t.forEach((t=>e=e.concat(Array.from(t)))),new Uint8Array([...e])}function z(t){return t.replace(/^0x/,"")}function G(t){return t.startsWith("0x")?t:`0x${t}`}function j(t){return(t=function(t,e=8,r="0"){return function(t,e,r="0"){return function(t,e,r,n="0"){const i=e-t.length;let a=t;if(i>0){const e=n.repeat(i);a=r?e+t:t+e}return a}(t,e,!0,r)}(t,function(t,e=8){const r=t%e;return r?(t-r)/e*e+e:t}(t.length,e),r)}(t=z(t),2))&&(t=G(t)),t}function H(t){return R(new Uint8Array(t))}function q(t,e){const r=z(j(new(M())(t).toString(16)));return e?r:G(r)}var W=r(1094),U=r(1468);function $(t){return j(t)}const Z=function(){return Date.now()*Math.pow(10,3)+Math.floor(Math.random()*Math.pow(10,3))};function Q(){return((t,e)=>{for(e=t="";t++<36;e+=51*t&52?(15^t?8^Math.random()*(20^t?16:4):4).toString(16):"-");return e})()}function Y(t,e){return function(t,e){return!("string"!=typeof t||!t.match(/^0x[0-9A-Fa-f]*$/)||e&&t.length!==2+2*e)}(t,e)}function K(t){return void 0!==t.result}function J(t){return void 0!==t.error}function X(t){return void 0!==t.event}function tt(t){var e,r;return(e=t)&&e.length&&!Y(t[0])&&(t[0]=function(t,e=!1){return F(O(t),e)}(t[0],!r)),t}function et(t){if(void 0!==t.type&&"0"!==t.type)return t;if(void 0===t.from||!(e=t.from)||"0x"!==e.toLowerCase().substring(0,2)||!/^(0x)?[0-9a-f]{40}$/i.test(e)||!/^(0x)?[0-9a-f]{40}$/.test(e)&&!/^(0x)?[0-9A-F]{40}$/.test(e)&&e!==function(t){t=z(t.toLowerCase());const e=z((0,W.keccak_256)(O(t)));let r="";for(let n=0;n<t.length;n++)parseInt(e[n],16)>7?r+=t[n].toUpperCase():r+=t[n];return G(r)}(e))throw new Error("Transaction object must include a valid 'from' value.");var e;function r(t){let e=t;return("number"==typeof t||"string"==typeof t&&!function(t){return""===t||"string"==typeof t&&""===t.trim()}(t))&&(Y(t)?"string"==typeof t&&(e=$(t)):e=q(t)),"string"==typeof e&&(e=function(t){const e=t.startsWith("0x");return t=(t=z(t)).startsWith("0")?t.substring(1):t,e?G(t):t}(G(e))),e}const n={from:$(t.from),to:void 0===t.to?void 0:$(t.to),gasPrice:void 0===t.gasPrice?"":r(t.gasPrice),gas:void 0===t.gas?void 0===t.gasLimit?"":r(t.gasLimit):r(t.gas),value:void 0===t.value?"":r(t.value),nonce:void 0===t.nonce?"":r(t.nonce),data:void 0===t.data?"":$(t.data)||"0x"},i=["gasPrice","gas","value","nonce"];return Object.keys(n).forEach((t=>{(void 0===n[t]||"string"==typeof n[t]&&!n[t].trim().length)&&i.includes(t)&&delete n[t]})),n}var rt=r(7563);function nt(t){return rt.parse(t)}const it=void 0!==r.g.WebSocket?r.g.WebSocket:r(7026),at="Session currently connected",st="Session currently disconnected",ot="JSON RPC response format is invalid",lt="User close QRCode Modal",ht="abcdefghijklmnopqrstuvwxyz0123456789".split("").map((t=>`https://${t}.bridge.walletconnect.org`));const ut="AES-CBC",ct="HMAC";async function pt(t,e="AES-CBC"){return U.getSubtleCrypto().importKey("raw",t,function(t){return t===ut?{length:256,name:ut}:{hash:{name:"SHA-256"},name:ct}}(e),!0,function(t){return t===ut?["encrypt","decrypt"]:["sign","verify"]}(e))}async function ft(t,e){const r=await async function(t,e){const r=U.getSubtleCrypto(),n=await pt(t,ct),i=await r.sign({length:256,name:ct},n,e);return new Uint8Array(i)}(t,e);return r}async function dt(t){const e=function(t){return U.getBrowerCrypto().getRandomValues(new Uint8Array(t))}((t||256)/8);return I(R(e)).buffer}async function mt(t,e){const r=N(t.data),n=N(t.iv),i=B(N(t.hmac),!1),a=V(r,n),s=B(await ft(e,a),!1);return z(i)===z(s)}async function gt(t,e,r){const n=I(H(e)),i=I(H(r||await dt(128))),a=B(i,!1),s=I(O(JSON.stringify(t))),o=await function(t,e,r){return async function(t,e,r){const n=U.getSubtleCrypto(),i=await pt(e,ut),a=await n.encrypt({iv:t,name:ut},i,r);return new Uint8Array(a)}(t,e,r)}(i,n,s),l=B(o,!1),h=V(o,i);return{data:l,hmac:B(await ft(n,h),!1),iv:a}}async function yt(t,e){const r=I(H(e));if(!r)throw new Error("Missing key: required for decryption");if(!await mt(t,r))return null;const n=N(t.data),i=N(t.iv),a=L(await function(t,e,r){return async function(t,e,r){const n=U.getSubtleCrypto(),i=await pt(e,ut),a=await n.decrypt({iv:t,name:ut},i,r);return new Uint8Array(a)}(t,e,r)}(i,r,n));let s;try{s=JSON.parse(a)}catch(t){return null}return s}const vt=class extends class{constructor(t){if(this.protocol="wc",this.version=1,this._bridge="",this._key=null,this._clientId="",this._clientMeta=null,this._peerId="",this._peerMeta=null,this._handshakeId=0,this._handshakeTopic="",this._connected=!1,this._accounts=[],this._chainId=0,this._networkId=0,this._rpcUrl="",this._eventManager=new class{constructor(){this._eventEmitters=[]}subscribe(t){this._eventEmitters.push(t)}unsubscribe(t){this._eventEmitters=this._eventEmitters.filter((e=>e.event!==t))}trigger(t){let e,r=[];e=void 0!==t.method?t.method:K(t)||J(t)?`response:${t.id}`:X(t)?t.event:"",e&&(r=this._eventEmitters.filter((t=>t.event===e))),r&&r.length||function(t){return S.includes(t)||t.startsWith("wc_")}(e)||X(e)||(r=this._eventEmitters.filter((t=>"call_request"===t.event))),r.forEach((e=>{if(J(t)){const r=new Error(t.error.message);e.callback(r,null)}else e.callback(null,t)}))}},this._clientMeta=w()||t.connectorOpts.clientMeta||null,this._cryptoLib=t.cryptoLib,this._sessionStorage=t.sessionStorage||new class{constructor(t="walletconnect"){this.storageId=t}getSession(){let t=null;const e=x(this.storageId);return e&&void 0!==e.bridge&&(t=e),t}setSession(t){return function(t,e){const r="string"==typeof(i=e)?i:JSON.stringify(i),n=b();var i;n&&n.setItem(t,r)}(this.storageId,t),t}removeSession(){_(this.storageId)}}(t.connectorOpts.storageId),this._qrcodeModal=t.connectorOpts.qrcodeModal,this._qrcodeModalOptions=t.connectorOpts.qrcodeModalOptions,this._signingMethods=[...E,...t.connectorOpts.signingMethods||[]],!t.connectorOpts.bridge&&!t.connectorOpts.uri&&!t.connectorOpts.session)throw new Error("Missing one of the required parameters: bridge / uri / session");var e;t.connectorOpts.bridge&&(this.bridge=function(t){return"walletconnect.org"===function(t){return function(t){let e=t.indexOf("//")>-1?t.split("/")[2]:t.split("/")[0];return e=e.split(":")[0],e=e.split("?")[0],e}(t).split(".").slice(-2).join(".")}(t)}(e=t.connectorOpts.bridge)?ht[Math.floor(Math.random()*ht.length)]:e),t.connectorOpts.uri&&(this.uri=t.connectorOpts.uri);const r=t.connectorOpts.session||this._getStorageSession();r&&(this.session=r),this.handshakeId&&this._subscribeToSessionResponse(this.handshakeId,"Session request rejected"),this._transport=t.transport||new class{constructor(t){if(this.opts=t,this._queue=[],this._events=[],this._subscriptions=[],this._protocol=t.protocol,this._version=t.version,this._url="",this._netMonitor=null,this._socket=null,this._nextSocket=null,this._subscriptions=t.subscriptions||[],this._netMonitor=t.netMonitor||new class{constructor(){this._eventEmitters=[],"undefined"!=typeof window&&void 0!==window.addEventListener&&(window.addEventListener("online",(()=>this.trigger("online"))),window.addEventListener("offline",(()=>this.trigger("offline"))))}on(t,e){this._eventEmitters.push({event:t,callback:e})}trigger(t){let e=[];t&&(e=this._eventEmitters.filter((e=>e.event===t))),e.forEach((t=>{t.callback()}))}},!t.url||"string"!=typeof t.url)throw new Error("Missing or invalid WebSocket url");this._url=t.url,this._netMonitor.on("online",(()=>this._socketCreate()))}set readyState(t){}get readyState(){return this._socket?this._socket.readyState:-1}set connecting(t){}get connecting(){return 0===this.readyState}set connected(t){}get connected(){return 1===this.readyState}set closing(t){}get closing(){return 2===this.readyState}set closed(t){}get closed(){return 3===this.readyState}open(){this._socketCreate()}close(){this._socketClose()}send(t,e,r){if(!e||"string"!=typeof e)throw new Error("Missing or invalid topic field");this._socketSend({topic:e,type:"pub",payload:t,silent:!!r})}subscribe(t){this._socketSend({topic:t,type:"sub",payload:"",silent:!0})}on(t,e){this._events.push({event:t,callback:e})}_socketCreate(){if(this._nextSocket)return;const t=function(t,e,r){var n,i;const a=(t.startsWith("https")?t.replace("https","wss"):t.startsWith("http")?t.replace("http","ws"):t).split("?"),s=!function(){const t=m();return!(!t||!t.name)&&"node"===t.name.toLowerCase()}()&&y()?{protocol:e,version:r,env:"browser",host:(null===(n=v())||void 0===n?void 0:n.host)||""}:{protocol:e,version:r,env:(null===(i=m())||void 0===i?void 0:i.name)||""},o=function(t,e){let r=nt(t);return r=Object.assign(Object.assign({},r),e),t=function(t){return rt.stringify(t)}(r),t}(function(t){const e=-1!==t.indexOf("?")?t.indexOf("?"):void 0;return void 0!==e?t.substr(e):""}(a[1]||""),s);return a[0]+"?"+o}(this._url,this._protocol,this._version);if(this._nextSocket=new it(t),!this._nextSocket)throw new Error("Failed to create socket");this._nextSocket.onmessage=t=>this._socketReceive(t),this._nextSocket.onopen=()=>this._socketOpen(),this._nextSocket.onerror=t=>this._socketError(t),this._nextSocket.onclose=()=>{setTimeout((()=>{this._nextSocket=null,this._socketCreate()}),1e3)}}_socketOpen(){this._socketClose(),this._socket=this._nextSocket,this._nextSocket=null,this._queueSubscriptions(),this._pushQueue()}_socketClose(){this._socket&&(this._socket.onclose=()=>{},this._socket.close())}_socketSend(t){const e=JSON.stringify(t);this._socket&&1===this._socket.readyState?this._socket.send(e):(this._setToQueue(t),this._socketCreate())}async _socketReceive(t){let e;try{e=JSON.parse(t.data)}catch(t){return}if(this._socketSend({topic:e.topic,type:"ack",payload:"",silent:!0}),this._socket&&1===this._socket.readyState){const t=this._events.filter((t=>"message"===t.event));t&&t.length&&t.forEach((t=>t.callback(e)))}}_socketError(t){const e=this._events.filter((t=>"error"===t.event));e&&e.length&&e.forEach((e=>e.callback(t)))}_queueSubscriptions(){this._subscriptions.forEach((t=>this._queue.push({topic:t,type:"sub",payload:"",silent:!0}))),this._subscriptions=this.opts.subscriptions||[]}_setToQueue(t){this._queue.push(t)}_pushQueue(){this._queue.forEach((t=>this._socketSend(t))),this._queue=[]}}({protocol:this.protocol,version:this.version,url:this.bridge,subscriptions:[this.clientId]}),this._subscribeToInternalEvents(),this._initTransport(),t.connectorOpts.uri&&this._subscribeToSessionRequest(),t.pushServerOpts&&this._registerPushServer(t.pushServerOpts)}set bridge(t){t&&(this._bridge=t)}get bridge(){return this._bridge}set key(t){if(!t)return;const e=N(t).buffer;this._key=e}get key(){return this._key?(t=this._key,!0,B(new Uint8Array(t),!1)):"";var t}set clientId(t){t&&(this._clientId=t)}get clientId(){let t=this._clientId;return t||(t=this._clientId=Q()),this._clientId}set peerId(t){t&&(this._peerId=t)}get peerId(){return this._peerId}set clientMeta(t){}get clientMeta(){let t=this._clientMeta;return t||(t=this._clientMeta=w()),t}set peerMeta(t){this._peerMeta=t}get peerMeta(){return this._peerMeta}set handshakeTopic(t){t&&(this._handshakeTopic=t)}get handshakeTopic(){return this._handshakeTopic}set handshakeId(t){t&&(this._handshakeId=t)}get handshakeId(){return this._handshakeId}get uri(){return this._formatUri()}set uri(t){if(!t)return;const{handshakeTopic:e,bridge:r,key:n}=this._parseUri(t);this.handshakeTopic=e,this.bridge=r,this.key=n}set chainId(t){this._chainId=t}get chainId(){return this._chainId}set networkId(t){this._networkId=t}get networkId(){return this._networkId}set accounts(t){this._accounts=t}get accounts(){return this._accounts}set rpcUrl(t){this._rpcUrl=t}get rpcUrl(){return this._rpcUrl}set connected(t){}get connected(){return this._connected}set pending(t){}get pending(){return!!this._handshakeTopic}get session(){return{connected:this.connected,accounts:this.accounts,chainId:this.chainId,bridge:this.bridge,key:this.key,clientId:this.clientId,clientMeta:this.clientMeta,peerId:this.peerId,peerMeta:this.peerMeta,handshakeId:this.handshakeId,handshakeTopic:this.handshakeTopic}}set session(t){t&&(this._connected=t.connected,this.accounts=t.accounts,this.chainId=t.chainId,this.bridge=t.bridge,this.key=t.key,this.clientId=t.clientId,this.clientMeta=t.clientMeta,this.peerId=t.peerId,this.peerMeta=t.peerMeta,this.handshakeId=t.handshakeId,this.handshakeTopic=t.handshakeTopic)}on(t,e){const r={event:t,callback:e};this._eventManager.subscribe(r)}off(t){this._eventManager.unsubscribe(t)}async createInstantRequest(t){this._key=await this._generateKey();const e=this._formatRequest({method:"wc_instantRequest",params:[{peerId:this.clientId,peerMeta:this.clientMeta,request:this._formatRequest(t)}]});this.handshakeId=e.id,this.handshakeTopic=Q(),this._eventManager.trigger({event:"display_uri",params:[this.uri]}),this.on("modal_closed",(()=>{throw new Error(lt)}));const r=()=>{this.killSession()};try{const t=await this._sendCallRequest(e);return t&&r(),t}catch(t){throw r(),t}}async connect(t){if(!this._qrcodeModal)throw new Error("QRCode Modal not provided");return this.connected?{chainId:this.chainId,accounts:this.accounts}:(await this.createSession(t),new Promise((async(t,e)=>{this.on("modal_closed",(()=>e(new Error(lt)))),this.on("connect",((r,n)=>{if(r)return e(r);t(n.params[0])}))})))}async createSession(t){if(this._connected)throw new Error(at);if(this.pending)return;this._key=await this._generateKey();const e=this._formatRequest({method:"wc_sessionRequest",params:[{peerId:this.clientId,peerMeta:this.clientMeta,chainId:t&&t.chainId?t.chainId:null}]});this.handshakeId=e.id,this.handshakeTopic=Q(),this._sendSessionRequest(e,"Session update rejected",{topic:this.handshakeTopic}),this._eventManager.trigger({event:"display_uri",params:[this.uri]})}approveSession(t){if(this._connected)throw new Error(at);this.chainId=t.chainId,this.accounts=t.accounts,this.networkId=t.networkId||0,this.rpcUrl=t.rpcUrl||"";const e={approved:!0,chainId:this.chainId,networkId:this.networkId,accounts:this.accounts,rpcUrl:this.rpcUrl,peerId:this.clientId,peerMeta:this.clientMeta},r={id:this.handshakeId,jsonrpc:"2.0",result:e};this._sendResponse(r),this._connected=!0,this._setStorageSession(),this._eventManager.trigger({event:"connect",params:[{peerId:this.peerId,peerMeta:this.peerMeta,chainId:this.chainId,accounts:this.accounts}]})}rejectSession(t){if(this._connected)throw new Error(at);const e=t&&t.message?t.message:"Session Rejected",r=this._formatResponse({id:this.handshakeId,error:{message:e}});this._sendResponse(r),this._connected=!1,this._eventManager.trigger({event:"disconnect",params:[{message:e}]}),this._removeStorageSession()}updateSession(t){if(!this._connected)throw new Error(st);this.chainId=t.chainId,this.accounts=t.accounts,this.networkId=t.networkId||0,this.rpcUrl=t.rpcUrl||"";const e={approved:!0,chainId:this.chainId,networkId:this.networkId,accounts:this.accounts,rpcUrl:this.rpcUrl},r=this._formatRequest({method:"wc_sessionUpdate",params:[e]});this._sendSessionRequest(r,"Session update rejected"),this._eventManager.trigger({event:"session_update",params:[{chainId:this.chainId,accounts:this.accounts}]}),this._manageStorageSession()}async killSession(t){const e=t?t.message:"Session Disconnected",r=this._formatRequest({method:"wc_sessionUpdate",params:[{approved:!1,chainId:null,networkId:null,accounts:null}]});await this._sendRequest(r),this._handleSessionDisconnect(e)}async sendTransaction(t){if(!this._connected)throw new Error(st);const e=et(t),r=this._formatRequest({method:"eth_sendTransaction",params:[e]});return await this._sendCallRequest(r)}async signTransaction(t){if(!this._connected)throw new Error(st);const e=et(t),r=this._formatRequest({method:"eth_signTransaction",params:[e]});return await this._sendCallRequest(r)}async signMessage(t){if(!this._connected)throw new Error(st);const e=this._formatRequest({method:"eth_sign",params:t});return await this._sendCallRequest(e)}async signPersonalMessage(t){if(!this._connected)throw new Error(st);t=tt(t);const e=this._formatRequest({method:"personal_sign",params:t});return await this._sendCallRequest(e)}async signTypedData(t){if(!this._connected)throw new Error(st);const e=this._formatRequest({method:"eth_signTypedData",params:t});return await this._sendCallRequest(e)}async updateChain(t){if(!this._connected)throw new Error("Session currently disconnected");const e=this._formatRequest({method:"wallet_updateChain",params:[t]});return await this._sendCallRequest(e)}unsafeSend(t,e){return this._sendRequest(t,e),this._eventManager.trigger({event:"call_request_sent",params:[{request:t,options:e}]}),new Promise(((e,r)=>{this._subscribeToResponse(t.id,((t,n)=>{if(t)r(t);else{if(!n)throw new Error("Missing JSON RPC response");e(n)}}))}))}async sendCustomRequest(t,e){if(!this._connected)throw new Error(st);switch(t.method){case"eth_accounts":return this.accounts;case"eth_chainId":return q(this.chainId);case"eth_sendTransaction":case"eth_signTransaction":t.params&&(t.params[0]=et(t.params[0]));break;case"personal_sign":t.params&&(t.params=tt(t.params))}const r=this._formatRequest(t);return await this._sendCallRequest(r,e)}approveRequest(t){if(!K(t))throw new Error('JSON-RPC success response must include "result" field');{const e=this._formatResponse(t);this._sendResponse(e)}}rejectRequest(t){if(!J(t))throw new Error('JSON-RPC error response must include "error" field');{const e=this._formatResponse(t);this._sendResponse(e)}}transportClose(){this._transport.close()}async _sendRequest(t,e){const r=this._formatRequest(t),n=await this._encrypt(r),i=void 0!==(null==e?void 0:e.topic)?e.topic:this.peerId,a=JSON.stringify(n),s=void 0!==(null==e?void 0:e.forcePushNotification)?!e.forcePushNotification:function(t){return!!t.method.startsWith("wc_")||!E.includes(t.method)}(r);this._transport.send(a,i,s)}async _sendResponse(t){const e=await this._encrypt(t),r=this.peerId,n=JSON.stringify(e);this._transport.send(n,r,!0)}async _sendSessionRequest(t,e,r){this._sendRequest(t,r),this._subscribeToSessionResponse(t.id,e)}_sendCallRequest(t,e){return this._sendRequest(t,e),this._eventManager.trigger({event:"call_request_sent",params:[{request:t,options:e}]}),this._subscribeToCallResponse(t.id)}_formatRequest(t){if(void 0===t.method)throw new Error('JSON RPC request must have valid "method" value');return{id:void 0===t.id?Z():t.id,jsonrpc:"2.0",method:t.method,params:void 0===t.params?[]:t.params}}_formatResponse(t){if(void 0===t.id)throw new Error('JSON RPC request must have valid "id" value');const e={id:t.id,jsonrpc:"2.0"};if(J(t)){const r=function(t){const e=t.message||"Failed or Rejected Request";let r=-32e3;if(t&&!t.code)switch(e){case"Parse error":r=-32700;break;case"Invalid request":r=-32600;break;case"Method not found":r=-32601;break;case"Invalid params":r=-32602;break;case"Internal error":r=-32603;break;default:r=-32e3}return{code:r,message:e}}(t.error);return Object.assign(Object.assign(Object.assign({},e),t),{error:r})}if(K(t))return Object.assign(Object.assign({},e),t);throw new Error(ot)}_handleSessionDisconnect(t){const e=t||"Session Disconnected";this._connected||(this._qrcodeModal&&this._qrcodeModal.close(),_(k)),this._connected&&(this._connected=!1),this._handshakeId&&(this._handshakeId=0),this._handshakeTopic&&(this._handshakeTopic=""),this._peerId&&(this._peerId=""),this._eventManager.trigger({event:"disconnect",params:[{message:e}]}),this._removeStorageSession(),this.transportClose()}_handleSessionResponse(t,e){e&&e.approved?(this._connected?(e.chainId&&(this.chainId=e.chainId),e.accounts&&(this.accounts=e.accounts),this._eventManager.trigger({event:"session_update",params:[{chainId:this.chainId,accounts:this.accounts}]})):(this._connected=!0,e.chainId&&(this.chainId=e.chainId),e.accounts&&(this.accounts=e.accounts),e.peerId&&!this.peerId&&(this.peerId=e.peerId),e.peerMeta&&!this.peerMeta&&(this.peerMeta=e.peerMeta),this._eventManager.trigger({event:"connect",params:[{peerId:this.peerId,peerMeta:this.peerMeta,chainId:this.chainId,accounts:this.accounts}]})),this._manageStorageSession()):this._handleSessionDisconnect(t)}async _handleIncomingMessages(t){if(![this.clientId,this.handshakeTopic].includes(t.topic))return;let e;try{e=JSON.parse(t.payload)}catch(t){return}const r=await this._decrypt(e);r&&this._eventManager.trigger(r)}_subscribeToSessionRequest(){this._transport.subscribe(this.handshakeTopic)}_subscribeToResponse(t,e){this.on(`response:${t}`,e)}_subscribeToSessionResponse(t,e){this._subscribeToResponse(t,((t,r)=>{t?this._handleSessionResponse(t.message):K(r)?this._handleSessionResponse(e,r.result):r.error&&r.error.message?this._handleSessionResponse(r.error.message):this._handleSessionResponse(e)}))}_subscribeToCallResponse(t){return new Promise(((e,r)=>{this._subscribeToResponse(t,((t,n)=>{t?r(t):K(n)?e(n.result):n.error&&n.error.message?r(new Error(n.error.message)):r(new Error(ot))}))}))}_subscribeToInternalEvents(){this.on("display_uri",(()=>{this._qrcodeModal&&this._qrcodeModal.open(this.uri,(()=>{this._eventManager.trigger({event:"modal_closed",params:[]})}),this._qrcodeModalOptions)})),this.on("connect",(()=>{this._qrcodeModal&&this._qrcodeModal.close()})),this.on("call_request_sent",((t,e)=>{const{request:r}=e.params[0];if(g()&&(function(){const t=g();return!!t&&t.toLowerCase().includes("android")}()||function(){const t=g();return!!t&&(t.toLowerCase().includes("ios")||t.toLowerCase().includes("mac")&&navigator.maxTouchPoints>1)}())&&this._signingMethods.includes(r.method)){const t=x(k);t&&(window.location.href=t.href)}})),this.on("wc_sessionRequest",((t,e)=>{t&&this._eventManager.trigger({event:"error",params:[{code:"SESSION_REQUEST_ERROR",message:t.toString()}]}),this.handshakeId=e.id,this.peerId=e.params[0].peerId,this.peerMeta=e.params[0].peerMeta;const r=Object.assign(Object.assign({},e),{method:"session_request"});this._eventManager.trigger(r)})),this.on("wc_sessionUpdate",((t,e)=>{t&&this._handleSessionResponse(t.message),this._handleSessionResponse("Session disconnected",e.params[0])}))}_initTransport(){this._transport.on("message",(t=>this._handleIncomingMessages(t))),this._transport.on("open",(()=>this._eventManager.trigger({event:"transport_open",params:[]}))),this._transport.on("close",(()=>this._eventManager.trigger({event:"transport_close",params:[]}))),this._transport.on("error",(()=>this._eventManager.trigger({event:"transport_error",params:["Websocket connection failed"]}))),this._transport.open()}_formatUri(){return`${this.protocol}:${this.handshakeTopic}@${this.version}?bridge=${encodeURIComponent(this.bridge)}&key=${this.key}`}_parseUri(t){const e=function(t){const e=t.indexOf(":"),r=-1!==t.indexOf("?")?t.indexOf("?"):void 0,n=t.substring(0,e),i=function(t){const e=t.split("@");return{handshakeTopic:e[0],version:parseInt(e[1],10)}}(t.substring(e+1,r)),a=function(t){const e=nt(t);return{key:e.key||"",bridge:e.bridge||""}}(void 0!==r?t.substr(r):"");return Object.assign(Object.assign({protocol:n},i),a)}(t);if(e.protocol===this.protocol){if(!e.handshakeTopic)throw Error("Invalid or missing handshakeTopic parameter value");const t=e.handshakeTopic;if(!e.bridge)throw Error("Invalid or missing bridge url parameter value");const r=decodeURIComponent(e.bridge);if(!e.key)throw Error("Invalid or missing key parameter value");return{handshakeTopic:t,bridge:r,key:e.key}}throw new Error("URI format is invalid")}async _generateKey(){return this._cryptoLib?await this._cryptoLib.generateKey():null}async _encrypt(t){const e=this._key;return this._cryptoLib&&e?await this._cryptoLib.encrypt(t,e):null}async _decrypt(t){const e=this._key;return this._cryptoLib&&e?await this._cryptoLib.decrypt(t,e):null}_getStorageSession(){let t=null;return this._sessionStorage&&(t=this._sessionStorage.getSession()),t}_setStorageSession(){this._sessionStorage&&this._sessionStorage.setSession(this.session)}_removeStorageSession(){this._sessionStorage&&this._sessionStorage.removeSession()}_manageStorageSession(){this._connected?this._setStorageSession():this._removeStorageSession()}_registerPushServer(t){if(!t.url||"string"!=typeof t.url)throw Error("Invalid or missing pushServerOpts.url parameter value");if(!t.type||"string"!=typeof t.type)throw Error("Invalid or missing pushServerOpts.type parameter value");if(!t.token||"string"!=typeof t.token)throw Error("Invalid or missing pushServerOpts.token parameter value");const e={bridge:this.bridge,topic:this.clientId,type:t.type,token:t.token,peerName:"",language:t.language||""};this.on("connect",(async(r,n)=>{if(r)throw r;if(t.peerMeta){const t=n.params[0].peerMeta.name;e.peerName=t}try{const r=await fetch(`${t.url}/new`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(e)});if(!(await r.json()).success)throw Error("Failed to register in Push Server")}catch(r){throw Error("Failed to register in Push Server")}}))}}{constructor(t,e){super({cryptoLib:n,connectorOpts:t,pushServerOpts:e})}}},926:(t,e,r)=>{"use strict";function n(){return(null===r.g||void 0===r.g?void 0:r.g.crypto)||(null===r.g||void 0===r.g?void 0:r.g.msCrypto)||{}}function i(){const t=n();return t.subtle||t.webkitSubtle}Object.defineProperty(e,"__esModule",{value:!0}),e.isBrowserCryptoAvailable=e.getSubtleCrypto=e.getBrowerCrypto=void 0,e.getBrowerCrypto=n,e.getSubtleCrypto=i,e.isBrowserCryptoAvailable=function(){return!!n()&&!!i()}},8618:(t,e)=>{"use strict";function r(){return"undefined"==typeof document&&"undefined"!=typeof navigator&&"ReactNative"===navigator.product}function n(){return"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node}Object.defineProperty(e,"__esModule",{value:!0}),e.isBrowser=e.isNode=e.isReactNative=void 0,e.isReactNative=r,e.isNode=n,e.isBrowser=function(){return!r()&&!n()}},1468:function(t,e,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),i=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||e.hasOwnProperty(r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),i(r(926),e),i(r(8618),e)},1460:function(t,e,r){!function(t,e){"use strict";function n(t,e){if(!t)throw new Error(e||"Assertion failed")}function i(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}function a(t,e,r){if(a.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(r=e,e=10),this._init(t||0,e||10,r||"be"))}var s;"object"==typeof t?t.exports=a:e.BN=a,a.BN=a,a.wordSize=26;try{s=r(6563).Buffer}catch(t){}function o(t,e,r){for(var n=0,i=Math.min(t.length,r),a=e;a<i;a++){var s=t.charCodeAt(a)-48;n<<=4,n|=s>=49&&s<=54?s-49+10:s>=17&&s<=22?s-17+10:15&s}return n}function l(t,e,r,n){for(var i=0,a=Math.min(t.length,r),s=e;s<a;s++){var o=t.charCodeAt(s)-48;i*=n,i+=o>=49?o-49+10:o>=17?o-17+10:o}return i}a.isBN=function(t){return t instanceof a||null!==t&&"object"==typeof t&&t.constructor.wordSize===a.wordSize&&Array.isArray(t.words)},a.max=function(t,e){return t.cmp(e)>0?t:e},a.min=function(t,e){return t.cmp(e)<0?t:e},a.prototype._init=function(t,e,r){if("number"==typeof t)return this._initNumber(t,e,r);if("object"==typeof t)return this._initArray(t,e,r);"hex"===e&&(e=16),n(e===(0|e)&&e>=2&&e<=36);var i=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&i++,16===e?this._parseHex(t,i):this._parseBase(t,e,i),"-"===t[0]&&(this.negative=1),this.strip(),"le"===r&&this._initArray(this.toArray(),e,r)},a.prototype._initNumber=function(t,e,r){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(n(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===r&&this._initArray(this.toArray(),e,r)},a.prototype._initArray=function(t,e,r){if(n("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var a,s,o=0;if("be"===r)for(i=t.length-1,a=0;i>=0;i-=3)s=t[i]|t[i-1]<<8|t[i-2]<<16,this.words[a]|=s<<o&67108863,this.words[a+1]=s>>>26-o&67108863,(o+=24)>=26&&(o-=26,a++);else if("le"===r)for(i=0,a=0;i<t.length;i+=3)s=t[i]|t[i+1]<<8|t[i+2]<<16,this.words[a]|=s<<o&67108863,this.words[a+1]=s>>>26-o&67108863,(o+=24)>=26&&(o-=26,a++);return this.strip()},a.prototype._parseHex=function(t,e){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var r=0;r<this.length;r++)this.words[r]=0;var n,i,a=0;for(r=t.length-6,n=0;r>=e;r-=6)i=o(t,r,r+6),this.words[n]|=i<<a&67108863,this.words[n+1]|=i>>>26-a&4194303,(a+=24)>=26&&(a-=26,n++);r+6!==e&&(i=o(t,e,r+6),this.words[n]|=i<<a&67108863,this.words[n+1]|=i>>>26-a&4194303),this.strip()},a.prototype._parseBase=function(t,e,r){this.words=[0],this.length=1;for(var n=0,i=1;i<=67108863;i*=e)n++;n--,i=i/e|0;for(var a=t.length-r,s=a%n,o=Math.min(a,a-s)+r,h=0,u=r;u<o;u+=n)h=l(t,u,u+n,e),this.imuln(i),this.words[0]+h<67108864?this.words[0]+=h:this._iaddn(h);if(0!==s){var c=1;for(h=l(t,u,t.length,e),u=0;u<s;u++)c*=e;this.imuln(c),this.words[0]+h<67108864?this.words[0]+=h:this._iaddn(h)}},a.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},a.prototype.clone=function(){var t=new a(null);return this.copy(t),t},a.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},a.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},a.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},a.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var h=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],u=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],c=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function p(t,e,r){r.negative=e.negative^t.negative;var n=t.length+e.length|0;r.length=n,n=n-1|0;var i=0|t.words[0],a=0|e.words[0],s=i*a,o=67108863&s,l=s/67108864|0;r.words[0]=o;for(var h=1;h<n;h++){for(var u=l>>>26,c=67108863&l,p=Math.min(h,e.length-1),f=Math.max(0,h-t.length+1);f<=p;f++){var d=h-f|0;u+=(s=(i=0|t.words[d])*(a=0|e.words[f])+c)/67108864|0,c=67108863&s}r.words[h]=0|c,l=0|u}return 0!==l?r.words[h]=0|l:r.length--,r.strip()}a.prototype.toString=function(t,e){var r;if(e=0|e||1,16===(t=t||10)||"hex"===t){r="";for(var i=0,a=0,s=0;s<this.length;s++){var o=this.words[s],l=(16777215&(o<<i|a)).toString(16);r=0!=(a=o>>>24-i&16777215)||s!==this.length-1?h[6-l.length]+l+r:l+r,(i+=2)>=26&&(i-=26,s--)}for(0!==a&&(r=a.toString(16)+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}if(t===(0|t)&&t>=2&&t<=36){var p=u[t],f=c[t];r="";var d=this.clone();for(d.negative=0;!d.isZero();){var m=d.modn(f).toString(t);r=(d=d.idivn(f)).isZero()?m+r:h[p-m.length]+m+r}for(this.isZero()&&(r="0"+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}n(!1,"Base should be between 2 and 36")},a.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&n(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},a.prototype.toJSON=function(){return this.toString(16)},a.prototype.toBuffer=function(t,e){return n(void 0!==s),this.toArrayLike(s,t,e)},a.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},a.prototype.toArrayLike=function(t,e,r){var i=this.byteLength(),a=r||Math.max(1,i);n(i<=a,"byte array longer than desired length"),n(a>0,"Requested array length <= 0"),this.strip();var s,o,l="le"===e,h=new t(a),u=this.clone();if(l){for(o=0;!u.isZero();o++)s=u.andln(255),u.iushrn(8),h[o]=s;for(;o<a;o++)h[o]=0}else{for(o=0;o<a-i;o++)h[o]=0;for(o=0;!u.isZero();o++)s=u.andln(255),u.iushrn(8),h[a-o-1]=s}return h},Math.clz32?a.prototype._countBits=function(t){return 32-Math.clz32(t)}:a.prototype._countBits=function(t){var e=t,r=0;return e>=4096&&(r+=13,e>>>=13),e>=64&&(r+=7,e>>>=7),e>=8&&(r+=4,e>>>=4),e>=2&&(r+=2,e>>>=2),r+e},a.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,r=0;return 0==(8191&e)&&(r+=13,e>>>=13),0==(127&e)&&(r+=7,e>>>=7),0==(15&e)&&(r+=4,e>>>=4),0==(3&e)&&(r+=2,e>>>=2),0==(1&e)&&r++,r},a.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},a.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var r=this._zeroBits(this.words[e]);if(t+=r,26!==r)break}return t},a.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},a.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},a.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},a.prototype.isNeg=function(){return 0!==this.negative},a.prototype.neg=function(){return this.clone().ineg()},a.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},a.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},a.prototype.ior=function(t){return n(0==(this.negative|t.negative)),this.iuor(t)},a.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},a.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},a.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var r=0;r<e.length;r++)this.words[r]=this.words[r]&t.words[r];return this.length=e.length,this.strip()},a.prototype.iand=function(t){return n(0==(this.negative|t.negative)),this.iuand(t)},a.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},a.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},a.prototype.iuxor=function(t){var e,r;this.length>t.length?(e=this,r=t):(e=t,r=this);for(var n=0;n<r.length;n++)this.words[n]=e.words[n]^r.words[n];if(this!==e)for(;n<e.length;n++)this.words[n]=e.words[n];return this.length=e.length,this.strip()},a.prototype.ixor=function(t){return n(0==(this.negative|t.negative)),this.iuxor(t)},a.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},a.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},a.prototype.inotn=function(t){n("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),r=t%26;this._expand(e),r>0&&e--;for(var i=0;i<e;i++)this.words[i]=67108863&~this.words[i];return r>0&&(this.words[i]=~this.words[i]&67108863>>26-r),this.strip()},a.prototype.notn=function(t){return this.clone().inotn(t)},a.prototype.setn=function(t,e){n("number"==typeof t&&t>=0);var r=t/26|0,i=t%26;return this._expand(r+1),this.words[r]=e?this.words[r]|1<<i:this.words[r]&~(1<<i),this.strip()},a.prototype.iadd=function(t){var e,r,n;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(r=this,n=t):(r=t,n=this);for(var i=0,a=0;a<n.length;a++)e=(0|r.words[a])+(0|n.words[a])+i,this.words[a]=67108863&e,i=e>>>26;for(;0!==i&&a<r.length;a++)e=(0|r.words[a])+i,this.words[a]=67108863&e,i=e>>>26;if(this.length=r.length,0!==i)this.words[this.length]=i,this.length++;else if(r!==this)for(;a<r.length;a++)this.words[a]=r.words[a];return this},a.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},a.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var r,n,i=this.cmp(t);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(r=this,n=t):(r=t,n=this);for(var a=0,s=0;s<n.length;s++)a=(e=(0|r.words[s])-(0|n.words[s])+a)>>26,this.words[s]=67108863&e;for(;0!==a&&s<r.length;s++)a=(e=(0|r.words[s])+a)>>26,this.words[s]=67108863&e;if(0===a&&s<r.length&&r!==this)for(;s<r.length;s++)this.words[s]=r.words[s];return this.length=Math.max(this.length,s),r!==this&&(this.negative=1),this.strip()},a.prototype.sub=function(t){return this.clone().isub(t)};var f=function(t,e,r){var n,i,a,s=t.words,o=e.words,l=r.words,h=0,u=0|s[0],c=8191&u,p=u>>>13,f=0|s[1],d=8191&f,m=f>>>13,g=0|s[2],y=8191&g,v=g>>>13,b=0|s[3],w=8191&b,x=b>>>13,_=0|s[4],k=8191&_,S=_>>>13,E=0|s[5],C=8191&E,M=E>>>13,P=0|s[6],A=8191&P,T=P>>>13,D=0|s[7],I=8191&D,F=D>>>13,R=0|s[8],B=8191&R,L=R>>>13,N=0|s[9],O=8191&N,V=N>>>13,z=0|o[0],G=8191&z,j=z>>>13,H=0|o[1],q=8191&H,W=H>>>13,U=0|o[2],$=8191&U,Z=U>>>13,Q=0|o[3],Y=8191&Q,K=Q>>>13,J=0|o[4],X=8191&J,tt=J>>>13,et=0|o[5],rt=8191&et,nt=et>>>13,it=0|o[6],at=8191&it,st=it>>>13,ot=0|o[7],lt=8191&ot,ht=ot>>>13,ut=0|o[8],ct=8191&ut,pt=ut>>>13,ft=0|o[9],dt=8191&ft,mt=ft>>>13;r.negative=t.negative^e.negative,r.length=19;var gt=(h+(n=Math.imul(c,G))|0)+((8191&(i=(i=Math.imul(c,j))+Math.imul(p,G)|0))<<13)|0;h=((a=Math.imul(p,j))+(i>>>13)|0)+(gt>>>26)|0,gt&=67108863,n=Math.imul(d,G),i=(i=Math.imul(d,j))+Math.imul(m,G)|0,a=Math.imul(m,j);var yt=(h+(n=n+Math.imul(c,q)|0)|0)+((8191&(i=(i=i+Math.imul(c,W)|0)+Math.imul(p,q)|0))<<13)|0;h=((a=a+Math.imul(p,W)|0)+(i>>>13)|0)+(yt>>>26)|0,yt&=67108863,n=Math.imul(y,G),i=(i=Math.imul(y,j))+Math.imul(v,G)|0,a=Math.imul(v,j),n=n+Math.imul(d,q)|0,i=(i=i+Math.imul(d,W)|0)+Math.imul(m,q)|0,a=a+Math.imul(m,W)|0;var vt=(h+(n=n+Math.imul(c,$)|0)|0)+((8191&(i=(i=i+Math.imul(c,Z)|0)+Math.imul(p,$)|0))<<13)|0;h=((a=a+Math.imul(p,Z)|0)+(i>>>13)|0)+(vt>>>26)|0,vt&=67108863,n=Math.imul(w,G),i=(i=Math.imul(w,j))+Math.imul(x,G)|0,a=Math.imul(x,j),n=n+Math.imul(y,q)|0,i=(i=i+Math.imul(y,W)|0)+Math.imul(v,q)|0,a=a+Math.imul(v,W)|0,n=n+Math.imul(d,$)|0,i=(i=i+Math.imul(d,Z)|0)+Math.imul(m,$)|0,a=a+Math.imul(m,Z)|0;var bt=(h+(n=n+Math.imul(c,Y)|0)|0)+((8191&(i=(i=i+Math.imul(c,K)|0)+Math.imul(p,Y)|0))<<13)|0;h=((a=a+Math.imul(p,K)|0)+(i>>>13)|0)+(bt>>>26)|0,bt&=67108863,n=Math.imul(k,G),i=(i=Math.imul(k,j))+Math.imul(S,G)|0,a=Math.imul(S,j),n=n+Math.imul(w,q)|0,i=(i=i+Math.imul(w,W)|0)+Math.imul(x,q)|0,a=a+Math.imul(x,W)|0,n=n+Math.imul(y,$)|0,i=(i=i+Math.imul(y,Z)|0)+Math.imul(v,$)|0,a=a+Math.imul(v,Z)|0,n=n+Math.imul(d,Y)|0,i=(i=i+Math.imul(d,K)|0)+Math.imul(m,Y)|0,a=a+Math.imul(m,K)|0;var wt=(h+(n=n+Math.imul(c,X)|0)|0)+((8191&(i=(i=i+Math.imul(c,tt)|0)+Math.imul(p,X)|0))<<13)|0;h=((a=a+Math.imul(p,tt)|0)+(i>>>13)|0)+(wt>>>26)|0,wt&=67108863,n=Math.imul(C,G),i=(i=Math.imul(C,j))+Math.imul(M,G)|0,a=Math.imul(M,j),n=n+Math.imul(k,q)|0,i=(i=i+Math.imul(k,W)|0)+Math.imul(S,q)|0,a=a+Math.imul(S,W)|0,n=n+Math.imul(w,$)|0,i=(i=i+Math.imul(w,Z)|0)+Math.imul(x,$)|0,a=a+Math.imul(x,Z)|0,n=n+Math.imul(y,Y)|0,i=(i=i+Math.imul(y,K)|0)+Math.imul(v,Y)|0,a=a+Math.imul(v,K)|0,n=n+Math.imul(d,X)|0,i=(i=i+Math.imul(d,tt)|0)+Math.imul(m,X)|0,a=a+Math.imul(m,tt)|0;var xt=(h+(n=n+Math.imul(c,rt)|0)|0)+((8191&(i=(i=i+Math.imul(c,nt)|0)+Math.imul(p,rt)|0))<<13)|0;h=((a=a+Math.imul(p,nt)|0)+(i>>>13)|0)+(xt>>>26)|0,xt&=67108863,n=Math.imul(A,G),i=(i=Math.imul(A,j))+Math.imul(T,G)|0,a=Math.imul(T,j),n=n+Math.imul(C,q)|0,i=(i=i+Math.imul(C,W)|0)+Math.imul(M,q)|0,a=a+Math.imul(M,W)|0,n=n+Math.imul(k,$)|0,i=(i=i+Math.imul(k,Z)|0)+Math.imul(S,$)|0,a=a+Math.imul(S,Z)|0,n=n+Math.imul(w,Y)|0,i=(i=i+Math.imul(w,K)|0)+Math.imul(x,Y)|0,a=a+Math.imul(x,K)|0,n=n+Math.imul(y,X)|0,i=(i=i+Math.imul(y,tt)|0)+Math.imul(v,X)|0,a=a+Math.imul(v,tt)|0,n=n+Math.imul(d,rt)|0,i=(i=i+Math.imul(d,nt)|0)+Math.imul(m,rt)|0,a=a+Math.imul(m,nt)|0;var _t=(h+(n=n+Math.imul(c,at)|0)|0)+((8191&(i=(i=i+Math.imul(c,st)|0)+Math.imul(p,at)|0))<<13)|0;h=((a=a+Math.imul(p,st)|0)+(i>>>13)|0)+(_t>>>26)|0,_t&=67108863,n=Math.imul(I,G),i=(i=Math.imul(I,j))+Math.imul(F,G)|0,a=Math.imul(F,j),n=n+Math.imul(A,q)|0,i=(i=i+Math.imul(A,W)|0)+Math.imul(T,q)|0,a=a+Math.imul(T,W)|0,n=n+Math.imul(C,$)|0,i=(i=i+Math.imul(C,Z)|0)+Math.imul(M,$)|0,a=a+Math.imul(M,Z)|0,n=n+Math.imul(k,Y)|0,i=(i=i+Math.imul(k,K)|0)+Math.imul(S,Y)|0,a=a+Math.imul(S,K)|0,n=n+Math.imul(w,X)|0,i=(i=i+Math.imul(w,tt)|0)+Math.imul(x,X)|0,a=a+Math.imul(x,tt)|0,n=n+Math.imul(y,rt)|0,i=(i=i+Math.imul(y,nt)|0)+Math.imul(v,rt)|0,a=a+Math.imul(v,nt)|0,n=n+Math.imul(d,at)|0,i=(i=i+Math.imul(d,st)|0)+Math.imul(m,at)|0,a=a+Math.imul(m,st)|0;var kt=(h+(n=n+Math.imul(c,lt)|0)|0)+((8191&(i=(i=i+Math.imul(c,ht)|0)+Math.imul(p,lt)|0))<<13)|0;h=((a=a+Math.imul(p,ht)|0)+(i>>>13)|0)+(kt>>>26)|0,kt&=67108863,n=Math.imul(B,G),i=(i=Math.imul(B,j))+Math.imul(L,G)|0,a=Math.imul(L,j),n=n+Math.imul(I,q)|0,i=(i=i+Math.imul(I,W)|0)+Math.imul(F,q)|0,a=a+Math.imul(F,W)|0,n=n+Math.imul(A,$)|0,i=(i=i+Math.imul(A,Z)|0)+Math.imul(T,$)|0,a=a+Math.imul(T,Z)|0,n=n+Math.imul(C,Y)|0,i=(i=i+Math.imul(C,K)|0)+Math.imul(M,Y)|0,a=a+Math.imul(M,K)|0,n=n+Math.imul(k,X)|0,i=(i=i+Math.imul(k,tt)|0)+Math.imul(S,X)|0,a=a+Math.imul(S,tt)|0,n=n+Math.imul(w,rt)|0,i=(i=i+Math.imul(w,nt)|0)+Math.imul(x,rt)|0,a=a+Math.imul(x,nt)|0,n=n+Math.imul(y,at)|0,i=(i=i+Math.imul(y,st)|0)+Math.imul(v,at)|0,a=a+Math.imul(v,st)|0,n=n+Math.imul(d,lt)|0,i=(i=i+Math.imul(d,ht)|0)+Math.imul(m,lt)|0,a=a+Math.imul(m,ht)|0;var St=(h+(n=n+Math.imul(c,ct)|0)|0)+((8191&(i=(i=i+Math.imul(c,pt)|0)+Math.imul(p,ct)|0))<<13)|0;h=((a=a+Math.imul(p,pt)|0)+(i>>>13)|0)+(St>>>26)|0,St&=67108863,n=Math.imul(O,G),i=(i=Math.imul(O,j))+Math.imul(V,G)|0,a=Math.imul(V,j),n=n+Math.imul(B,q)|0,i=(i=i+Math.imul(B,W)|0)+Math.imul(L,q)|0,a=a+Math.imul(L,W)|0,n=n+Math.imul(I,$)|0,i=(i=i+Math.imul(I,Z)|0)+Math.imul(F,$)|0,a=a+Math.imul(F,Z)|0,n=n+Math.imul(A,Y)|0,i=(i=i+Math.imul(A,K)|0)+Math.imul(T,Y)|0,a=a+Math.imul(T,K)|0,n=n+Math.imul(C,X)|0,i=(i=i+Math.imul(C,tt)|0)+Math.imul(M,X)|0,a=a+Math.imul(M,tt)|0,n=n+Math.imul(k,rt)|0,i=(i=i+Math.imul(k,nt)|0)+Math.imul(S,rt)|0,a=a+Math.imul(S,nt)|0,n=n+Math.imul(w,at)|0,i=(i=i+Math.imul(w,st)|0)+Math.imul(x,at)|0,a=a+Math.imul(x,st)|0,n=n+Math.imul(y,lt)|0,i=(i=i+Math.imul(y,ht)|0)+Math.imul(v,lt)|0,a=a+Math.imul(v,ht)|0,n=n+Math.imul(d,ct)|0,i=(i=i+Math.imul(d,pt)|0)+Math.imul(m,ct)|0,a=a+Math.imul(m,pt)|0;var Et=(h+(n=n+Math.imul(c,dt)|0)|0)+((8191&(i=(i=i+Math.imul(c,mt)|0)+Math.imul(p,dt)|0))<<13)|0;h=((a=a+Math.imul(p,mt)|0)+(i>>>13)|0)+(Et>>>26)|0,Et&=67108863,n=Math.imul(O,q),i=(i=Math.imul(O,W))+Math.imul(V,q)|0,a=Math.imul(V,W),n=n+Math.imul(B,$)|0,i=(i=i+Math.imul(B,Z)|0)+Math.imul(L,$)|0,a=a+Math.imul(L,Z)|0,n=n+Math.imul(I,Y)|0,i=(i=i+Math.imul(I,K)|0)+Math.imul(F,Y)|0,a=a+Math.imul(F,K)|0,n=n+Math.imul(A,X)|0,i=(i=i+Math.imul(A,tt)|0)+Math.imul(T,X)|0,a=a+Math.imul(T,tt)|0,n=n+Math.imul(C,rt)|0,i=(i=i+Math.imul(C,nt)|0)+Math.imul(M,rt)|0,a=a+Math.imul(M,nt)|0,n=n+Math.imul(k,at)|0,i=(i=i+Math.imul(k,st)|0)+Math.imul(S,at)|0,a=a+Math.imul(S,st)|0,n=n+Math.imul(w,lt)|0,i=(i=i+Math.imul(w,ht)|0)+Math.imul(x,lt)|0,a=a+Math.imul(x,ht)|0,n=n+Math.imul(y,ct)|0,i=(i=i+Math.imul(y,pt)|0)+Math.imul(v,ct)|0,a=a+Math.imul(v,pt)|0;var Ct=(h+(n=n+Math.imul(d,dt)|0)|0)+((8191&(i=(i=i+Math.imul(d,mt)|0)+Math.imul(m,dt)|0))<<13)|0;h=((a=a+Math.imul(m,mt)|0)+(i>>>13)|0)+(Ct>>>26)|0,Ct&=67108863,n=Math.imul(O,$),i=(i=Math.imul(O,Z))+Math.imul(V,$)|0,a=Math.imul(V,Z),n=n+Math.imul(B,Y)|0,i=(i=i+Math.imul(B,K)|0)+Math.imul(L,Y)|0,a=a+Math.imul(L,K)|0,n=n+Math.imul(I,X)|0,i=(i=i+Math.imul(I,tt)|0)+Math.imul(F,X)|0,a=a+Math.imul(F,tt)|0,n=n+Math.imul(A,rt)|0,i=(i=i+Math.imul(A,nt)|0)+Math.imul(T,rt)|0,a=a+Math.imul(T,nt)|0,n=n+Math.imul(C,at)|0,i=(i=i+Math.imul(C,st)|0)+Math.imul(M,at)|0,a=a+Math.imul(M,st)|0,n=n+Math.imul(k,lt)|0,i=(i=i+Math.imul(k,ht)|0)+Math.imul(S,lt)|0,a=a+Math.imul(S,ht)|0,n=n+Math.imul(w,ct)|0,i=(i=i+Math.imul(w,pt)|0)+Math.imul(x,ct)|0,a=a+Math.imul(x,pt)|0;var Mt=(h+(n=n+Math.imul(y,dt)|0)|0)+((8191&(i=(i=i+Math.imul(y,mt)|0)+Math.imul(v,dt)|0))<<13)|0;h=((a=a+Math.imul(v,mt)|0)+(i>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,n=Math.imul(O,Y),i=(i=Math.imul(O,K))+Math.imul(V,Y)|0,a=Math.imul(V,K),n=n+Math.imul(B,X)|0,i=(i=i+Math.imul(B,tt)|0)+Math.imul(L,X)|0,a=a+Math.imul(L,tt)|0,n=n+Math.imul(I,rt)|0,i=(i=i+Math.imul(I,nt)|0)+Math.imul(F,rt)|0,a=a+Math.imul(F,nt)|0,n=n+Math.imul(A,at)|0,i=(i=i+Math.imul(A,st)|0)+Math.imul(T,at)|0,a=a+Math.imul(T,st)|0,n=n+Math.imul(C,lt)|0,i=(i=i+Math.imul(C,ht)|0)+Math.imul(M,lt)|0,a=a+Math.imul(M,ht)|0,n=n+Math.imul(k,ct)|0,i=(i=i+Math.imul(k,pt)|0)+Math.imul(S,ct)|0,a=a+Math.imul(S,pt)|0;var Pt=(h+(n=n+Math.imul(w,dt)|0)|0)+((8191&(i=(i=i+Math.imul(w,mt)|0)+Math.imul(x,dt)|0))<<13)|0;h=((a=a+Math.imul(x,mt)|0)+(i>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,n=Math.imul(O,X),i=(i=Math.imul(O,tt))+Math.imul(V,X)|0,a=Math.imul(V,tt),n=n+Math.imul(B,rt)|0,i=(i=i+Math.imul(B,nt)|0)+Math.imul(L,rt)|0,a=a+Math.imul(L,nt)|0,n=n+Math.imul(I,at)|0,i=(i=i+Math.imul(I,st)|0)+Math.imul(F,at)|0,a=a+Math.imul(F,st)|0,n=n+Math.imul(A,lt)|0,i=(i=i+Math.imul(A,ht)|0)+Math.imul(T,lt)|0,a=a+Math.imul(T,ht)|0,n=n+Math.imul(C,ct)|0,i=(i=i+Math.imul(C,pt)|0)+Math.imul(M,ct)|0,a=a+Math.imul(M,pt)|0;var At=(h+(n=n+Math.imul(k,dt)|0)|0)+((8191&(i=(i=i+Math.imul(k,mt)|0)+Math.imul(S,dt)|0))<<13)|0;h=((a=a+Math.imul(S,mt)|0)+(i>>>13)|0)+(At>>>26)|0,At&=67108863,n=Math.imul(O,rt),i=(i=Math.imul(O,nt))+Math.imul(V,rt)|0,a=Math.imul(V,nt),n=n+Math.imul(B,at)|0,i=(i=i+Math.imul(B,st)|0)+Math.imul(L,at)|0,a=a+Math.imul(L,st)|0,n=n+Math.imul(I,lt)|0,i=(i=i+Math.imul(I,ht)|0)+Math.imul(F,lt)|0,a=a+Math.imul(F,ht)|0,n=n+Math.imul(A,ct)|0,i=(i=i+Math.imul(A,pt)|0)+Math.imul(T,ct)|0,a=a+Math.imul(T,pt)|0;var Tt=(h+(n=n+Math.imul(C,dt)|0)|0)+((8191&(i=(i=i+Math.imul(C,mt)|0)+Math.imul(M,dt)|0))<<13)|0;h=((a=a+Math.imul(M,mt)|0)+(i>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,n=Math.imul(O,at),i=(i=Math.imul(O,st))+Math.imul(V,at)|0,a=Math.imul(V,st),n=n+Math.imul(B,lt)|0,i=(i=i+Math.imul(B,ht)|0)+Math.imul(L,lt)|0,a=a+Math.imul(L,ht)|0,n=n+Math.imul(I,ct)|0,i=(i=i+Math.imul(I,pt)|0)+Math.imul(F,ct)|0,a=a+Math.imul(F,pt)|0;var Dt=(h+(n=n+Math.imul(A,dt)|0)|0)+((8191&(i=(i=i+Math.imul(A,mt)|0)+Math.imul(T,dt)|0))<<13)|0;h=((a=a+Math.imul(T,mt)|0)+(i>>>13)|0)+(Dt>>>26)|0,Dt&=67108863,n=Math.imul(O,lt),i=(i=Math.imul(O,ht))+Math.imul(V,lt)|0,a=Math.imul(V,ht),n=n+Math.imul(B,ct)|0,i=(i=i+Math.imul(B,pt)|0)+Math.imul(L,ct)|0,a=a+Math.imul(L,pt)|0;var It=(h+(n=n+Math.imul(I,dt)|0)|0)+((8191&(i=(i=i+Math.imul(I,mt)|0)+Math.imul(F,dt)|0))<<13)|0;h=((a=a+Math.imul(F,mt)|0)+(i>>>13)|0)+(It>>>26)|0,It&=67108863,n=Math.imul(O,ct),i=(i=Math.imul(O,pt))+Math.imul(V,ct)|0,a=Math.imul(V,pt);var Ft=(h+(n=n+Math.imul(B,dt)|0)|0)+((8191&(i=(i=i+Math.imul(B,mt)|0)+Math.imul(L,dt)|0))<<13)|0;h=((a=a+Math.imul(L,mt)|0)+(i>>>13)|0)+(Ft>>>26)|0,Ft&=67108863;var Rt=(h+(n=Math.imul(O,dt))|0)+((8191&(i=(i=Math.imul(O,mt))+Math.imul(V,dt)|0))<<13)|0;return h=((a=Math.imul(V,mt))+(i>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,l[0]=gt,l[1]=yt,l[2]=vt,l[3]=bt,l[4]=wt,l[5]=xt,l[6]=_t,l[7]=kt,l[8]=St,l[9]=Et,l[10]=Ct,l[11]=Mt,l[12]=Pt,l[13]=At,l[14]=Tt,l[15]=Dt,l[16]=It,l[17]=Ft,l[18]=Rt,0!==h&&(l[19]=h,r.length++),r};function d(t,e,r){return(new m).mulp(t,e,r)}function m(t,e){this.x=t,this.y=e}Math.imul||(f=p),a.prototype.mulTo=function(t,e){var r,n=this.length+t.length;return r=10===this.length&&10===t.length?f(this,t,e):n<63?p(this,t,e):n<1024?function(t,e,r){r.negative=e.negative^t.negative,r.length=t.length+e.length;for(var n=0,i=0,a=0;a<r.length-1;a++){var s=i;i=0;for(var o=67108863&n,l=Math.min(a,e.length-1),h=Math.max(0,a-t.length+1);h<=l;h++){var u=a-h,c=(0|t.words[u])*(0|e.words[h]),p=67108863&c;o=67108863&(p=p+o|0),i+=(s=(s=s+(c/67108864|0)|0)+(p>>>26)|0)>>>26,s&=67108863}r.words[a]=o,n=s,s=i}return 0!==n?r.words[a]=n:r.length--,r.strip()}(this,t,e):d(this,t,e),r},m.prototype.makeRBT=function(t){for(var e=new Array(t),r=a.prototype._countBits(t)-1,n=0;n<t;n++)e[n]=this.revBin(n,r,t);return e},m.prototype.revBin=function(t,e,r){if(0===t||t===r-1)return t;for(var n=0,i=0;i<e;i++)n|=(1&t)<<e-i-1,t>>=1;return n},m.prototype.permute=function(t,e,r,n,i,a){for(var s=0;s<a;s++)n[s]=e[t[s]],i[s]=r[t[s]]},m.prototype.transform=function(t,e,r,n,i,a){this.permute(a,t,e,r,n,i);for(var s=1;s<i;s<<=1)for(var o=s<<1,l=Math.cos(2*Math.PI/o),h=Math.sin(2*Math.PI/o),u=0;u<i;u+=o)for(var c=l,p=h,f=0;f<s;f++){var d=r[u+f],m=n[u+f],g=r[u+f+s],y=n[u+f+s],v=c*g-p*y;y=c*y+p*g,g=v,r[u+f]=d+g,n[u+f]=m+y,r[u+f+s]=d-g,n[u+f+s]=m-y,f!==o&&(v=l*c-h*p,p=l*p+h*c,c=v)}},m.prototype.guessLen13b=function(t,e){var r=1|Math.max(e,t),n=1&r,i=0;for(r=r/2|0;r;r>>>=1)i++;return 1<<i+1+n},m.prototype.conjugate=function(t,e,r){if(!(r<=1))for(var n=0;n<r/2;n++){var i=t[n];t[n]=t[r-n-1],t[r-n-1]=i,i=e[n],e[n]=-e[r-n-1],e[r-n-1]=-i}},m.prototype.normalize13b=function(t,e){for(var r=0,n=0;n<e/2;n++){var i=8192*Math.round(t[2*n+1]/e)+Math.round(t[2*n]/e)+r;t[n]=67108863&i,r=i<67108864?0:i/67108864|0}return t},m.prototype.convert13b=function(t,e,r,i){for(var a=0,s=0;s<e;s++)a+=0|t[s],r[2*s]=8191&a,a>>>=13,r[2*s+1]=8191&a,a>>>=13;for(s=2*e;s<i;++s)r[s]=0;n(0===a),n(0==(-8192&a))},m.prototype.stub=function(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=0;return e},m.prototype.mulp=function(t,e,r){var n=2*this.guessLen13b(t.length,e.length),i=this.makeRBT(n),a=this.stub(n),s=new Array(n),o=new Array(n),l=new Array(n),h=new Array(n),u=new Array(n),c=new Array(n),p=r.words;p.length=n,this.convert13b(t.words,t.length,s,n),this.convert13b(e.words,e.length,h,n),this.transform(s,a,o,l,n,i),this.transform(h,a,u,c,n,i);for(var f=0;f<n;f++){var d=o[f]*u[f]-l[f]*c[f];l[f]=o[f]*c[f]+l[f]*u[f],o[f]=d}return this.conjugate(o,l,n),this.transform(o,l,p,a,n,i),this.conjugate(p,a,n),this.normalize13b(p,n),r.negative=t.negative^e.negative,r.length=t.length+e.length,r.strip()},a.prototype.mul=function(t){var e=new a(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},a.prototype.mulf=function(t){var e=new a(null);return e.words=new Array(this.length+t.length),d(this,t,e)},a.prototype.imul=function(t){return this.clone().mulTo(t,this)},a.prototype.imuln=function(t){n("number"==typeof t),n(t<67108864);for(var e=0,r=0;r<this.length;r++){var i=(0|this.words[r])*t,a=(67108863&i)+(67108863&e);e>>=26,e+=i/67108864|0,e+=a>>>26,this.words[r]=67108863&a}return 0!==e&&(this.words[r]=e,this.length++),this},a.prototype.muln=function(t){return this.clone().imuln(t)},a.prototype.sqr=function(){return this.mul(this)},a.prototype.isqr=function(){return this.imul(this.clone())},a.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),r=0;r<e.length;r++){var n=r/26|0,i=r%26;e[r]=(t.words[n]&1<<i)>>>i}return e}(t);if(0===e.length)return new a(1);for(var r=this,n=0;n<e.length&&0===e[n];n++,r=r.sqr());if(++n<e.length)for(var i=r.sqr();n<e.length;n++,i=i.sqr())0!==e[n]&&(r=r.mul(i));return r},a.prototype.iushln=function(t){n("number"==typeof t&&t>=0);var e,r=t%26,i=(t-r)/26,a=67108863>>>26-r<<26-r;if(0!==r){var s=0;for(e=0;e<this.length;e++){var o=this.words[e]&a,l=(0|this.words[e])-o<<r;this.words[e]=l|s,s=o>>>26-r}s&&(this.words[e]=s,this.length++)}if(0!==i){for(e=this.length-1;e>=0;e--)this.words[e+i]=this.words[e];for(e=0;e<i;e++)this.words[e]=0;this.length+=i}return this.strip()},a.prototype.ishln=function(t){return n(0===this.negative),this.iushln(t)},a.prototype.iushrn=function(t,e,r){var i;n("number"==typeof t&&t>=0),i=e?(e-e%26)/26:0;var a=t%26,s=Math.min((t-a)/26,this.length),o=67108863^67108863>>>a<<a,l=r;if(i-=s,i=Math.max(0,i),l){for(var h=0;h<s;h++)l.words[h]=this.words[h];l.length=s}if(0===s);else if(this.length>s)for(this.length-=s,h=0;h<this.length;h++)this.words[h]=this.words[h+s];else this.words[0]=0,this.length=1;var u=0;for(h=this.length-1;h>=0&&(0!==u||h>=i);h--){var c=0|this.words[h];this.words[h]=u<<26-a|c>>>a,u=c&o}return l&&0!==u&&(l.words[l.length++]=u),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},a.prototype.ishrn=function(t,e,r){return n(0===this.negative),this.iushrn(t,e,r)},a.prototype.shln=function(t){return this.clone().ishln(t)},a.prototype.ushln=function(t){return this.clone().iushln(t)},a.prototype.shrn=function(t){return this.clone().ishrn(t)},a.prototype.ushrn=function(t){return this.clone().iushrn(t)},a.prototype.testn=function(t){n("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26,i=1<<e;return!(this.length<=r||!(this.words[r]&i))},a.prototype.imaskn=function(t){n("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26;if(n(0===this.negative,"imaskn works only with positive numbers"),this.length<=r)return this;if(0!==e&&r++,this.length=Math.min(r,this.length),0!==e){var i=67108863^67108863>>>e<<e;this.words[this.length-1]&=i}return this.strip()},a.prototype.maskn=function(t){return this.clone().imaskn(t)},a.prototype.iaddn=function(t){return n("number"==typeof t),n(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},a.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},a.prototype.isubn=function(t){if(n("number"==typeof t),n(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},a.prototype.addn=function(t){return this.clone().iaddn(t)},a.prototype.subn=function(t){return this.clone().isubn(t)},a.prototype.iabs=function(){return this.negative=0,this},a.prototype.abs=function(){return this.clone().iabs()},a.prototype._ishlnsubmul=function(t,e,r){var i,a,s=t.length+r;this._expand(s);var o=0;for(i=0;i<t.length;i++){a=(0|this.words[i+r])+o;var l=(0|t.words[i])*e;o=((a-=67108863&l)>>26)-(l/67108864|0),this.words[i+r]=67108863&a}for(;i<this.length-r;i++)o=(a=(0|this.words[i+r])+o)>>26,this.words[i+r]=67108863&a;if(0===o)return this.strip();for(n(-1===o),o=0,i=0;i<this.length;i++)o=(a=-(0|this.words[i])+o)>>26,this.words[i]=67108863&a;return this.negative=1,this.strip()},a.prototype._wordDiv=function(t,e){var r=(this.length,t.length),n=this.clone(),i=t,s=0|i.words[i.length-1];0!=(r=26-this._countBits(s))&&(i=i.ushln(r),n.iushln(r),s=0|i.words[i.length-1]);var o,l=n.length-i.length;if("mod"!==e){(o=new a(null)).length=l+1,o.words=new Array(o.length);for(var h=0;h<o.length;h++)o.words[h]=0}var u=n.clone()._ishlnsubmul(i,1,l);0===u.negative&&(n=u,o&&(o.words[l]=1));for(var c=l-1;c>=0;c--){var p=67108864*(0|n.words[i.length+c])+(0|n.words[i.length+c-1]);for(p=Math.min(p/s|0,67108863),n._ishlnsubmul(i,p,c);0!==n.negative;)p--,n.negative=0,n._ishlnsubmul(i,1,c),n.isZero()||(n.negative^=1);o&&(o.words[c]=p)}return o&&o.strip(),n.strip(),"div"!==e&&0!==r&&n.iushrn(r),{div:o||null,mod:n}},a.prototype.divmod=function(t,e,r){return n(!t.isZero()),this.isZero()?{div:new a(0),mod:new a(0)}:0!==this.negative&&0===t.negative?(o=this.neg().divmod(t,e),"mod"!==e&&(i=o.div.neg()),"div"!==e&&(s=o.mod.neg(),r&&0!==s.negative&&s.iadd(t)),{div:i,mod:s}):0===this.negative&&0!==t.negative?(o=this.divmod(t.neg(),e),"mod"!==e&&(i=o.div.neg()),{div:i,mod:o.mod}):0!=(this.negative&t.negative)?(o=this.neg().divmod(t.neg(),e),"div"!==e&&(s=o.mod.neg(),r&&0!==s.negative&&s.isub(t)),{div:o.div,mod:s}):t.length>this.length||this.cmp(t)<0?{div:new a(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new a(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new a(this.modn(t.words[0]))}:this._wordDiv(t,e);var i,s,o},a.prototype.div=function(t){return this.divmod(t,"div",!1).div},a.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},a.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},a.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var r=0!==e.div.negative?e.mod.isub(t):e.mod,n=t.ushrn(1),i=t.andln(1),a=r.cmp(n);return a<0||1===i&&0===a?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},a.prototype.modn=function(t){n(t<=67108863);for(var e=(1<<26)%t,r=0,i=this.length-1;i>=0;i--)r=(e*r+(0|this.words[i]))%t;return r},a.prototype.idivn=function(t){n(t<=67108863);for(var e=0,r=this.length-1;r>=0;r--){var i=(0|this.words[r])+67108864*e;this.words[r]=i/t|0,e=i%t}return this.strip()},a.prototype.divn=function(t){return this.clone().idivn(t)},a.prototype.egcd=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i=new a(1),s=new a(0),o=new a(0),l=new a(1),h=0;e.isEven()&&r.isEven();)e.iushrn(1),r.iushrn(1),++h;for(var u=r.clone(),c=e.clone();!e.isZero();){for(var p=0,f=1;0==(e.words[0]&f)&&p<26;++p,f<<=1);if(p>0)for(e.iushrn(p);p-- >0;)(i.isOdd()||s.isOdd())&&(i.iadd(u),s.isub(c)),i.iushrn(1),s.iushrn(1);for(var d=0,m=1;0==(r.words[0]&m)&&d<26;++d,m<<=1);if(d>0)for(r.iushrn(d);d-- >0;)(o.isOdd()||l.isOdd())&&(o.iadd(u),l.isub(c)),o.iushrn(1),l.iushrn(1);e.cmp(r)>=0?(e.isub(r),i.isub(o),s.isub(l)):(r.isub(e),o.isub(i),l.isub(s))}return{a:o,b:l,gcd:r.iushln(h)}},a.prototype._invmp=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i,s=new a(1),o=new a(0),l=r.clone();e.cmpn(1)>0&&r.cmpn(1)>0;){for(var h=0,u=1;0==(e.words[0]&u)&&h<26;++h,u<<=1);if(h>0)for(e.iushrn(h);h-- >0;)s.isOdd()&&s.iadd(l),s.iushrn(1);for(var c=0,p=1;0==(r.words[0]&p)&&c<26;++c,p<<=1);if(c>0)for(r.iushrn(c);c-- >0;)o.isOdd()&&o.iadd(l),o.iushrn(1);e.cmp(r)>=0?(e.isub(r),s.isub(o)):(r.isub(e),o.isub(s))}return(i=0===e.cmpn(1)?s:o).cmpn(0)<0&&i.iadd(t),i},a.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),r=t.clone();e.negative=0,r.negative=0;for(var n=0;e.isEven()&&r.isEven();n++)e.iushrn(1),r.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;r.isEven();)r.iushrn(1);var i=e.cmp(r);if(i<0){var a=e;e=r,r=a}else if(0===i||0===r.cmpn(1))break;e.isub(r)}return r.iushln(n)},a.prototype.invm=function(t){return this.egcd(t).a.umod(t)},a.prototype.isEven=function(){return 0==(1&this.words[0])},a.prototype.isOdd=function(){return 1==(1&this.words[0])},a.prototype.andln=function(t){return this.words[0]&t},a.prototype.bincn=function(t){n("number"==typeof t);var e=t%26,r=(t-e)/26,i=1<<e;if(this.length<=r)return this._expand(r+1),this.words[r]|=i,this;for(var a=i,s=r;0!==a&&s<this.length;s++){var o=0|this.words[s];a=(o+=a)>>>26,o&=67108863,this.words[s]=o}return 0!==a&&(this.words[s]=a,this.length++),this},a.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},a.prototype.cmpn=function(t){var e,r=t<0;if(0!==this.negative&&!r)return-1;if(0===this.negative&&r)return 1;if(this.strip(),this.length>1)e=1;else{r&&(t=-t),n(t<=67108863,"Number is too big");var i=0|this.words[0];e=i===t?0:i<t?-1:1}return 0!==this.negative?0|-e:e},a.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},a.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,r=this.length-1;r>=0;r--){var n=0|this.words[r],i=0|t.words[r];if(n!==i){n<i?e=-1:n>i&&(e=1);break}}return e},a.prototype.gtn=function(t){return 1===this.cmpn(t)},a.prototype.gt=function(t){return 1===this.cmp(t)},a.prototype.gten=function(t){return this.cmpn(t)>=0},a.prototype.gte=function(t){return this.cmp(t)>=0},a.prototype.ltn=function(t){return-1===this.cmpn(t)},a.prototype.lt=function(t){return-1===this.cmp(t)},a.prototype.lten=function(t){return this.cmpn(t)<=0},a.prototype.lte=function(t){return this.cmp(t)<=0},a.prototype.eqn=function(t){return 0===this.cmpn(t)},a.prototype.eq=function(t){return 0===this.cmp(t)},a.red=function(t){return new _(t)},a.prototype.toRed=function(t){return n(!this.red,"Already a number in reduction context"),n(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},a.prototype.fromRed=function(){return n(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},a.prototype._forceRed=function(t){return this.red=t,this},a.prototype.forceRed=function(t){return n(!this.red,"Already a number in reduction context"),this._forceRed(t)},a.prototype.redAdd=function(t){return n(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},a.prototype.redIAdd=function(t){return n(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},a.prototype.redSub=function(t){return n(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},a.prototype.redISub=function(t){return n(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},a.prototype.redShl=function(t){return n(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},a.prototype.redMul=function(t){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},a.prototype.redIMul=function(t){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},a.prototype.redSqr=function(){return n(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},a.prototype.redISqr=function(){return n(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},a.prototype.redSqrt=function(){return n(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},a.prototype.redInvm=function(){return n(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},a.prototype.redNeg=function(){return n(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},a.prototype.redPow=function(t){return n(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var g={k256:null,p224:null,p192:null,p25519:null};function y(t,e){this.name=t,this.p=new a(e,16),this.n=this.p.bitLength(),this.k=new a(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function v(){y.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function b(){y.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function w(){y.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function x(){y.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function _(t){if("string"==typeof t){var e=a._prime(t);this.m=e.p,this.prime=e}else n(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function k(t){_.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new a(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}y.prototype._tmp=function(){var t=new a(null);return t.words=new Array(Math.ceil(this.n/13)),t},y.prototype.ireduce=function(t){var e,r=t;do{this.split(r,this.tmp),e=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(e>this.n);var n=e<this.n?-1:r.ucmp(this.p);return 0===n?(r.words[0]=0,r.length=1):n>0?r.isub(this.p):r.strip(),r},y.prototype.split=function(t,e){t.iushrn(this.n,0,e)},y.prototype.imulK=function(t){return t.imul(this.k)},i(v,y),v.prototype.split=function(t,e){for(var r=4194303,n=Math.min(t.length,9),i=0;i<n;i++)e.words[i]=t.words[i];if(e.length=n,t.length<=9)return t.words[0]=0,void(t.length=1);var a=t.words[9];for(e.words[e.length++]=a&r,i=10;i<t.length;i++){var s=0|t.words[i];t.words[i-10]=(s&r)<<4|a>>>22,a=s}a>>>=22,t.words[i-10]=a,0===a&&t.length>10?t.length-=10:t.length-=9},v.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,r=0;r<t.length;r++){var n=0|t.words[r];e+=977*n,t.words[r]=67108863&e,e=64*n+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},i(b,y),i(w,y),i(x,y),x.prototype.imulK=function(t){for(var e=0,r=0;r<t.length;r++){var n=19*(0|t.words[r])+e,i=67108863&n;n>>>=26,t.words[r]=i,e=n}return 0!==e&&(t.words[t.length++]=e),t},a._prime=function(t){if(g[t])return g[t];var e;if("k256"===t)e=new v;else if("p224"===t)e=new b;else if("p192"===t)e=new w;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new x}return g[t]=e,e},_.prototype._verify1=function(t){n(0===t.negative,"red works only with positives"),n(t.red,"red works only with red numbers")},_.prototype._verify2=function(t,e){n(0==(t.negative|e.negative),"red works only with positives"),n(t.red&&t.red===e.red,"red works only with red numbers")},_.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},_.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},_.prototype.add=function(t,e){this._verify2(t,e);var r=t.add(e);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},_.prototype.iadd=function(t,e){this._verify2(t,e);var r=t.iadd(e);return r.cmp(this.m)>=0&&r.isub(this.m),r},_.prototype.sub=function(t,e){this._verify2(t,e);var r=t.sub(e);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},_.prototype.isub=function(t,e){this._verify2(t,e);var r=t.isub(e);return r.cmpn(0)<0&&r.iadd(this.m),r},_.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},_.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},_.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},_.prototype.isqr=function(t){return this.imul(t,t.clone())},_.prototype.sqr=function(t){return this.mul(t,t)},_.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(n(e%2==1),3===e){var r=this.m.add(new a(1)).iushrn(2);return this.pow(t,r)}for(var i=this.m.subn(1),s=0;!i.isZero()&&0===i.andln(1);)s++,i.iushrn(1);n(!i.isZero());var o=new a(1).toRed(this),l=o.redNeg(),h=this.m.subn(1).iushrn(1),u=this.m.bitLength();for(u=new a(2*u*u).toRed(this);0!==this.pow(u,h).cmp(l);)u.redIAdd(l);for(var c=this.pow(u,i),p=this.pow(t,i.addn(1).iushrn(1)),f=this.pow(t,i),d=s;0!==f.cmp(o);){for(var m=f,g=0;0!==m.cmp(o);g++)m=m.redSqr();n(g<d);var y=this.pow(c,new a(1).iushln(d-g-1));p=p.redMul(y),c=y.redSqr(),f=f.redMul(c),d=g}return p},_.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},_.prototype.pow=function(t,e){if(e.isZero())return new a(1).toRed(this);if(0===e.cmpn(1))return t.clone();var r=new Array(16);r[0]=new a(1).toRed(this),r[1]=t;for(var n=2;n<r.length;n++)r[n]=this.mul(r[n-1],t);var i=r[0],s=0,o=0,l=e.bitLength()%26;for(0===l&&(l=26),n=e.length-1;n>=0;n--){for(var h=e.words[n],u=l-1;u>=0;u--){var c=h>>u&1;i!==r[0]&&(i=this.sqr(i)),0!==c||0!==s?(s<<=1,s|=c,(4==++o||0===n&&0===u)&&(i=this.mul(i,r[s]),o=0,s=0)):o=0}l=26}return i},_.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},_.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},a.mont=function(t){return new k(t)},i(k,_),k.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},k.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},k.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var r=t.imul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),a=i;return i.cmp(this.m)>=0?a=i.isub(this.m):i.cmpn(0)<0&&(a=i.iadd(this.m)),a._forceRed(this)},k.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new a(0)._forceRed(this);var r=t.mul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),s=i;return i.cmp(this.m)>=0?s=i.isub(this.m):i.cmpn(0)<0&&(s=i.iadd(this.m)),s._forceRed(this)},k.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t=r.nmd(t),this)},2873:(t,e)=>{"use strict";function r(t){let e;return"undefined"!=typeof window&&void 0!==window[t]&&(e=window[t]),e}function n(t){const e=r(t);if(!e)throw new Error(`${t} is not defined in Window`);return e}Object.defineProperty(e,"__esModule",{value:!0}),e.getLocalStorage=e.getLocalStorageOrThrow=e.getCrypto=e.getCryptoOrThrow=e.getLocation=e.getLocationOrThrow=e.getNavigator=e.getNavigatorOrThrow=e.getDocument=e.getDocumentOrThrow=e.getFromWindowOrThrow=e.getFromWindow=void 0,e.getFromWindow=r,e.getFromWindowOrThrow=n,e.getDocumentOrThrow=function(){return n("document")},e.getDocument=function(){return r("document")},e.getNavigatorOrThrow=function(){return n("navigator")},e.getNavigator=function(){return r("navigator")},e.getLocationOrThrow=function(){return n("location")},e.getLocation=function(){return r("location")},e.getCryptoOrThrow=function(){return n("crypto")},e.getCrypto=function(){return r("crypto")},e.getLocalStorageOrThrow=function(){return n("localStorage")},e.getLocalStorage=function(){return r("localStorage")}},5755:(t,e,r)=>{"use strict";e.D=void 0;const n=r(2873);e.D=function(){let t,e;try{t=n.getDocumentOrThrow(),e=n.getLocationOrThrow()}catch(t){return null}function r(...e){const r=t.getElementsByTagName("meta");for(let t=0;t<r.length;t++){const n=r[t],i=["itemprop","property","name"].map((t=>n.getAttribute(t))).filter((t=>!!t&&e.includes(t)));if(i.length&&i){const t=n.getAttribute("content");if(t)return t}}return""}const i=function(){let e=r("name","og:site_name","og:title","twitter:title");return e||(e=t.title),e}();return{description:r("description","og:description","twitter:description","keywords"),url:e.origin,icons:function(){const r=t.getElementsByTagName("link"),n=[];for(let t=0;t<r.length;t++){const i=r[t],a=i.getAttribute("rel");if(a&&a.toLowerCase().indexOf("icon")>-1){const t=i.getAttribute("href");if(t)if(-1===t.toLowerCase().indexOf("https:")&&-1===t.toLowerCase().indexOf("http:")&&0!==t.indexOf("//")){let r=e.protocol+"//"+e.host;if(0===t.indexOf("/"))r+=t;else{const n=e.pathname.split("/");n.pop(),r+=n.join("/")+"/"+t}n.push(r)}else if(0===t.indexOf("//")){const r=e.protocol+t;n.push(r)}else n.push(t)}}return n}(),name:i}}},4020:t=>{"use strict";var e="%[a-f0-9]{2}",r=new RegExp(e,"gi"),n=new RegExp("("+e+")+","gi");function i(t,e){try{return decodeURIComponent(t.join(""))}catch(t){}if(1===t.length)return t;e=e||1;var r=t.slice(0,e),n=t.slice(e);return Array.prototype.concat.call([],i(r),i(n))}function a(t){try{return decodeURIComponent(t)}catch(a){for(var e=t.match(r),n=1;n<e.length;n++)e=(t=i(e,n).join("")).match(r);return t}}t.exports=function(t){if("string"!=typeof t)throw new TypeError("Expected `encodedURI` to be of type `string`, got `"+typeof t+"`");try{return t=t.replace(/\+/g," "),decodeURIComponent(t)}catch(e){return function(t){for(var e={"%FE%FF":"��","%FF%FE":"��"},r=n.exec(t);r;){try{e[r[0]]=decodeURIComponent(r[0])}catch(t){var i=a(r[0]);i!==r[0]&&(e[r[0]]=i)}r=n.exec(t)}e["%C2"]="�";for(var s=Object.keys(e),o=0;o<s.length;o++){var l=s[o];t=t.replace(new RegExp(l,"g"),e[l])}return t}(t)}}},4501:t=>{t.exports=n,n.strict=i,n.loose=a;var e=Object.prototype.toString,r={"[object Int8Array]":!0,"[object Int16Array]":!0,"[object Int32Array]":!0,"[object Uint8Array]":!0,"[object Uint8ClampedArray]":!0,"[object Uint16Array]":!0,"[object Uint32Array]":!0,"[object Float32Array]":!0,"[object Float64Array]":!0};function n(t){return i(t)||a(t)}function i(t){return t instanceof Int8Array||t instanceof Int16Array||t instanceof Int32Array||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Uint16Array||t instanceof Uint32Array||t instanceof Float32Array||t instanceof Float64Array}function a(t){return r[e.call(t)]}},1094:(t,e,r)=>{var n;!function(){"use strict";var i="input is invalid type",a="object"==typeof window,s=a?window:{};s.JS_SHA3_NO_WINDOW&&(a=!1);var o=!a&&"object"==typeof self;!s.JS_SHA3_NO_NODE_JS&&"object"==typeof process&&process.versions&&process.versions.node?s=r.g:o&&(s=self);var l=!s.JS_SHA3_NO_COMMON_JS&&t.exports,h=r.amdO,u=!s.JS_SHA3_NO_ARRAY_BUFFER&&"undefined"!=typeof ArrayBuffer,c="0123456789abcdef".split(""),p=[4,1024,262144,67108864],f=[0,8,16,24],d=[1,0,32898,0,32906,2147483648,2147516416,2147483648,32907,0,2147483649,0,2147516545,2147483648,32777,2147483648,138,0,136,0,2147516425,0,2147483658,0,2147516555,0,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,2147483648,32778,0,2147483658,2147483648,2147516545,2147483648,32896,2147483648,2147483649,0,2147516424,2147483648],m=[224,256,384,512],g=[128,256],y=["hex","buffer","arrayBuffer","array","digest"],v={128:168,256:136};!s.JS_SHA3_NO_NODE_JS&&Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),!u||!s.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW&&ArrayBuffer.isView||(ArrayBuffer.isView=function(t){return"object"==typeof t&&t.buffer&&t.buffer.constructor===ArrayBuffer});for(var b=function(t,e,r){return function(n){return new R(t,e,t).update(n)[r]()}},w=function(t,e,r){return function(n,i){return new R(t,e,i).update(n)[r]()}},x=function(t,e,r){return function(e,n,i,a){return C["cshake"+t].update(e,n,i,a)[r]()}},_=function(t,e,r){return function(e,n,i,a){return C["kmac"+t].update(e,n,i,a)[r]()}},k=function(t,e,r,n){for(var i=0;i<y.length;++i){var a=y[i];t[a]=e(r,n,a)}return t},S=function(t,e){var r=b(t,e,"hex");return r.create=function(){return new R(t,e,t)},r.update=function(t){return r.create().update(t)},k(r,b,t,e)},E=[{name:"keccak",padding:[1,256,65536,16777216],bits:m,createMethod:S},{name:"sha3",padding:[6,1536,393216,100663296],bits:m,createMethod:S},{name:"shake",padding:[31,7936,2031616,520093696],bits:g,createMethod:function(t,e){var r=w(t,e,"hex");return r.create=function(r){return new R(t,e,r)},r.update=function(t,e){return r.create(e).update(t)},k(r,w,t,e)}},{name:"cshake",padding:p,bits:g,createMethod:function(t,e){var r=v[t],n=x(t,0,"hex");return n.create=function(n,i,a){return i||a?new R(t,e,n).bytepad([i,a],r):C["shake"+t].create(n)},n.update=function(t,e,r,i){return n.create(e,r,i).update(t)},k(n,x,t,e)}},{name:"kmac",padding:p,bits:g,createMethod:function(t,e){var r=v[t],n=_(t,0,"hex");return n.create=function(n,i,a){return new B(t,e,i).bytepad(["KMAC",a],r).bytepad([n],r)},n.update=function(t,e,r,i){return n.create(t,r,i).update(e)},k(n,_,t,e)}}],C={},M=[],P=0;P<E.length;++P)for(var A=E[P],T=A.bits,D=0;D<T.length;++D){var I=A.name+"_"+T[D];if(M.push(I),C[I]=A.createMethod(T[D],A.padding),"sha3"!==A.name){var F=A.name+T[D];M.push(F),C[F]=C[I]}}function R(t,e,r){this.blocks=[],this.s=[],this.padding=e,this.outputBits=r,this.reset=!0,this.finalized=!1,this.block=0,this.start=0,this.blockCount=1600-(t<<1)>>5,this.byteCount=this.blockCount<<2,this.outputBlocks=r>>5,this.extraBytes=(31&r)>>3;for(var n=0;n<50;++n)this.s[n]=0}function B(t,e,r){R.call(this,t,e,r)}R.prototype.update=function(t){if(this.finalized)throw new Error("finalize already called");var e,r=typeof t;if("string"!==r){if("object"!==r)throw new Error(i);if(null===t)throw new Error(i);if(u&&t.constructor===ArrayBuffer)t=new Uint8Array(t);else if(!(Array.isArray(t)||u&&ArrayBuffer.isView(t)))throw new Error(i);e=!0}for(var n,a,s=this.blocks,o=this.byteCount,l=t.length,h=this.blockCount,c=0,p=this.s;c<l;){if(this.reset)for(this.reset=!1,s[0]=this.block,n=1;n<h+1;++n)s[n]=0;if(e)for(n=this.start;c<l&&n<o;++c)s[n>>2]|=t[c]<<f[3&n++];else for(n=this.start;c<l&&n<o;++c)(a=t.charCodeAt(c))<128?s[n>>2]|=a<<f[3&n++]:a<2048?(s[n>>2]|=(192|a>>6)<<f[3&n++],s[n>>2]|=(128|63&a)<<f[3&n++]):a<55296||a>=57344?(s[n>>2]|=(224|a>>12)<<f[3&n++],s[n>>2]|=(128|a>>6&63)<<f[3&n++],s[n>>2]|=(128|63&a)<<f[3&n++]):(a=65536+((1023&a)<<10|1023&t.charCodeAt(++c)),s[n>>2]|=(240|a>>18)<<f[3&n++],s[n>>2]|=(128|a>>12&63)<<f[3&n++],s[n>>2]|=(128|a>>6&63)<<f[3&n++],s[n>>2]|=(128|63&a)<<f[3&n++]);if(this.lastByteIndex=n,n>=o){for(this.start=n-o,this.block=s[h],n=0;n<h;++n)p[n]^=s[n];L(p),this.reset=!0}else this.start=n}return this},R.prototype.encode=function(t,e){var r=255&t,n=1,i=[r];for(r=255&(t>>=8);r>0;)i.unshift(r),r=255&(t>>=8),++n;return e?i.push(n):i.unshift(n),this.update(i),i.length},R.prototype.encodeString=function(t){var e,r=typeof t;if("string"!==r){if("object"!==r)throw new Error(i);if(null===t)throw new Error(i);if(u&&t.constructor===ArrayBuffer)t=new Uint8Array(t);else if(!(Array.isArray(t)||u&&ArrayBuffer.isView(t)))throw new Error(i);e=!0}var n=0,a=t.length;if(e)n=a;else for(var s=0;s<t.length;++s){var o=t.charCodeAt(s);o<128?n+=1:o<2048?n+=2:o<55296||o>=57344?n+=3:(o=65536+((1023&o)<<10|1023&t.charCodeAt(++s)),n+=4)}return n+=this.encode(8*n),this.update(t),n},R.prototype.bytepad=function(t,e){for(var r=this.encode(e),n=0;n<t.length;++n)r+=this.encodeString(t[n]);var i=e-r%e,a=[];return a.length=i,this.update(a),this},R.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var t=this.blocks,e=this.lastByteIndex,r=this.blockCount,n=this.s;if(t[e>>2]|=this.padding[3&e],this.lastByteIndex===this.byteCount)for(t[0]=t[r],e=1;e<r+1;++e)t[e]=0;for(t[r-1]|=2147483648,e=0;e<r;++e)n[e]^=t[e];L(n)}},R.prototype.toString=R.prototype.hex=function(){this.finalize();for(var t,e=this.blockCount,r=this.s,n=this.outputBlocks,i=this.extraBytes,a=0,s=0,o="";s<n;){for(a=0;a<e&&s<n;++a,++s)t=r[a],o+=c[t>>4&15]+c[15&t]+c[t>>12&15]+c[t>>8&15]+c[t>>20&15]+c[t>>16&15]+c[t>>28&15]+c[t>>24&15];s%e==0&&(L(r),a=0)}return i&&(t=r[a],o+=c[t>>4&15]+c[15&t],i>1&&(o+=c[t>>12&15]+c[t>>8&15]),i>2&&(o+=c[t>>20&15]+c[t>>16&15])),o},R.prototype.arrayBuffer=function(){this.finalize();var t,e=this.blockCount,r=this.s,n=this.outputBlocks,i=this.extraBytes,a=0,s=0,o=this.outputBits>>3;t=i?new ArrayBuffer(n+1<<2):new ArrayBuffer(o);for(var l=new Uint32Array(t);s<n;){for(a=0;a<e&&s<n;++a,++s)l[s]=r[a];s%e==0&&L(r)}return i&&(l[a]=r[a],t=t.slice(0,o)),t},R.prototype.buffer=R.prototype.arrayBuffer,R.prototype.digest=R.prototype.array=function(){this.finalize();for(var t,e,r=this.blockCount,n=this.s,i=this.outputBlocks,a=this.extraBytes,s=0,o=0,l=[];o<i;){for(s=0;s<r&&o<i;++s,++o)t=o<<2,e=n[s],l[t]=255&e,l[t+1]=e>>8&255,l[t+2]=e>>16&255,l[t+3]=e>>24&255;o%r==0&&L(n)}return a&&(t=o<<2,e=n[s],l[t]=255&e,a>1&&(l[t+1]=e>>8&255),a>2&&(l[t+2]=e>>16&255)),l},B.prototype=new R,B.prototype.finalize=function(){return this.encode(this.outputBits,!0),R.prototype.finalize.call(this)};var L=function(t){var e,r,n,i,a,s,o,l,h,u,c,p,f,m,g,y,v,b,w,x,_,k,S,E,C,M,P,A,T,D,I,F,R,B,L,N,O,V,z,G,j,H,q,W,U,$,Z,Q,Y,K,J,X,tt,et,rt,nt,it,at,st,ot,lt,ht,ut;for(n=0;n<48;n+=2)i=t[0]^t[10]^t[20]^t[30]^t[40],a=t[1]^t[11]^t[21]^t[31]^t[41],s=t[2]^t[12]^t[22]^t[32]^t[42],o=t[3]^t[13]^t[23]^t[33]^t[43],l=t[4]^t[14]^t[24]^t[34]^t[44],h=t[5]^t[15]^t[25]^t[35]^t[45],u=t[6]^t[16]^t[26]^t[36]^t[46],c=t[7]^t[17]^t[27]^t[37]^t[47],e=(p=t[8]^t[18]^t[28]^t[38]^t[48])^(s<<1|o>>>31),r=(f=t[9]^t[19]^t[29]^t[39]^t[49])^(o<<1|s>>>31),t[0]^=e,t[1]^=r,t[10]^=e,t[11]^=r,t[20]^=e,t[21]^=r,t[30]^=e,t[31]^=r,t[40]^=e,t[41]^=r,e=i^(l<<1|h>>>31),r=a^(h<<1|l>>>31),t[2]^=e,t[3]^=r,t[12]^=e,t[13]^=r,t[22]^=e,t[23]^=r,t[32]^=e,t[33]^=r,t[42]^=e,t[43]^=r,e=s^(u<<1|c>>>31),r=o^(c<<1|u>>>31),t[4]^=e,t[5]^=r,t[14]^=e,t[15]^=r,t[24]^=e,t[25]^=r,t[34]^=e,t[35]^=r,t[44]^=e,t[45]^=r,e=l^(p<<1|f>>>31),r=h^(f<<1|p>>>31),t[6]^=e,t[7]^=r,t[16]^=e,t[17]^=r,t[26]^=e,t[27]^=r,t[36]^=e,t[37]^=r,t[46]^=e,t[47]^=r,e=u^(i<<1|a>>>31),r=c^(a<<1|i>>>31),t[8]^=e,t[9]^=r,t[18]^=e,t[19]^=r,t[28]^=e,t[29]^=r,t[38]^=e,t[39]^=r,t[48]^=e,t[49]^=r,m=t[0],g=t[1],$=t[11]<<4|t[10]>>>28,Z=t[10]<<4|t[11]>>>28,A=t[20]<<3|t[21]>>>29,T=t[21]<<3|t[20]>>>29,ot=t[31]<<9|t[30]>>>23,lt=t[30]<<9|t[31]>>>23,H=t[40]<<18|t[41]>>>14,q=t[41]<<18|t[40]>>>14,B=t[2]<<1|t[3]>>>31,L=t[3]<<1|t[2]>>>31,y=t[13]<<12|t[12]>>>20,v=t[12]<<12|t[13]>>>20,Q=t[22]<<10|t[23]>>>22,Y=t[23]<<10|t[22]>>>22,D=t[33]<<13|t[32]>>>19,I=t[32]<<13|t[33]>>>19,ht=t[42]<<2|t[43]>>>30,ut=t[43]<<2|t[42]>>>30,et=t[5]<<30|t[4]>>>2,rt=t[4]<<30|t[5]>>>2,N=t[14]<<6|t[15]>>>26,O=t[15]<<6|t[14]>>>26,b=t[25]<<11|t[24]>>>21,w=t[24]<<11|t[25]>>>21,K=t[34]<<15|t[35]>>>17,J=t[35]<<15|t[34]>>>17,F=t[45]<<29|t[44]>>>3,R=t[44]<<29|t[45]>>>3,E=t[6]<<28|t[7]>>>4,C=t[7]<<28|t[6]>>>4,nt=t[17]<<23|t[16]>>>9,it=t[16]<<23|t[17]>>>9,V=t[26]<<25|t[27]>>>7,z=t[27]<<25|t[26]>>>7,x=t[36]<<21|t[37]>>>11,_=t[37]<<21|t[36]>>>11,X=t[47]<<24|t[46]>>>8,tt=t[46]<<24|t[47]>>>8,W=t[8]<<27|t[9]>>>5,U=t[9]<<27|t[8]>>>5,M=t[18]<<20|t[19]>>>12,P=t[19]<<20|t[18]>>>12,at=t[29]<<7|t[28]>>>25,st=t[28]<<7|t[29]>>>25,G=t[38]<<8|t[39]>>>24,j=t[39]<<8|t[38]>>>24,k=t[48]<<14|t[49]>>>18,S=t[49]<<14|t[48]>>>18,t[0]=m^~y&b,t[1]=g^~v&w,t[10]=E^~M&A,t[11]=C^~P&T,t[20]=B^~N&V,t[21]=L^~O&z,t[30]=W^~$&Q,t[31]=U^~Z&Y,t[40]=et^~nt&at,t[41]=rt^~it&st,t[2]=y^~b&x,t[3]=v^~w&_,t[12]=M^~A&D,t[13]=P^~T&I,t[22]=N^~V&G,t[23]=O^~z&j,t[32]=$^~Q&K,t[33]=Z^~Y&J,t[42]=nt^~at&ot,t[43]=it^~st&lt,t[4]=b^~x&k,t[5]=w^~_&S,t[14]=A^~D&F,t[15]=T^~I&R,t[24]=V^~G&H,t[25]=z^~j&q,t[34]=Q^~K&X,t[35]=Y^~J&tt,t[44]=at^~ot&ht,t[45]=st^~lt&ut,t[6]=x^~k&m,t[7]=_^~S&g,t[16]=D^~F&E,t[17]=I^~R&C,t[26]=G^~H&B,t[27]=j^~q&L,t[36]=K^~X&W,t[37]=J^~tt&U,t[46]=ot^~ht&et,t[47]=lt^~ut&rt,t[8]=k^~m&y,t[9]=S^~g&v,t[18]=F^~E&M,t[19]=R^~C&P,t[28]=H^~B&N,t[29]=q^~L&O,t[38]=X^~W&$,t[39]=tt^~U&Z,t[48]=ht^~et&nt,t[49]=ut^~rt&it,t[0]^=d[n],t[1]^=d[n+1]};if(l)t.exports=C;else{for(P=0;P<M.length;++P)s[M[P]]=C[M[P]];h&&(void 0===(n=function(){return C}.call(e,r,e,t))||(t.exports=n))}}()},2307:(t,e,r)=>{t=r.nmd(t);var n="__lodash_hash_undefined__",i=9007199254740991,a="[object Arguments]",s="[object Array]",o="[object Boolean]",l="[object Date]",h="[object Error]",u="[object Function]",c="[object Map]",p="[object Number]",f="[object Object]",d="[object Promise]",m="[object RegExp]",g="[object Set]",y="[object String]",v="[object WeakMap]",b="[object ArrayBuffer]",w="[object DataView]",x=/^\[object .+?Constructor\]$/,_=/^(?:0|[1-9]\d*)$/,k={};k["[object Float32Array]"]=k["[object Float64Array]"]=k["[object Int8Array]"]=k["[object Int16Array]"]=k["[object Int32Array]"]=k["[object Uint8Array]"]=k["[object Uint8ClampedArray]"]=k["[object Uint16Array]"]=k["[object Uint32Array]"]=!0,k[a]=k[s]=k[b]=k[o]=k[w]=k[l]=k[h]=k[u]=k[c]=k[p]=k[f]=k[m]=k[g]=k[y]=k[v]=!1;var S="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g,E="object"==typeof self&&self&&self.Object===Object&&self,C=S||E||Function("return this")(),M=e&&!e.nodeType&&e,P=M&&t&&!t.nodeType&&t,A=P&&P.exports===M,T=A&&S.process,D=function(){try{return T&&T.binding&&T.binding("util")}catch(t){}}(),I=D&&D.isTypedArray;function F(t,e){for(var r=-1,n=null==t?0:t.length;++r<n;)if(e(t[r],r,t))return!0;return!1}function R(t){var e=-1,r=Array(t.size);return t.forEach((function(t,n){r[++e]=[n,t]})),r}function B(t){var e=-1,r=Array(t.size);return t.forEach((function(t){r[++e]=t})),r}var L,N,O,V=Array.prototype,z=Function.prototype,G=Object.prototype,j=C["__core-js_shared__"],H=z.toString,q=G.hasOwnProperty,W=(L=/[^.]+$/.exec(j&&j.keys&&j.keys.IE_PROTO||""))?"Symbol(src)_1."+L:"",U=G.toString,$=RegExp("^"+H.call(q).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Z=A?C.Buffer:void 0,Q=C.Symbol,Y=C.Uint8Array,K=G.propertyIsEnumerable,J=V.splice,X=Q?Q.toStringTag:void 0,tt=Object.getOwnPropertySymbols,et=Z?Z.isBuffer:void 0,rt=(N=Object.keys,O=Object,function(t){return N(O(t))}),nt=Pt(C,"DataView"),it=Pt(C,"Map"),at=Pt(C,"Promise"),st=Pt(C,"Set"),ot=Pt(C,"WeakMap"),lt=Pt(Object,"create"),ht=It(nt),ut=It(it),ct=It(at),pt=It(st),ft=It(ot),dt=Q?Q.prototype:void 0,mt=dt?dt.valueOf:void 0;function gt(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function yt(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function vt(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function bt(t){var e=-1,r=null==t?0:t.length;for(this.__data__=new vt;++e<r;)this.add(t[e])}function wt(t){var e=this.__data__=new yt(t);this.size=e.size}function xt(t,e){for(var r=t.length;r--;)if(Ft(t[r][0],e))return r;return-1}function _t(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":X&&X in Object(t)?function(t){var e=q.call(t,X),r=t[X];try{t[X]=void 0;var n=!0}catch(t){}var i=U.call(t);return n&&(e?t[X]=r:delete t[X]),i}(t):function(t){return U.call(t)}(t)}function kt(t){return zt(t)&&_t(t)==a}function St(t,e,r,n,i){return t===e||(null==t||null==e||!zt(t)&&!zt(e)?t!=t&&e!=e:function(t,e,r,n,i,u){var d=Bt(t),v=Bt(e),x=d?s:Tt(t),_=v?s:Tt(e),k=(x=x==a?f:x)==f,S=(_=_==a?f:_)==f,E=x==_;if(E&&Lt(t)){if(!Lt(e))return!1;d=!0,k=!1}if(E&&!k)return u||(u=new wt),d||Gt(t)?Et(t,e,r,n,i,u):function(t,e,r,n,i,a,s){switch(r){case w:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case b:return!(t.byteLength!=e.byteLength||!a(new Y(t),new Y(e)));case o:case l:case p:return Ft(+t,+e);case h:return t.name==e.name&&t.message==e.message;case m:case y:return t==e+"";case c:var u=R;case g:var f=1&n;if(u||(u=B),t.size!=e.size&&!f)return!1;var d=s.get(t);if(d)return d==e;n|=2,s.set(t,e);var v=Et(u(t),u(e),n,i,a,s);return s.delete(t),v;case"[object Symbol]":if(mt)return mt.call(t)==mt.call(e)}return!1}(t,e,x,r,n,i,u);if(!(1&r)){var C=k&&q.call(t,"__wrapped__"),M=S&&q.call(e,"__wrapped__");if(C||M){var P=C?t.value():t,A=M?e.value():e;return u||(u=new wt),i(P,A,r,n,u)}}return!!E&&(u||(u=new wt),function(t,e,r,n,i,a){var s=1&r,o=Ct(t),l=o.length;if(l!=Ct(e).length&&!s)return!1;for(var h=l;h--;){var u=o[h];if(!(s?u in e:q.call(e,u)))return!1}var c=a.get(t);if(c&&a.get(e))return c==e;var p=!0;a.set(t,e),a.set(e,t);for(var f=s;++h<l;){var d=t[u=o[h]],m=e[u];if(n)var g=s?n(m,d,u,e,t,a):n(d,m,u,t,e,a);if(!(void 0===g?d===m||i(d,m,r,n,a):g)){p=!1;break}f||(f="constructor"==u)}if(p&&!f){var y=t.constructor,v=e.constructor;y==v||!("constructor"in t)||!("constructor"in e)||"function"==typeof y&&y instanceof y&&"function"==typeof v&&v instanceof v||(p=!1)}return a.delete(t),a.delete(e),p}(t,e,r,n,i,u))}(t,e,r,n,St,i))}function Et(t,e,r,n,i,a){var s=1&r,o=t.length,l=e.length;if(o!=l&&!(s&&l>o))return!1;var h=a.get(t);if(h&&a.get(e))return h==e;var u=-1,c=!0,p=2&r?new bt:void 0;for(a.set(t,e),a.set(e,t);++u<o;){var f=t[u],d=e[u];if(n)var m=s?n(d,f,u,e,t,a):n(f,d,u,t,e,a);if(void 0!==m){if(m)continue;c=!1;break}if(p){if(!F(e,(function(t,e){if(s=e,!p.has(s)&&(f===t||i(f,t,r,n,a)))return p.push(e);var s}))){c=!1;break}}else if(f!==d&&!i(f,d,r,n,a)){c=!1;break}}return a.delete(t),a.delete(e),c}function Ct(t){return function(t,e,r){var n=e(t);return Bt(t)?n:function(t,e){for(var r=-1,n=e.length,i=t.length;++r<n;)t[i+r]=e[r];return t}(n,r(t))}(t,jt,At)}function Mt(t,e){var r,n,i=t.__data__;return("string"==(n=typeof(r=e))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?i["string"==typeof e?"string":"hash"]:i.map}function Pt(t,e){var r=function(t,e){return null==t?void 0:t[e]}(t,e);return function(t){return!(!Vt(t)||function(t){return!!W&&W in t}(t))&&(Nt(t)?$:x).test(It(t))}(r)?r:void 0}gt.prototype.clear=function(){this.__data__=lt?lt(null):{},this.size=0},gt.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},gt.prototype.get=function(t){var e=this.__data__;if(lt){var r=e[t];return r===n?void 0:r}return q.call(e,t)?e[t]:void 0},gt.prototype.has=function(t){var e=this.__data__;return lt?void 0!==e[t]:q.call(e,t)},gt.prototype.set=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=lt&&void 0===e?n:e,this},yt.prototype.clear=function(){this.__data__=[],this.size=0},yt.prototype.delete=function(t){var e=this.__data__,r=xt(e,t);return!(r<0||(r==e.length-1?e.pop():J.call(e,r,1),--this.size,0))},yt.prototype.get=function(t){var e=this.__data__,r=xt(e,t);return r<0?void 0:e[r][1]},yt.prototype.has=function(t){return xt(this.__data__,t)>-1},yt.prototype.set=function(t,e){var r=this.__data__,n=xt(r,t);return n<0?(++this.size,r.push([t,e])):r[n][1]=e,this},vt.prototype.clear=function(){this.size=0,this.__data__={hash:new gt,map:new(it||yt),string:new gt}},vt.prototype.delete=function(t){var e=Mt(this,t).delete(t);return this.size-=e?1:0,e},vt.prototype.get=function(t){return Mt(this,t).get(t)},vt.prototype.has=function(t){return Mt(this,t).has(t)},vt.prototype.set=function(t,e){var r=Mt(this,t),n=r.size;return r.set(t,e),this.size+=r.size==n?0:1,this},bt.prototype.add=bt.prototype.push=function(t){return this.__data__.set(t,n),this},bt.prototype.has=function(t){return this.__data__.has(t)},wt.prototype.clear=function(){this.__data__=new yt,this.size=0},wt.prototype.delete=function(t){var e=this.__data__,r=e.delete(t);return this.size=e.size,r},wt.prototype.get=function(t){return this.__data__.get(t)},wt.prototype.has=function(t){return this.__data__.has(t)},wt.prototype.set=function(t,e){var r=this.__data__;if(r instanceof yt){var n=r.__data__;if(!it||n.length<199)return n.push([t,e]),this.size=++r.size,this;r=this.__data__=new vt(n)}return r.set(t,e),this.size=r.size,this};var At=tt?function(t){return null==t?[]:(t=Object(t),function(e,r){for(var n=-1,i=null==e?0:e.length,a=0,s=[];++n<i;){var o=e[n];l=o,K.call(t,l)&&(s[a++]=o)}var l;return s}(tt(t)))}:function(){return[]},Tt=_t;function Dt(t,e){return!!(e=null==e?i:e)&&("number"==typeof t||_.test(t))&&t>-1&&t%1==0&&t<e}function It(t){if(null!=t){try{return H.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Ft(t,e){return t===e||t!=t&&e!=e}(nt&&Tt(new nt(new ArrayBuffer(1)))!=w||it&&Tt(new it)!=c||at&&Tt(at.resolve())!=d||st&&Tt(new st)!=g||ot&&Tt(new ot)!=v)&&(Tt=function(t){var e=_t(t),r=e==f?t.constructor:void 0,n=r?It(r):"";if(n)switch(n){case ht:return w;case ut:return c;case ct:return d;case pt:return g;case ft:return v}return e});var Rt=kt(function(){return arguments}())?kt:function(t){return zt(t)&&q.call(t,"callee")&&!K.call(t,"callee")},Bt=Array.isArray,Lt=et||function(){return!1};function Nt(t){if(!Vt(t))return!1;var e=_t(t);return e==u||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Ot(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=i}function Vt(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function zt(t){return null!=t&&"object"==typeof t}var Gt=I?function(t){return function(e){return t(e)}}(I):function(t){return zt(t)&&Ot(t.length)&&!!k[_t(t)]};function jt(t){return null!=(e=t)&&Ot(e.length)&&!Nt(e)?function(t,e){var r=Bt(t),n=!r&&Rt(t),i=!r&&!n&&Lt(t),a=!r&&!n&&!i&&Gt(t),s=r||n||i||a,o=s?function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}(t.length,String):[],l=o.length;for(var h in t)!e&&!q.call(t,h)||s&&("length"==h||i&&("offset"==h||"parent"==h)||a&&("buffer"==h||"byteLength"==h||"byteOffset"==h)||Dt(h,l))||o.push(h);return o}(t):function(t){if(r=(e=t)&&e.constructor,e!==("function"==typeof r&&r.prototype||G))return rt(t);var e,r,n=[];for(var i in Object(t))q.call(t,i)&&"constructor"!=i&&n.push(i);return n}(t);var e}t.exports=function(t,e){return St(t,e)}},9260:function(t,e,r){!function(t,e,r){"use strict";function n(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var i=n(e),a=n(r);function s(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function o(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?s(Object(r),!0).forEach((function(e){l(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function l(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function h(t,e){if(null==t)return{};var r,n,i=function(t,e){if(null==t)return{};var r,n,i={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(i[r]=t[r]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i}function u(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a=[],s=!0,o=!1;try{for(r=r.call(t);!(s=(n=r.next()).done)&&(a.push(n.value),!e||a.length!==e);s=!0);}catch(t){o=!0,i=t}finally{try{s||null==r.return||r.return()}finally{if(o)throw i}}return a}}(t,e)||function(t,e){if(t){if("string"==typeof t)return c(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?c(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function c(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var p=["animationData","loop","autoplay","initialSegment","onComplete","onLoopComplete","onEnterFrame","onSegmentStart","onConfigReady","onDataReady","onDataFailed","onLoadedImages","onDOMLoaded","onDestroy","lottieRef","renderer","name","assetsPath","rendererSettings"],f=function(t,e){var n=t.animationData,s=t.loop,l=t.autoplay,c=t.initialSegment,f=t.onComplete,d=t.onLoopComplete,m=t.onEnterFrame,g=t.onSegmentStart,y=t.onConfigReady,v=t.onDataReady,b=t.onDataFailed,w=t.onLoadedImages,x=t.onDOMLoaded,_=t.onDestroy;t.lottieRef,t.renderer,t.name,t.assetsPath,t.rendererSettings;var k=h(t,p),S=u(r.useState(!1),2),E=S[0],C=S[1],M=r.useRef(),P=r.useRef(null);return r.useEffect((function(){var e=function(){var e,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(P.current){null===(e=M.current)||void 0===e||e.destroy();var n=o(o(o({},t),r),{},{container:P.current});return M.current=i.default.loadAnimation(n),C(!!M.current),function(){var t;null===(t=M.current)||void 0===t||t.destroy(),M.current=void 0}}}();return function(){return null==e?void 0:e()}}),[n,s]),r.useEffect((function(){M.current&&(M.current.autoplay=!!l)}),[l]),r.useEffect((function(){M.current&&(c?Array.isArray(c)&&c.length&&((M.current.currentRawFrame<c[0]||M.current.currentRawFrame>c[1])&&(M.current.currentRawFrame=c[0]),M.current.setSegment(c[0],c[1])):M.current.resetSegments(!0))}),[c]),r.useEffect((function(){var t=[{name:"complete",handler:f},{name:"loopComplete",handler:d},{name:"enterFrame",handler:m},{name:"segmentStart",handler:g},{name:"config_ready",handler:y},{name:"data_ready",handler:v},{name:"data_failed",handler:b},{name:"loaded_images",handler:w},{name:"DOMLoaded",handler:x},{name:"destroy",handler:_}].filter((function(t){return null!=t.handler}));if(t.length){var e=t.map((function(t){var e;return null===(e=M.current)||void 0===e||e.addEventListener(t.name,t.handler),function(){var e;null===(e=M.current)||void 0===e||e.removeEventListener(t.name,t.handler)}}));return function(){e.forEach((function(t){return t()}))}}}),[f,d,m,g,y,v,b,w,x,_]),{View:a.default.createElement("div",o({style:e,ref:P},k)),play:function(){var t;null===(t=M.current)||void 0===t||t.play()},stop:function(){var t;null===(t=M.current)||void 0===t||t.stop()},pause:function(){var t;null===(t=M.current)||void 0===t||t.pause()},setSpeed:function(t){var e;null===(e=M.current)||void 0===e||e.setSpeed(t)},goToAndStop:function(t,e){var r;null===(r=M.current)||void 0===r||r.goToAndStop(t,e)},goToAndPlay:function(t,e){var r;null===(r=M.current)||void 0===r||r.goToAndPlay(t,e)},setDirection:function(t){var e;null===(e=M.current)||void 0===e||e.setDirection(t)},playSegments:function(t,e){var r;null===(r=M.current)||void 0===r||r.playSegments(t,e)},setSubframe:function(t){var e;null===(e=M.current)||void 0===e||e.setSubframe(t)},getDuration:function(t){var e;return null===(e=M.current)||void 0===e?void 0:e.getDuration(t)},destroy:function(){var t;null===(t=M.current)||void 0===t||t.destroy(),M.current=void 0},animationContainerRef:P,animationLoaded:E,animationItem:M.current}};var d=function(t){var e=t.wrapperRef,n=t.animationItem,i=t.mode,a=t.actions;r.useEffect((function(){var t,r,s,o,l,h=e.current;if(h&&n&&a.length){n.stop();switch(i){case"scroll":return o=null,l=function(){var t,e,r,i=(e=(t=h.getBoundingClientRect()).top,r=t.height,(window.innerHeight-e)/(window.innerHeight+r)),s=a.find((function(t){var e=t.visibility;return e&&i>=e[0]&&i<=e[1]}));if(s){if("seek"===s.type&&s.visibility&&2===s.frames.length){var l=s.frames[0]+Math.ceil((i-s.visibility[0])/(s.visibility[1]-s.visibility[0])*s.frames[1]);n.goToAndStop(l-n.firstFrame-1,!0)}"loop"===s.type&&(null===o||o!==s.frames||n.isPaused)&&(n.playSegments(s.frames,!0),o=s.frames),"play"===s.type&&n.isPaused&&(n.resetSegments(!0),n.play()),"stop"===s.type&&n.goToAndStop(s.frames[0]-n.firstFrame-1,!0)}},document.addEventListener("scroll",l),function(){document.removeEventListener("scroll",l)};case"cursor":return t=function(t,e){var r,i,s,o,l=t,u=e;if(-1!==l&&-1!==u){var c=(r=l,i=u,o=(s=h.getBoundingClientRect()).top,{x:(r-s.left)/s.width,y:(i-o)/s.height});l=c.x,u=c.y}var p=a.find((function(t){var e=t.position;return e&&Array.isArray(e.x)&&Array.isArray(e.y)?l>=e.x[0]&&l<=e.x[1]&&u>=e.y[0]&&u<=e.y[1]:!(!e||Number.isNaN(e.x)||Number.isNaN(e.y))&&l===e.x&&u===e.y}));if(p){if("seek"===p.type&&p.position&&Array.isArray(p.position.x)&&Array.isArray(p.position.y)&&2===p.frames.length){var f=(l-p.position.x[0])/(p.position.x[1]-p.position.x[0]),d=(u-p.position.y[0])/(p.position.y[1]-p.position.y[0]);n.playSegments(p.frames,!0),n.goToAndStop(Math.ceil((f+d)/2*(p.frames[1]-p.frames[0])),!0)}"loop"===p.type&&n.playSegments(p.frames,!0),"play"===p.type&&(n.isPaused&&n.resetSegments(!1),n.playSegments(p.frames)),"stop"===p.type&&n.goToAndStop(p.frames[0],!0)}},r=function(e){t(e.clientX,e.clientY)},s=function(){t(-1,-1)},h.addEventListener("mousemove",r),h.addEventListener("mouseout",s),function(){h.removeEventListener("mousemove",r),h.removeEventListener("mouseout",s)}}}}),[i,n])},m=function(t){var e=t.actions,r=t.mode,n=t.lottieObj,i=n.animationItem,a=n.View,s=n.animationContainerRef;return d({actions:e,animationItem:i,mode:r,wrapperRef:s}),a},g=["style","interactivity"];Object.defineProperty(t,"LottiePlayer",{enumerable:!0,get:function(){return i.default}}),t.default=function(t){var e,n,i,a=t.style,s=t.interactivity,o=h(t,g),l=f(o,a),u=l.View,c=l.play,p=l.stop,d=l.pause,y=l.setSpeed,v=l.goToAndStop,b=l.goToAndPlay,w=l.setDirection,x=l.playSegments,_=l.setSubframe,k=l.getDuration,S=l.destroy,E=l.animationContainerRef,C=l.animationLoaded,M=l.animationItem;return r.useEffect((function(){t.lottieRef&&(t.lottieRef.current={play:c,stop:p,pause:d,setSpeed:y,goToAndPlay:b,goToAndStop:v,setDirection:w,playSegments:x,setSubframe:_,getDuration:k,destroy:S,animationContainerRef:E,animationLoaded:C,animationItem:M})}),[null===(e=t.lottieRef)||void 0===e?void 0:e.current]),m({lottieObj:{View:u,play:c,stop:p,pause:d,setSpeed:y,goToAndStop:v,goToAndPlay:b,setDirection:w,playSegments:x,setSubframe:_,getDuration:k,destroy:S,animationContainerRef:E,animationLoaded:C,animationItem:M},actions:null!==(n=null==s?void 0:s.actions)&&void 0!==n?n:[],mode:null!==(i=null==s?void 0:s.mode)&&void 0!==i?i:"scroll"})},t.useLottie=f,t.useLottieInteractivity=m,Object.defineProperty(t,"__esModule",{value:!0})}(e,r(1248),r(7294))},1248:function(module,exports,__webpack_require__){var factory;"undefined"!=typeof navigator&&(factory=function(){"use strict";var svgNS="http://www.w3.org/2000/svg",locationHref="",_useWebWorker=!1,initialDefaultFrame=-999999,setWebWorker=function(t){_useWebWorker=!!t},getWebWorker=function(){return _useWebWorker},setLocationHref=function(t){locationHref=t},getLocationHref=function(){return locationHref};function createTag(t){return document.createElement(t)}function extendPrototype(t,e){var r,n,i=t.length;for(r=0;r<i;r+=1)for(var a in n=t[r].prototype)Object.prototype.hasOwnProperty.call(n,a)&&(e.prototype[a]=n[a])}function getDescriptor(t,e){return Object.getOwnPropertyDescriptor(t,e)}function createProxyFunction(t){function e(){}return e.prototype=t,e}var audioControllerFactory=function(){function t(t){this.audios=[],this.audioFactory=t,this._volume=1,this._isMuted=!1}return t.prototype={addAudio:function(t){this.audios.push(t)},pause:function(){var t,e=this.audios.length;for(t=0;t<e;t+=1)this.audios[t].pause()},resume:function(){var t,e=this.audios.length;for(t=0;t<e;t+=1)this.audios[t].resume()},setRate:function(t){var e,r=this.audios.length;for(e=0;e<r;e+=1)this.audios[e].setRate(t)},createAudio:function(t){return this.audioFactory?this.audioFactory(t):window.Howl?new window.Howl({src:[t]}):{isPlaying:!1,play:function(){this.isPlaying=!0},seek:function(){this.isPlaying=!1},playing:function(){},rate:function(){},setVolume:function(){}}},setAudioFactory:function(t){this.audioFactory=t},setVolume:function(t){this._volume=t,this._updateVolume()},mute:function(){this._isMuted=!0,this._updateVolume()},unmute:function(){this._isMuted=!1,this._updateVolume()},getVolume:function(){return this._volume},_updateVolume:function(){var t,e=this.audios.length;for(t=0;t<e;t+=1)this.audios[t].volume(this._volume*(this._isMuted?0:1))}},function(){return new t}}(),createTypedArray=function(){function t(t,e){var r,n=0,i=[];switch(t){case"int16":case"uint8c":r=1;break;default:r=1.1}for(n=0;n<e;n+=1)i.push(r);return i}return"function"==typeof Uint8ClampedArray&&"function"==typeof Float32Array?function(e,r){return"float32"===e?new Float32Array(r):"int16"===e?new Int16Array(r):"uint8c"===e?new Uint8ClampedArray(r):t(e,r)}:t}();function createSizedArray(t){return Array.apply(null,{length:t})}function _typeof$6(t){return _typeof$6="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$6(t)}var subframeEnabled=!0,expressionsPlugin=null,idPrefix$1="",isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent),_shouldRoundValues=!1,bmPow=Math.pow,bmSqrt=Math.sqrt,bmFloor=Math.floor,bmMax=Math.max,bmMin=Math.min,BMMath={};function ProjectInterface$1(){return{}}!function(){var t,e=["abs","acos","acosh","asin","asinh","atan","atanh","atan2","ceil","cbrt","expm1","clz32","cos","cosh","exp","floor","fround","hypot","imul","log","log1p","log2","log10","max","min","pow","random","round","sign","sin","sinh","sqrt","tan","tanh","trunc","E","LN10","LN2","LOG10E","LOG2E","PI","SQRT1_2","SQRT2"],r=e.length;for(t=0;t<r;t+=1)BMMath[e[t]]=Math[e[t]]}(),BMMath.random=Math.random,BMMath.abs=function(t){if("object"===_typeof$6(t)&&t.length){var e,r=createSizedArray(t.length),n=t.length;for(e=0;e<n;e+=1)r[e]=Math.abs(t[e]);return r}return Math.abs(t)};var defaultCurveSegments=150,degToRads=Math.PI/180,roundCorner=.5519;function roundValues(t){_shouldRoundValues=!!t}function bmRnd(t){return _shouldRoundValues?Math.round(t):t}function styleDiv(t){t.style.position="absolute",t.style.top=0,t.style.left=0,t.style.display="block",t.style.transformOrigin="0 0",t.style.webkitTransformOrigin="0 0",t.style.backfaceVisibility="visible",t.style.webkitBackfaceVisibility="visible",t.style.transformStyle="preserve-3d",t.style.webkitTransformStyle="preserve-3d",t.style.mozTransformStyle="preserve-3d"}function BMEnterFrameEvent(t,e,r,n){this.type=t,this.currentTime=e,this.totalTime=r,this.direction=n<0?-1:1}function BMCompleteEvent(t,e){this.type=t,this.direction=e<0?-1:1}function BMCompleteLoopEvent(t,e,r,n){this.type=t,this.currentLoop=r,this.totalLoops=e,this.direction=n<0?-1:1}function BMSegmentStartEvent(t,e,r){this.type=t,this.firstFrame=e,this.totalFrames=r}function BMDestroyEvent(t,e){this.type=t,this.target=e}function BMRenderFrameErrorEvent(t,e){this.type="renderFrameError",this.nativeError=t,this.currentTime=e}function BMConfigErrorEvent(t){this.type="configError",this.nativeError=t}function BMAnimationConfigErrorEvent(t,e){this.type=t,this.nativeError=e}var createElementID=(_count=0,function(){return idPrefix$1+"__lottie_element_"+(_count+=1)}),_count;function HSVtoRGB(t,e,r){var n,i,a,s,o,l,h,u;switch(l=r*(1-e),h=r*(1-(o=6*t-(s=Math.floor(6*t)))*e),u=r*(1-(1-o)*e),s%6){case 0:n=r,i=u,a=l;break;case 1:n=h,i=r,a=l;break;case 2:n=l,i=r,a=u;break;case 3:n=l,i=h,a=r;break;case 4:n=u,i=l,a=r;break;case 5:n=r,i=l,a=h}return[n,i,a]}function RGBtoHSV(t,e,r){var n,i=Math.max(t,e,r),a=Math.min(t,e,r),s=i-a,o=0===i?0:s/i,l=i/255;switch(i){case a:n=0;break;case t:n=e-r+s*(e<r?6:0),n/=6*s;break;case e:n=r-t+2*s,n/=6*s;break;case r:n=t-e+4*s,n/=6*s}return[n,o,l]}function addSaturationToRGB(t,e){var r=RGBtoHSV(255*t[0],255*t[1],255*t[2]);return r[1]+=e,r[1]>1?r[1]=1:r[1]<=0&&(r[1]=0),HSVtoRGB(r[0],r[1],r[2])}function addBrightnessToRGB(t,e){var r=RGBtoHSV(255*t[0],255*t[1],255*t[2]);return r[2]+=e,r[2]>1?r[2]=1:r[2]<0&&(r[2]=0),HSVtoRGB(r[0],r[1],r[2])}function addHueToRGB(t,e){var r=RGBtoHSV(255*t[0],255*t[1],255*t[2]);return r[0]+=e/360,r[0]>1?r[0]-=1:r[0]<0&&(r[0]+=1),HSVtoRGB(r[0],r[1],r[2])}var rgbToHex=function(){var t,e,r=[];for(t=0;t<256;t+=1)e=t.toString(16),r[t]=1===e.length?"0"+e:e;return function(t,e,n){return t<0&&(t=0),e<0&&(e=0),n<0&&(n=0),"#"+r[t]+r[e]+r[n]}}(),setSubframeEnabled=function(t){subframeEnabled=!!t},getSubframeEnabled=function(){return subframeEnabled},setExpressionsPlugin=function(t){expressionsPlugin=t},getExpressionsPlugin=function(){return expressionsPlugin},setDefaultCurveSegments=function(t){defaultCurveSegments=t},getDefaultCurveSegments=function(){return defaultCurveSegments},setIdPrefix=function(t){idPrefix$1=t},getIdPrefix=function(){return idPrefix$1};function createNS(t){return document.createElementNS(svgNS,t)}function _typeof$5(t){return _typeof$5="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$5(t)}var dataManager=function(){var t,e,r=1,n=[],i={onmessage:function(){},postMessage:function(e){t({data:e})}},a={postMessage:function(t){i.onmessage({data:t})}};function s(){e||(e=function(e){if(window.Worker&&window.Blob&&getWebWorker()){var r=new Blob(["var _workerSelf = self; self.onmessage = ",e.toString()],{type:"text/javascript"}),n=URL.createObjectURL(r);return new Worker(n)}return t=e,i}((function(t){if(a.dataManager||(a.dataManager=function(){function t(i,a){var s,o,l,h,u,c,p,f=i.length;for(o=0;o<f;o+=1)if("ks"in(s=i[o])&&!s.completed){if(s.completed=!0,s.tt&&(i[o-1].td=s.tt),s.hasMask){var d=s.masksProperties;for(h=d.length,l=0;l<h;l+=1)if(d[l].pt.k.i)n(d[l].pt.k);else for(c=d[l].pt.k.length,u=0;u<c;u+=1)d[l].pt.k[u].s&&n(d[l].pt.k[u].s[0]),d[l].pt.k[u].e&&n(d[l].pt.k[u].e[0])}0===s.ty?(s.layers=e(s.refId,a),t(s.layers,a)):4===s.ty?r(s.shapes):5===s.ty&&(0===(p=s).t.a.length&&p.t.p)}}function e(t,e){var r=function(t,e){for(var r=0,n=e.length;r<n;){if(e[r].id===t)return e[r];r+=1}return null}(t,e);return r?r.layers.__used?JSON.parse(JSON.stringify(r.layers)):(r.layers.__used=!0,r.layers):null}function r(t){var e,i,a;for(e=t.length-1;e>=0;e-=1)if("sh"===t[e].ty)if(t[e].ks.k.i)n(t[e].ks.k);else for(a=t[e].ks.k.length,i=0;i<a;i+=1)t[e].ks.k[i].s&&n(t[e].ks.k[i].s[0]),t[e].ks.k[i].e&&n(t[e].ks.k[i].e[0]);else"gr"===t[e].ty&&r(t[e].it)}function n(t){var e,r=t.i.length;for(e=0;e<r;e+=1)t.i[e][0]+=t.v[e][0],t.i[e][1]+=t.v[e][1],t.o[e][0]+=t.v[e][0],t.o[e][1]+=t.v[e][1]}function i(t,e){var r=e?e.split("."):[100,100,100];return t[0]>r[0]||!(r[0]>t[0])&&(t[1]>r[1]||!(r[1]>t[1])&&(t[2]>r[2]||!(r[2]>t[2])&&null))}var a,s=function(){var t=[4,4,14];function e(t){var e,r,n,i=t.length;for(e=0;e<i;e+=1)5===t[e].ty&&(void 0,n=(r=t[e]).t.d,r.t.d={k:[{s:n,t:0}]})}return function(r){if(i(t,r.v)&&(e(r.layers),r.assets)){var n,a=r.assets.length;for(n=0;n<a;n+=1)r.assets[n].layers&&e(r.assets[n].layers)}}}(),o=(a=[4,7,99],function(t){if(t.chars&&!i(a,t.v)){var e,n=t.chars.length;for(e=0;e<n;e+=1){var s=t.chars[e];s.data&&s.data.shapes&&(r(s.data.shapes),s.data.ip=0,s.data.op=99999,s.data.st=0,s.data.sr=1,s.data.ks={p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0}},t.chars[e].t||(s.data.shapes.push({ty:"no"}),s.data.shapes[0].it.push({p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0},sk:{k:0,a:0},sa:{k:0,a:0},ty:"tr"})))}}}),l=function(){var t=[5,7,15];function e(t){var e,r,n=t.length;for(e=0;e<n;e+=1)5===t[e].ty&&(r=void 0,"number"==typeof(r=t[e].t.p).a&&(r.a={a:0,k:r.a}),"number"==typeof r.p&&(r.p={a:0,k:r.p}),"number"==typeof r.r&&(r.r={a:0,k:r.r}))}return function(r){if(i(t,r.v)&&(e(r.layers),r.assets)){var n,a=r.assets.length;for(n=0;n<a;n+=1)r.assets[n].layers&&e(r.assets[n].layers)}}}(),h=function(){var t=[4,1,9];function e(t){var r,n,i,a=t.length;for(r=0;r<a;r+=1)if("gr"===t[r].ty)e(t[r].it);else if("fl"===t[r].ty||"st"===t[r].ty)if(t[r].c.k&&t[r].c.k[0].i)for(i=t[r].c.k.length,n=0;n<i;n+=1)t[r].c.k[n].s&&(t[r].c.k[n].s[0]/=255,t[r].c.k[n].s[1]/=255,t[r].c.k[n].s[2]/=255,t[r].c.k[n].s[3]/=255),t[r].c.k[n].e&&(t[r].c.k[n].e[0]/=255,t[r].c.k[n].e[1]/=255,t[r].c.k[n].e[2]/=255,t[r].c.k[n].e[3]/=255);else t[r].c.k[0]/=255,t[r].c.k[1]/=255,t[r].c.k[2]/=255,t[r].c.k[3]/=255}function r(t){var r,n=t.length;for(r=0;r<n;r+=1)4===t[r].ty&&e(t[r].shapes)}return function(e){if(i(t,e.v)&&(r(e.layers),e.assets)){var n,a=e.assets.length;for(n=0;n<a;n+=1)e.assets[n].layers&&r(e.assets[n].layers)}}}(),u=function(){var t=[4,4,18];function e(t){var r,n,i;for(r=t.length-1;r>=0;r-=1)if("sh"===t[r].ty)if(t[r].ks.k.i)t[r].ks.k.c=t[r].closed;else for(i=t[r].ks.k.length,n=0;n<i;n+=1)t[r].ks.k[n].s&&(t[r].ks.k[n].s[0].c=t[r].closed),t[r].ks.k[n].e&&(t[r].ks.k[n].e[0].c=t[r].closed);else"gr"===t[r].ty&&e(t[r].it)}function r(t){var r,n,i,a,s,o,l=t.length;for(n=0;n<l;n+=1){if((r=t[n]).hasMask){var h=r.masksProperties;for(a=h.length,i=0;i<a;i+=1)if(h[i].pt.k.i)h[i].pt.k.c=h[i].cl;else for(o=h[i].pt.k.length,s=0;s<o;s+=1)h[i].pt.k[s].s&&(h[i].pt.k[s].s[0].c=h[i].cl),h[i].pt.k[s].e&&(h[i].pt.k[s].e[0].c=h[i].cl)}4===r.ty&&e(r.shapes)}}return function(e){if(i(t,e.v)&&(r(e.layers),e.assets)){var n,a=e.assets.length;for(n=0;n<a;n+=1)e.assets[n].layers&&r(e.assets[n].layers)}}}();var c={completeData:function(r){r.__complete||(h(r),s(r),o(r),l(r),u(r),t(r.layers,r.assets),function(r,n){if(r){var i=0,a=r.length;for(i=0;i<a;i+=1)1===r[i].t&&(r[i].data.layers=e(r[i].data.refId,n),t(r[i].data.layers,n))}}(r.chars,r.assets),r.__complete=!0)}};return c.checkColors=h,c.checkChars=o,c.checkPathProperties=l,c.checkShapes=u,c.completeLayers=t,c}()),a.assetLoader||(a.assetLoader=function(){function t(t){var e=t.getResponseHeader("content-type");return e&&"json"===t.responseType&&-1!==e.indexOf("json")||t.response&&"object"===_typeof$5(t.response)?t.response:t.response&&"string"==typeof t.response?JSON.parse(t.response):t.responseText?JSON.parse(t.responseText):null}return{load:function(e,r,n,i){var a,s=new XMLHttpRequest;try{s.responseType="json"}catch(t){}s.onreadystatechange=function(){if(4===s.readyState)if(200===s.status)a=t(s),n(a);else try{a=t(s),n(a)}catch(t){i&&i(t)}};try{s.open("GET",e,!0)}catch(t){s.open("GET",r+"/"+e,!0)}s.send()}}}()),"loadAnimation"===t.data.type)a.assetLoader.load(t.data.path,t.data.fullPath,(function(e){a.dataManager.completeData(e),a.postMessage({id:t.data.id,payload:e,status:"success"})}),(function(){a.postMessage({id:t.data.id,status:"error"})}));else if("complete"===t.data.type){var e=t.data.animation;a.dataManager.completeData(e),a.postMessage({id:t.data.id,payload:e,status:"success"})}else"loadData"===t.data.type&&a.assetLoader.load(t.data.path,t.data.fullPath,(function(e){a.postMessage({id:t.data.id,payload:e,status:"success"})}),(function(){a.postMessage({id:t.data.id,status:"error"})}))})),e.onmessage=function(t){var e=t.data,r=e.id,i=n[r];n[r]=null,"success"===e.status?i.onComplete(e.payload):i.onError&&i.onError()})}function o(t,e){var i="processId_"+(r+=1);return n[i]={onComplete:t,onError:e},i}return{loadAnimation:function(t,r,n){s();var i=o(r,n);e.postMessage({type:"loadAnimation",path:t,fullPath:window.location.origin+window.location.pathname,id:i})},loadData:function(t,r,n){s();var i=o(r,n);e.postMessage({type:"loadData",path:t,fullPath:window.location.origin+window.location.pathname,id:i})},completeAnimation:function(t,r,n){s();var i=o(r,n);e.postMessage({type:"complete",animation:t,id:i})}}}(),ImagePreloader=function(){var t=function(){var t=createTag("canvas");t.width=1,t.height=1;var e=t.getContext("2d");return e.fillStyle="rgba(0,0,0,0)",e.fillRect(0,0,1,1),t}();function e(){this.loadedAssets+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function r(){this.loadedFootagesCount+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function n(t,e,r){var n="";if(t.e)n=t.p;else if(e){var i=t.p;-1!==i.indexOf("images/")&&(i=i.split("/")[1]),n=e+i}else n=r,n+=t.u?t.u:"",n+=t.p;return n}function i(t){var e=0,r=setInterval(function(){(t.getBBox().width||e>500)&&(this._imageLoaded(),clearInterval(r)),e+=1}.bind(this),50)}function a(t){var e={assetData:t},r=n(t,this.assetsPath,this.path);return dataManager.loadData(r,function(t){e.img=t,this._footageLoaded()}.bind(this),function(){e.img={},this._footageLoaded()}.bind(this)),e}function s(){this._imageLoaded=e.bind(this),this._footageLoaded=r.bind(this),this.testImageLoaded=i.bind(this),this.createFootageData=a.bind(this),this.assetsPath="",this.path="",this.totalImages=0,this.totalFootages=0,this.loadedAssets=0,this.loadedFootagesCount=0,this.imagesLoadedCb=null,this.images=[]}return s.prototype={loadAssets:function(t,e){var r;this.imagesLoadedCb=e;var n=t.length;for(r=0;r<n;r+=1)t[r].layers||(t[r].t&&"seq"!==t[r].t?3===t[r].t&&(this.totalFootages+=1,this.images.push(this.createFootageData(t[r]))):(this.totalImages+=1,this.images.push(this._createImageData(t[r]))))},setAssetsPath:function(t){this.assetsPath=t||""},setPath:function(t){this.path=t||""},loadedImages:function(){return this.totalImages===this.loadedAssets},loadedFootages:function(){return this.totalFootages===this.loadedFootagesCount},destroy:function(){this.imagesLoadedCb=null,this.images.length=0},getAsset:function(t){for(var e=0,r=this.images.length;e<r;){if(this.images[e].assetData===t)return this.images[e].img;e+=1}return null},createImgData:function(e){var r=n(e,this.assetsPath,this.path),i=createTag("img");i.crossOrigin="anonymous",i.addEventListener("load",this._imageLoaded,!1),i.addEventListener("error",function(){a.img=t,this._imageLoaded()}.bind(this),!1),i.src=r;var a={img:i,assetData:e};return a},createImageData:function(e){var r=n(e,this.assetsPath,this.path),i=createNS("image");isSafari?this.testImageLoaded(i):i.addEventListener("load",this._imageLoaded,!1),i.addEventListener("error",function(){a.img=t,this._imageLoaded()}.bind(this),!1),i.setAttributeNS("http://www.w3.org/1999/xlink","href",r),this._elementHelper.append?this._elementHelper.append(i):this._elementHelper.appendChild(i);var a={img:i,assetData:e};return a},imageLoaded:e,footageLoaded:r,setCacheType:function(t,e){"svg"===t?(this._elementHelper=e,this._createImageData=this.createImageData.bind(this)):this._createImageData=this.createImgData.bind(this)}},s}();function BaseEvent(){}BaseEvent.prototype={triggerEvent:function(t,e){if(this._cbs[t])for(var r=this._cbs[t],n=0;n<r.length;n+=1)r[n](e)},addEventListener:function(t,e){return this._cbs[t]||(this._cbs[t]=[]),this._cbs[t].push(e),function(){this.removeEventListener(t,e)}.bind(this)},removeEventListener:function(t,e){if(e){if(this._cbs[t]){for(var r=0,n=this._cbs[t].length;r<n;)this._cbs[t][r]===e&&(this._cbs[t].splice(r,1),r-=1,n-=1),r+=1;this._cbs[t].length||(this._cbs[t]=null)}}else this._cbs[t]=null}};var markerParser=function(){function t(t){for(var e,r=t.split("\r\n"),n={},i=0,a=0;a<r.length;a+=1)2===(e=r[a].split(":")).length&&(n[e[0]]=e[1].trim(),i+=1);if(0===i)throw new Error;return n}return function(e){for(var r=[],n=0;n<e.length;n+=1){var i=e[n],a={time:i.tm,duration:i.dr};try{a.payload=JSON.parse(e[n].cm)}catch(r){try{a.payload=t(e[n].cm)}catch(t){a.payload={name:e[n].cm}}}r.push(a)}return r}}(),ProjectInterface=function(){function t(t){this.compositions.push(t)}return function(){function e(t){for(var e=0,r=this.compositions.length;e<r;){if(this.compositions[e].data&&this.compositions[e].data.nm===t)return this.compositions[e].prepareFrame&&this.compositions[e].data.xt&&this.compositions[e].prepareFrame(this.currentFrame),this.compositions[e].compInterface;e+=1}return null}return e.compositions=[],e.currentFrame=0,e.registerComposition=t,e}}(),renderers={},registerRenderer=function(t,e){renderers[t]=e};function getRenderer(t){return renderers[t]}function _typeof$4(t){return _typeof$4="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$4(t)}var AnimationItem=function(){this._cbs=[],this.name="",this.path="",this.isLoaded=!1,this.currentFrame=0,this.currentRawFrame=0,this.firstFrame=0,this.totalFrames=0,this.frameRate=0,this.frameMult=0,this.playSpeed=1,this.playDirection=1,this.playCount=0,this.animationData={},this.assets=[],this.isPaused=!0,this.autoplay=!1,this.loop=!0,this.renderer=null,this.animationID=createElementID(),this.assetsPath="",this.timeCompleted=0,this.segmentPos=0,this.isSubframeEnabled=getSubframeEnabled(),this.segments=[],this._idle=!0,this._completedLoop=!1,this.projectInterface=ProjectInterface(),this.imagePreloader=new ImagePreloader,this.audioController=audioControllerFactory(),this.markers=[],this.configAnimation=this.configAnimation.bind(this),this.onSetupError=this.onSetupError.bind(this),this.onSegmentComplete=this.onSegmentComplete.bind(this),this.drawnFrameEvent=new BMEnterFrameEvent("drawnFrame",0,0,0)};extendPrototype([BaseEvent],AnimationItem),AnimationItem.prototype.setParams=function(t){(t.wrapper||t.container)&&(this.wrapper=t.wrapper||t.container);var e="svg";t.animType?e=t.animType:t.renderer&&(e=t.renderer);var r=getRenderer(e);this.renderer=new r(this,t.rendererSettings),this.imagePreloader.setCacheType(e,this.renderer.globalData.defs),this.renderer.setProjectInterface(this.projectInterface),this.animType=e,""===t.loop||null===t.loop||void 0===t.loop||!0===t.loop?this.loop=!0:!1===t.loop?this.loop=!1:this.loop=parseInt(t.loop,10),this.autoplay=!("autoplay"in t)||t.autoplay,this.name=t.name?t.name:"",this.autoloadSegments=!Object.prototype.hasOwnProperty.call(t,"autoloadSegments")||t.autoloadSegments,this.assetsPath=t.assetsPath,this.initialSegment=t.initialSegment,t.audioFactory&&this.audioController.setAudioFactory(t.audioFactory),t.animationData?this.setupAnimation(t.animationData):t.path&&(-1!==t.path.lastIndexOf("\\")?this.path=t.path.substr(0,t.path.lastIndexOf("\\")+1):this.path=t.path.substr(0,t.path.lastIndexOf("/")+1),this.fileName=t.path.substr(t.path.lastIndexOf("/")+1),this.fileName=this.fileName.substr(0,this.fileName.lastIndexOf(".json")),dataManager.loadAnimation(t.path,this.configAnimation,this.onSetupError))},AnimationItem.prototype.onSetupError=function(){this.trigger("data_failed")},AnimationItem.prototype.setupAnimation=function(t){dataManager.completeAnimation(t,this.configAnimation)},AnimationItem.prototype.setData=function(t,e){e&&"object"!==_typeof$4(e)&&(e=JSON.parse(e));var r={wrapper:t,animationData:e},n=t.attributes;r.path=n.getNamedItem("data-animation-path")?n.getNamedItem("data-animation-path").value:n.getNamedItem("data-bm-path")?n.getNamedItem("data-bm-path").value:n.getNamedItem("bm-path")?n.getNamedItem("bm-path").value:"",r.animType=n.getNamedItem("data-anim-type")?n.getNamedItem("data-anim-type").value:n.getNamedItem("data-bm-type")?n.getNamedItem("data-bm-type").value:n.getNamedItem("bm-type")?n.getNamedItem("bm-type").value:n.getNamedItem("data-bm-renderer")?n.getNamedItem("data-bm-renderer").value:n.getNamedItem("bm-renderer")?n.getNamedItem("bm-renderer").value:"canvas";var i=n.getNamedItem("data-anim-loop")?n.getNamedItem("data-anim-loop").value:n.getNamedItem("data-bm-loop")?n.getNamedItem("data-bm-loop").value:n.getNamedItem("bm-loop")?n.getNamedItem("bm-loop").value:"";"false"===i?r.loop=!1:"true"===i?r.loop=!0:""!==i&&(r.loop=parseInt(i,10));var a=n.getNamedItem("data-anim-autoplay")?n.getNamedItem("data-anim-autoplay").value:n.getNamedItem("data-bm-autoplay")?n.getNamedItem("data-bm-autoplay").value:!n.getNamedItem("bm-autoplay")||n.getNamedItem("bm-autoplay").value;r.autoplay="false"!==a,r.name=n.getNamedItem("data-name")?n.getNamedItem("data-name").value:n.getNamedItem("data-bm-name")?n.getNamedItem("data-bm-name").value:n.getNamedItem("bm-name")?n.getNamedItem("bm-name").value:"","false"===(n.getNamedItem("data-anim-prerender")?n.getNamedItem("data-anim-prerender").value:n.getNamedItem("data-bm-prerender")?n.getNamedItem("data-bm-prerender").value:n.getNamedItem("bm-prerender")?n.getNamedItem("bm-prerender").value:"")&&(r.prerender=!1),this.setParams(r)},AnimationItem.prototype.includeLayers=function(t){t.op>this.animationData.op&&(this.animationData.op=t.op,this.totalFrames=Math.floor(t.op-this.animationData.ip));var e,r,n=this.animationData.layers,i=n.length,a=t.layers,s=a.length;for(r=0;r<s;r+=1)for(e=0;e<i;){if(n[e].id===a[r].id){n[e]=a[r];break}e+=1}if((t.chars||t.fonts)&&(this.renderer.globalData.fontManager.addChars(t.chars),this.renderer.globalData.fontManager.addFonts(t.fonts,this.renderer.globalData.defs)),t.assets)for(i=t.assets.length,e=0;e<i;e+=1)this.animationData.assets.push(t.assets[e]);this.animationData.__complete=!1,dataManager.completeAnimation(this.animationData,this.onSegmentComplete)},AnimationItem.prototype.onSegmentComplete=function(t){this.animationData=t;var e=getExpressionsPlugin();e&&e.initExpressions(this),this.loadNextSegment()},AnimationItem.prototype.loadNextSegment=function(){var t=this.animationData.segments;if(!t||0===t.length||!this.autoloadSegments)return this.trigger("data_ready"),void(this.timeCompleted=this.totalFrames);var e=t.shift();this.timeCompleted=e.time*this.frameRate;var r=this.path+this.fileName+"_"+this.segmentPos+".json";this.segmentPos+=1,dataManager.loadData(r,this.includeLayers.bind(this),function(){this.trigger("data_failed")}.bind(this))},AnimationItem.prototype.loadSegments=function(){this.animationData.segments||(this.timeCompleted=this.totalFrames),this.loadNextSegment()},AnimationItem.prototype.imagesLoaded=function(){this.trigger("loaded_images"),this.checkLoaded()},AnimationItem.prototype.preloadImages=function(){this.imagePreloader.setAssetsPath(this.assetsPath),this.imagePreloader.setPath(this.path),this.imagePreloader.loadAssets(this.animationData.assets,this.imagesLoaded.bind(this))},AnimationItem.prototype.configAnimation=function(t){if(this.renderer)try{this.animationData=t,this.initialSegment?(this.totalFrames=Math.floor(this.initialSegment[1]-this.initialSegment[0]),this.firstFrame=Math.round(this.initialSegment[0])):(this.totalFrames=Math.floor(this.animationData.op-this.animationData.ip),this.firstFrame=Math.round(this.animationData.ip)),this.renderer.configAnimation(t),t.assets||(t.assets=[]),this.assets=this.animationData.assets,this.frameRate=this.animationData.fr,this.frameMult=this.animationData.fr/1e3,this.renderer.searchExtraCompositions(t.assets),this.markers=markerParser(t.markers||[]),this.trigger("config_ready"),this.preloadImages(),this.loadSegments(),this.updaFrameModifier(),this.waitForFontsLoaded(),this.isPaused&&this.audioController.pause()}catch(t){this.triggerConfigError(t)}},AnimationItem.prototype.waitForFontsLoaded=function(){this.renderer&&(this.renderer.globalData.fontManager.isLoaded?this.checkLoaded():setTimeout(this.waitForFontsLoaded.bind(this),20))},AnimationItem.prototype.checkLoaded=function(){if(!this.isLoaded&&this.renderer.globalData.fontManager.isLoaded&&(this.imagePreloader.loadedImages()||"canvas"!==this.renderer.rendererType)&&this.imagePreloader.loadedFootages()){this.isLoaded=!0;var t=getExpressionsPlugin();t&&t.initExpressions(this),this.renderer.initItems(),setTimeout(function(){this.trigger("DOMLoaded")}.bind(this),0),this.gotoFrame(),this.autoplay&&this.play()}},AnimationItem.prototype.resize=function(){this.renderer.updateContainerSize()},AnimationItem.prototype.setSubframe=function(t){this.isSubframeEnabled=!!t},AnimationItem.prototype.gotoFrame=function(){this.currentFrame=this.isSubframeEnabled?this.currentRawFrame:~~this.currentRawFrame,this.timeCompleted!==this.totalFrames&&this.currentFrame>this.timeCompleted&&(this.currentFrame=this.timeCompleted),this.trigger("enterFrame"),this.renderFrame(),this.trigger("drawnFrame")},AnimationItem.prototype.renderFrame=function(){if(!1!==this.isLoaded&&this.renderer)try{this.renderer.renderFrame(this.currentFrame+this.firstFrame)}catch(t){this.triggerRenderFrameError(t)}},AnimationItem.prototype.play=function(t){t&&this.name!==t||!0===this.isPaused&&(this.isPaused=!1,this.trigger("_pause"),this.audioController.resume(),this._idle&&(this._idle=!1,this.trigger("_active")))},AnimationItem.prototype.pause=function(t){t&&this.name!==t||!1===this.isPaused&&(this.isPaused=!0,this.trigger("_play"),this._idle=!0,this.trigger("_idle"),this.audioController.pause())},AnimationItem.prototype.togglePause=function(t){t&&this.name!==t||(!0===this.isPaused?this.play():this.pause())},AnimationItem.prototype.stop=function(t){t&&this.name!==t||(this.pause(),this.playCount=0,this._completedLoop=!1,this.setCurrentRawFrameValue(0))},AnimationItem.prototype.getMarkerData=function(t){for(var e,r=0;r<this.markers.length;r+=1)if((e=this.markers[r]).payload&&e.payload.name===t)return e;return null},AnimationItem.prototype.goToAndStop=function(t,e,r){if(!r||this.name===r){var n=Number(t);if(isNaN(n)){var i=this.getMarkerData(t);i&&this.goToAndStop(i.time,!0)}else e?this.setCurrentRawFrameValue(t):this.setCurrentRawFrameValue(t*this.frameModifier);this.pause()}},AnimationItem.prototype.goToAndPlay=function(t,e,r){if(!r||this.name===r){var n=Number(t);if(isNaN(n)){var i=this.getMarkerData(t);i&&(i.duration?this.playSegments([i.time,i.time+i.duration],!0):this.goToAndStop(i.time,!0))}else this.goToAndStop(n,e,r);this.play()}},AnimationItem.prototype.advanceTime=function(t){if(!0!==this.isPaused&&!1!==this.isLoaded){var e=this.currentRawFrame+t*this.frameModifier,r=!1;e>=this.totalFrames-1&&this.frameModifier>0?this.loop&&this.playCount!==this.loop?e>=this.totalFrames?(this.playCount+=1,this.checkSegments(e%this.totalFrames)||(this.setCurrentRawFrameValue(e%this.totalFrames),this._completedLoop=!0,this.trigger("loopComplete"))):this.setCurrentRawFrameValue(e):this.checkSegments(e>this.totalFrames?e%this.totalFrames:0)||(r=!0,e=this.totalFrames-1):e<0?this.checkSegments(e%this.totalFrames)||(!this.loop||this.playCount--<=0&&!0!==this.loop?(r=!0,e=0):(this.setCurrentRawFrameValue(this.totalFrames+e%this.totalFrames),this._completedLoop?this.trigger("loopComplete"):this._completedLoop=!0)):this.setCurrentRawFrameValue(e),r&&(this.setCurrentRawFrameValue(e),this.pause(),this.trigger("complete"))}},AnimationItem.prototype.adjustSegment=function(t,e){this.playCount=0,t[1]<t[0]?(this.frameModifier>0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(-1)),this.totalFrames=t[0]-t[1],this.timeCompleted=this.totalFrames,this.firstFrame=t[1],this.setCurrentRawFrameValue(this.totalFrames-.001-e)):t[1]>t[0]&&(this.frameModifier<0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(1)),this.totalFrames=t[1]-t[0],this.timeCompleted=this.totalFrames,this.firstFrame=t[0],this.setCurrentRawFrameValue(.001+e)),this.trigger("segmentStart")},AnimationItem.prototype.setSegment=function(t,e){var r=-1;this.isPaused&&(this.currentRawFrame+this.firstFrame<t?r=t:this.currentRawFrame+this.firstFrame>e&&(r=e-t)),this.firstFrame=t,this.totalFrames=e-t,this.timeCompleted=this.totalFrames,-1!==r&&this.goToAndStop(r,!0)},AnimationItem.prototype.playSegments=function(t,e){if(e&&(this.segments.length=0),"object"===_typeof$4(t[0])){var r,n=t.length;for(r=0;r<n;r+=1)this.segments.push(t[r])}else this.segments.push(t);this.segments.length&&e&&this.adjustSegment(this.segments.shift(),0),this.isPaused&&this.play()},AnimationItem.prototype.resetSegments=function(t){this.segments.length=0,this.segments.push([this.animationData.ip,this.animationData.op]),t&&this.checkSegments(0)},AnimationItem.prototype.checkSegments=function(t){return!!this.segments.length&&(this.adjustSegment(this.segments.shift(),t),!0)},AnimationItem.prototype.destroy=function(t){t&&this.name!==t||!this.renderer||(this.renderer.destroy(),this.imagePreloader.destroy(),this.trigger("destroy"),this._cbs=null,this.onEnterFrame=null,this.onLoopComplete=null,this.onComplete=null,this.onSegmentStart=null,this.onDestroy=null,this.renderer=null,this.renderer=null,this.imagePreloader=null,this.projectInterface=null)},AnimationItem.prototype.setCurrentRawFrameValue=function(t){this.currentRawFrame=t,this.gotoFrame()},AnimationItem.prototype.setSpeed=function(t){this.playSpeed=t,this.updaFrameModifier()},AnimationItem.prototype.setDirection=function(t){this.playDirection=t<0?-1:1,this.updaFrameModifier()},AnimationItem.prototype.setVolume=function(t,e){e&&this.name!==e||this.audioController.setVolume(t)},AnimationItem.prototype.getVolume=function(){return this.audioController.getVolume()},AnimationItem.prototype.mute=function(t){t&&this.name!==t||this.audioController.mute()},AnimationItem.prototype.unmute=function(t){t&&this.name!==t||this.audioController.unmute()},AnimationItem.prototype.updaFrameModifier=function(){this.frameModifier=this.frameMult*this.playSpeed*this.playDirection,this.audioController.setRate(this.playSpeed*this.playDirection)},AnimationItem.prototype.getPath=function(){return this.path},AnimationItem.prototype.getAssetsPath=function(t){var e="";if(t.e)e=t.p;else if(this.assetsPath){var r=t.p;-1!==r.indexOf("images/")&&(r=r.split("/")[1]),e=this.assetsPath+r}else e=this.path,e+=t.u?t.u:"",e+=t.p;return e},AnimationItem.prototype.getAssetData=function(t){for(var e=0,r=this.assets.length;e<r;){if(t===this.assets[e].id)return this.assets[e];e+=1}return null},AnimationItem.prototype.hide=function(){this.renderer.hide()},AnimationItem.prototype.show=function(){this.renderer.show()},AnimationItem.prototype.getDuration=function(t){return t?this.totalFrames:this.totalFrames/this.frameRate},AnimationItem.prototype.updateDocumentData=function(t,e,r){try{this.renderer.getElementByPath(t).updateDocumentData(e,r)}catch(t){}},AnimationItem.prototype.trigger=function(t){if(this._cbs&&this._cbs[t])switch(t){case"enterFrame":this.triggerEvent(t,new BMEnterFrameEvent(t,this.currentFrame,this.totalFrames,this.frameModifier));break;case"drawnFrame":this.drawnFrameEvent.currentTime=this.currentFrame,this.drawnFrameEvent.totalTime=this.totalFrames,this.drawnFrameEvent.direction=this.frameModifier,this.triggerEvent(t,this.drawnFrameEvent);break;case"loopComplete":this.triggerEvent(t,new BMCompleteLoopEvent(t,this.loop,this.playCount,this.frameMult));break;case"complete":this.triggerEvent(t,new BMCompleteEvent(t,this.frameMult));break;case"segmentStart":this.triggerEvent(t,new BMSegmentStartEvent(t,this.firstFrame,this.totalFrames));break;case"destroy":this.triggerEvent(t,new BMDestroyEvent(t,this));break;default:this.triggerEvent(t)}"enterFrame"===t&&this.onEnterFrame&&this.onEnterFrame.call(this,new BMEnterFrameEvent(t,this.currentFrame,this.totalFrames,this.frameMult)),"loopComplete"===t&&this.onLoopComplete&&this.onLoopComplete.call(this,new BMCompleteLoopEvent(t,this.loop,this.playCount,this.frameMult)),"complete"===t&&this.onComplete&&this.onComplete.call(this,new BMCompleteEvent(t,this.frameMult)),"segmentStart"===t&&this.onSegmentStart&&this.onSegmentStart.call(this,new BMSegmentStartEvent(t,this.firstFrame,this.totalFrames)),"destroy"===t&&this.onDestroy&&this.onDestroy.call(this,new BMDestroyEvent(t,this))},AnimationItem.prototype.triggerRenderFrameError=function(t){var e=new BMRenderFrameErrorEvent(t,this.currentFrame);this.triggerEvent("error",e),this.onError&&this.onError.call(this,e)},AnimationItem.prototype.triggerConfigError=function(t){var e=new BMConfigErrorEvent(t,this.currentFrame);this.triggerEvent("error",e),this.onError&&this.onError.call(this,e)};var animationManager=function(){var t={},e=[],r=0,n=0,i=0,a=!0,s=!1;function o(t){for(var r=0,i=t.target;r<n;)e[r].animation===i&&(e.splice(r,1),r-=1,n-=1,i.isPaused||u()),r+=1}function l(t,r){if(!t)return null;for(var i=0;i<n;){if(e[i].elem===t&&null!==e[i].elem)return e[i].animation;i+=1}var a=new AnimationItem;return c(a,t),a.setData(t,r),a}function h(){i+=1,d()}function u(){i-=1}function c(t,r){t.addEventListener("destroy",o),t.addEventListener("_active",h),t.addEventListener("_idle",u),e.push({elem:r,animation:t}),n+=1}function p(t){var o,l=t-r;for(o=0;o<n;o+=1)e[o].animation.advanceTime(l);r=t,i&&!s?window.requestAnimationFrame(p):a=!0}function f(t){r=t,window.requestAnimationFrame(p)}function d(){!s&&i&&a&&(window.requestAnimationFrame(f),a=!1)}return t.registerAnimation=l,t.loadAnimation=function(t){var e=new AnimationItem;return c(e,null),e.setParams(t),e},t.setSpeed=function(t,r){var i;for(i=0;i<n;i+=1)e[i].animation.setSpeed(t,r)},t.setDirection=function(t,r){var i;for(i=0;i<n;i+=1)e[i].animation.setDirection(t,r)},t.play=function(t){var r;for(r=0;r<n;r+=1)e[r].animation.play(t)},t.pause=function(t){var r;for(r=0;r<n;r+=1)e[r].animation.pause(t)},t.stop=function(t){var r;for(r=0;r<n;r+=1)e[r].animation.stop(t)},t.togglePause=function(t){var r;for(r=0;r<n;r+=1)e[r].animation.togglePause(t)},t.searchAnimations=function(t,e,r){var n,i=[].concat([].slice.call(document.getElementsByClassName("lottie")),[].slice.call(document.getElementsByClassName("bodymovin"))),a=i.length;for(n=0;n<a;n+=1)r&&i[n].setAttribute("data-bm-type",r),l(i[n],t);if(e&&0===a){r||(r="svg");var s=document.getElementsByTagName("body")[0];s.innerText="";var o=createTag("div");o.style.width="100%",o.style.height="100%",o.setAttribute("data-bm-type",r),s.appendChild(o),l(o,t)}},t.resize=function(){var t;for(t=0;t<n;t+=1)e[t].animation.resize()},t.goToAndStop=function(t,r,i){var a;for(a=0;a<n;a+=1)e[a].animation.goToAndStop(t,r,i)},t.destroy=function(t){var r;for(r=n-1;r>=0;r-=1)e[r].animation.destroy(t)},t.freeze=function(){s=!0},t.unfreeze=function(){s=!1,d()},t.setVolume=function(t,r){var i;for(i=0;i<n;i+=1)e[i].animation.setVolume(t,r)},t.mute=function(t){var r;for(r=0;r<n;r+=1)e[r].animation.mute(t)},t.unmute=function(t){var r;for(r=0;r<n;r+=1)e[r].animation.unmute(t)},t.getRegisteredAnimations=function(){var t,r=e.length,n=[];for(t=0;t<r;t+=1)n.push(e[t].animation);return n},t}(),BezierFactory=function(){var t={getBezierEasing:function(t,r,n,i,a){var s=a||("bez_"+t+"_"+r+"_"+n+"_"+i).replace(/\./g,"p");if(e[s])return e[s];var o=new h([t,r,n,i]);return e[s]=o,o}},e={},r=.1,n="function"==typeof Float32Array;function i(t,e){return 1-3*e+3*t}function a(t,e){return 3*e-6*t}function s(t){return 3*t}function o(t,e,r){return((i(e,r)*t+a(e,r))*t+s(e))*t}function l(t,e,r){return 3*i(e,r)*t*t+2*a(e,r)*t+s(e)}function h(t){this._p=t,this._mSampleValues=n?new Float32Array(11):new Array(11),this._precomputed=!1,this.get=this.get.bind(this)}return h.prototype={get:function(t){var e=this._p[0],r=this._p[1],n=this._p[2],i=this._p[3];return this._precomputed||this._precompute(),e===r&&n===i?t:0===t?0:1===t?1:o(this._getTForX(t),r,i)},_precompute:function(){var t=this._p[0],e=this._p[1],r=this._p[2],n=this._p[3];this._precomputed=!0,t===e&&r===n||this._calcSampleValues()},_calcSampleValues:function(){for(var t=this._p[0],e=this._p[2],n=0;n<11;++n)this._mSampleValues[n]=o(n*r,t,e)},_getTForX:function(t){for(var e=this._p[0],n=this._p[2],i=this._mSampleValues,a=0,s=1;10!==s&&i[s]<=t;++s)a+=r;var h=a+(t-i[--s])/(i[s+1]-i[s])*r,u=l(h,e,n);return u>=.001?function(t,e,r,n){for(var i=0;i<4;++i){var a=l(e,r,n);if(0===a)return e;e-=(o(e,r,n)-t)/a}return e}(t,h,e,n):0===u?h:function(t,e,r,n,i){var a,s,l=0;do{(a=o(s=e+(r-e)/2,n,i)-t)>0?r=s:e=s}while(Math.abs(a)>1e-7&&++l<10);return s}(t,a,a+r,e,n)}},t}(),pooling={double:function(t){return t.concat(createSizedArray(t.length))}},poolFactory=function(t,e,r){var n=0,i=t,a=createSizedArray(i);return{newElement:function(){return n?a[n-=1]:e()},release:function(t){n===i&&(a=pooling.double(a),i*=2),r&&r(t),a[n]=t,n+=1}}},bezierLengthPool=poolFactory(8,(function(){return{addedLength:0,percents:createTypedArray("float32",getDefaultCurveSegments()),lengths:createTypedArray("float32",getDefaultCurveSegments())}})),segmentsLengthPool=poolFactory(8,(function(){return{lengths:[],totalLength:0}}),(function(t){var e,r=t.lengths.length;for(e=0;e<r;e+=1)bezierLengthPool.release(t.lengths[e]);t.lengths.length=0}));function bezFunction(){var t=Math;function e(t,e,r,n,i,a){var s=t*n+e*i+r*a-i*n-a*t-r*e;return s>-.001&&s<.001}var r=function(t,e,r,n){var i,a,s,o,l,h,u=getDefaultCurveSegments(),c=0,p=[],f=[],d=bezierLengthPool.newElement();for(s=r.length,i=0;i<u;i+=1){for(l=i/(u-1),h=0,a=0;a<s;a+=1)o=bmPow(1-l,3)*t[a]+3*bmPow(1-l,2)*l*r[a]+3*(1-l)*bmPow(l,2)*n[a]+bmPow(l,3)*e[a],p[a]=o,null!==f[a]&&(h+=bmPow(p[a]-f[a],2)),f[a]=p[a];h&&(c+=h=bmSqrt(h)),d.percents[i]=l,d.lengths[i]=c}return d.addedLength=c,d};function n(t){this.segmentLength=0,this.points=new Array(t)}function i(t,e){this.partialLength=t,this.point=e}var a,s=(a={},function(t,r,s,o){var l=(t[0]+"_"+t[1]+"_"+r[0]+"_"+r[1]+"_"+s[0]+"_"+s[1]+"_"+o[0]+"_"+o[1]).replace(/\./g,"p");if(!a[l]){var h,u,c,p,f,d,m,g=getDefaultCurveSegments(),y=0,v=null;2===t.length&&(t[0]!==r[0]||t[1]!==r[1])&&e(t[0],t[1],r[0],r[1],t[0]+s[0],t[1]+s[1])&&e(t[0],t[1],r[0],r[1],r[0]+o[0],r[1]+o[1])&&(g=2);var b=new n(g);for(c=s.length,h=0;h<g;h+=1){for(m=createSizedArray(c),f=h/(g-1),d=0,u=0;u<c;u+=1)p=bmPow(1-f,3)*t[u]+3*bmPow(1-f,2)*f*(t[u]+s[u])+3*(1-f)*bmPow(f,2)*(r[u]+o[u])+bmPow(f,3)*r[u],m[u]=p,null!==v&&(d+=bmPow(m[u]-v[u],2));y+=d=bmSqrt(d),b.points[h]=new i(d,m),v=m}b.segmentLength=y,a[l]=b}return a[l]});function o(t,e){var r=e.percents,n=e.lengths,i=r.length,a=bmFloor((i-1)*t),s=t*e.addedLength,o=0;if(a===i-1||0===a||s===n[a])return r[a];for(var l=n[a]>s?-1:1,h=!0;h;)if(n[a]<=s&&n[a+1]>s?(o=(s-n[a])/(n[a+1]-n[a]),h=!1):a+=l,a<0||a>=i-1){if(a===i-1)return r[a];h=!1}return r[a]+(r[a+1]-r[a])*o}var l=createTypedArray("float32",8);return{getSegmentsLength:function(t){var e,n=segmentsLengthPool.newElement(),i=t.c,a=t.v,s=t.o,o=t.i,l=t._length,h=n.lengths,u=0;for(e=0;e<l-1;e+=1)h[e]=r(a[e],a[e+1],s[e],o[e+1]),u+=h[e].addedLength;return i&&l&&(h[e]=r(a[e],a[0],s[e],o[0]),u+=h[e].addedLength),n.totalLength=u,n},getNewSegment:function(e,r,n,i,a,s,h){a<0?a=0:a>1&&(a=1);var u,c=o(a,h),p=o(s=s>1?1:s,h),f=e.length,d=1-c,m=1-p,g=d*d*d,y=c*d*d*3,v=c*c*d*3,b=c*c*c,w=d*d*m,x=c*d*m+d*c*m+d*d*p,_=c*c*m+d*c*p+c*d*p,k=c*c*p,S=d*m*m,E=c*m*m+d*p*m+d*m*p,C=c*p*m+d*p*p+c*m*p,M=c*p*p,P=m*m*m,A=p*m*m+m*p*m+m*m*p,T=p*p*m+m*p*p+p*m*p,D=p*p*p;for(u=0;u<f;u+=1)l[4*u]=t.round(1e3*(g*e[u]+y*n[u]+v*i[u]+b*r[u]))/1e3,l[4*u+1]=t.round(1e3*(w*e[u]+x*n[u]+_*i[u]+k*r[u]))/1e3,l[4*u+2]=t.round(1e3*(S*e[u]+E*n[u]+C*i[u]+M*r[u]))/1e3,l[4*u+3]=t.round(1e3*(P*e[u]+A*n[u]+T*i[u]+D*r[u]))/1e3;return l},getPointInSegment:function(e,r,n,i,a,s){var l=o(a,s),h=1-l;return[t.round(1e3*(h*h*h*e[0]+(l*h*h+h*l*h+h*h*l)*n[0]+(l*l*h+h*l*l+l*h*l)*i[0]+l*l*l*r[0]))/1e3,t.round(1e3*(h*h*h*e[1]+(l*h*h+h*l*h+h*h*l)*n[1]+(l*l*h+h*l*l+l*h*l)*i[1]+l*l*l*r[1]))/1e3]},buildBezierData:s,pointOnLine2D:e,pointOnLine3D:function(r,n,i,a,s,o,l,h,u){if(0===i&&0===o&&0===u)return e(r,n,a,s,l,h);var c,p=t.sqrt(t.pow(a-r,2)+t.pow(s-n,2)+t.pow(o-i,2)),f=t.sqrt(t.pow(l-r,2)+t.pow(h-n,2)+t.pow(u-i,2)),d=t.sqrt(t.pow(l-a,2)+t.pow(h-s,2)+t.pow(u-o,2));return(c=p>f?p>d?p-f-d:d-f-p:d>f?d-f-p:f-p-d)>-1e-4&&c<1e-4}}}var bez=bezFunction(),PropertyFactory=function(){var t=initialDefaultFrame,e=Math.abs;function r(t,e){var r,i=this.offsetTime;"multidimensional"===this.propType&&(r=createTypedArray("float32",this.pv.length));for(var a,s,o,l,h,u,c,p,f,d=e.lastIndex,m=d,g=this.keyframes.length-1,y=!0;y;){if(a=this.keyframes[m],s=this.keyframes[m+1],m===g-1&&t>=s.t-i){a.h&&(a=s),d=0;break}if(s.t-i>t){d=m;break}m<g-1?m+=1:(d=0,y=!1)}o=this.keyframesMetadata[m]||{};var v,b,w,x,_,k,S,E,C,M,P=s.t-i,A=a.t-i;if(a.to){o.bezierData||(o.bezierData=bez.buildBezierData(a.s,s.s||a.e,a.to,a.ti));var T=o.bezierData;if(t>=P||t<A){var D=t>=P?T.points.length-1:0;for(h=T.points[D].point.length,l=0;l<h;l+=1)r[l]=T.points[D].point[l]}else{o.__fnct?f=o.__fnct:(f=BezierFactory.getBezierEasing(a.o.x,a.o.y,a.i.x,a.i.y,a.n).get,o.__fnct=f),u=f((t-A)/(P-A));var I,F=T.segmentLength*u,R=e.lastFrame<t&&e._lastKeyframeIndex===m?e._lastAddedLength:0;for(p=e.lastFrame<t&&e._lastKeyframeIndex===m?e._lastPoint:0,y=!0,c=T.points.length;y;){if(R+=T.points[p].partialLength,0===F||0===u||p===T.points.length-1){for(h=T.points[p].point.length,l=0;l<h;l+=1)r[l]=T.points[p].point[l];break}if(F>=R&&F<R+T.points[p+1].partialLength){for(I=(F-R)/T.points[p+1].partialLength,h=T.points[p].point.length,l=0;l<h;l+=1)r[l]=T.points[p].point[l]+(T.points[p+1].point[l]-T.points[p].point[l])*I;break}p<c-1?p+=1:y=!1}e._lastPoint=p,e._lastAddedLength=R-T.points[p].partialLength,e._lastKeyframeIndex=m}}else{var B,L,N,O,V;if(g=a.s.length,v=s.s||a.e,this.sh&&1!==a.h)if(t>=P)r[0]=v[0],r[1]=v[1],r[2]=v[2];else if(t<=A)r[0]=a.s[0],r[1]=a.s[1],r[2]=a.s[2];else{b=r,w=function(t,e,r){var n,i,a,s,o,l=[],h=t[0],u=t[1],c=t[2],p=t[3],f=e[0],d=e[1],m=e[2],g=e[3];return(i=h*f+u*d+c*m+p*g)<0&&(i=-i,f=-f,d=-d,m=-m,g=-g),1-i>1e-6?(n=Math.acos(i),a=Math.sin(n),s=Math.sin((1-r)*n)/a,o=Math.sin(r*n)/a):(s=1-r,o=r),l[0]=s*h+o*f,l[1]=s*u+o*d,l[2]=s*c+o*m,l[3]=s*p+o*g,l}(n(a.s),n(v),(t-A)/(P-A)),x=w[0],_=w[1],k=w[2],S=w[3],E=Math.atan2(2*_*S-2*x*k,1-2*_*_-2*k*k),C=Math.asin(2*x*_+2*k*S),M=Math.atan2(2*x*S-2*_*k,1-2*x*x-2*k*k),b[0]=E/degToRads,b[1]=C/degToRads,b[2]=M/degToRads}else for(m=0;m<g;m+=1)1!==a.h&&(t>=P?u=1:t<A?u=0:(a.o.x.constructor===Array?(o.__fnct||(o.__fnct=[]),o.__fnct[m]?f=o.__fnct[m]:(B=void 0===a.o.x[m]?a.o.x[0]:a.o.x[m],L=void 0===a.o.y[m]?a.o.y[0]:a.o.y[m],N=void 0===a.i.x[m]?a.i.x[0]:a.i.x[m],O=void 0===a.i.y[m]?a.i.y[0]:a.i.y[m],f=BezierFactory.getBezierEasing(B,L,N,O).get,o.__fnct[m]=f)):o.__fnct?f=o.__fnct:(B=a.o.x,L=a.o.y,N=a.i.x,O=a.i.y,f=BezierFactory.getBezierEasing(B,L,N,O).get,a.keyframeMetadata=f),u=f((t-A)/(P-A)))),v=s.s||a.e,V=1===a.h?a.s[m]:a.s[m]+(v[m]-a.s[m])*u,"multidimensional"===this.propType?r[m]=V:r=V}return e.lastIndex=d,r}function n(t){var e=t[0]*degToRads,r=t[1]*degToRads,n=t[2]*degToRads,i=Math.cos(e/2),a=Math.cos(r/2),s=Math.cos(n/2),o=Math.sin(e/2),l=Math.sin(r/2),h=Math.sin(n/2);return[o*l*s+i*a*h,o*a*s+i*l*h,i*l*s-o*a*h,i*a*s-o*l*h]}function i(){var e=this.comp.renderedFrame-this.offsetTime,r=this.keyframes[0].t-this.offsetTime,n=this.keyframes[this.keyframes.length-1].t-this.offsetTime;if(!(e===this._caching.lastFrame||this._caching.lastFrame!==t&&(this._caching.lastFrame>=n&&e>=n||this._caching.lastFrame<r&&e<r))){this._caching.lastFrame>=e&&(this._caching._lastKeyframeIndex=-1,this._caching.lastIndex=0);var i=this.interpolateValue(e,this._caching);this.pv=i}return this._caching.lastFrame=e,this.pv}function a(t){var r;if("unidimensional"===this.propType)r=t*this.mult,e(this.v-r)>1e-5&&(this.v=r,this._mdf=!0);else for(var n=0,i=this.v.length;n<i;)r=t[n]*this.mult,e(this.v[n]-r)>1e-5&&(this.v[n]=r,this._mdf=!0),n+=1}function s(){if(this.elem.globalData.frameId!==this.frameId&&this.effectsSequence.length)if(this.lock)this.setVValue(this.pv);else{var t;this.lock=!0,this._mdf=this._isFirstFrame;var e=this.effectsSequence.length,r=this.kf?this.pv:this.data.k;for(t=0;t<e;t+=1)r=this.effectsSequence[t](r);this.setVValue(r),this._isFirstFrame=!1,this.lock=!1,this.frameId=this.elem.globalData.frameId}}function o(t){this.effectsSequence.push(t),this.container.addDynamicProperty(this)}function l(t,e,r,n){this.propType="unidimensional",this.mult=r||1,this.data=e,this.v=r?e.k*r:e.k,this.pv=e.k,this._mdf=!1,this.elem=t,this.container=n,this.comp=t.comp,this.k=!1,this.kf=!1,this.vel=0,this.effectsSequence=[],this._isFirstFrame=!0,this.getValue=s,this.setVValue=a,this.addEffect=o}function h(t,e,r,n){var i;this.propType="multidimensional",this.mult=r||1,this.data=e,this._mdf=!1,this.elem=t,this.container=n,this.comp=t.comp,this.k=!1,this.kf=!1,this.frameId=-1;var l=e.k.length;for(this.v=createTypedArray("float32",l),this.pv=createTypedArray("float32",l),this.vel=createTypedArray("float32",l),i=0;i<l;i+=1)this.v[i]=e.k[i]*this.mult,this.pv[i]=e.k[i];this._isFirstFrame=!0,this.effectsSequence=[],this.getValue=s,this.setVValue=a,this.addEffect=o}function u(e,n,l,h){this.propType="unidimensional",this.keyframes=n.k,this.keyframesMetadata=[],this.offsetTime=e.data.st,this.frameId=-1,this._caching={lastFrame:t,lastIndex:0,value:0,_lastKeyframeIndex:-1},this.k=!0,this.kf=!0,this.data=n,this.mult=l||1,this.elem=e,this.container=h,this.comp=e.comp,this.v=t,this.pv=t,this._isFirstFrame=!0,this.getValue=s,this.setVValue=a,this.interpolateValue=r,this.effectsSequence=[i.bind(this)],this.addEffect=o}function c(e,n,l,h){var u;this.propType="multidimensional";var c,p,f,d,m=n.k.length;for(u=0;u<m-1;u+=1)n.k[u].to&&n.k[u].s&&n.k[u+1]&&n.k[u+1].s&&(c=n.k[u].s,p=n.k[u+1].s,f=n.k[u].to,d=n.k[u].ti,(2===c.length&&(c[0]!==p[0]||c[1]!==p[1])&&bez.pointOnLine2D(c[0],c[1],p[0],p[1],c[0]+f[0],c[1]+f[1])&&bez.pointOnLine2D(c[0],c[1],p[0],p[1],p[0]+d[0],p[1]+d[1])||3===c.length&&(c[0]!==p[0]||c[1]!==p[1]||c[2]!==p[2])&&bez.pointOnLine3D(c[0],c[1],c[2],p[0],p[1],p[2],c[0]+f[0],c[1]+f[1],c[2]+f[2])&&bez.pointOnLine3D(c[0],c[1],c[2],p[0],p[1],p[2],p[0]+d[0],p[1]+d[1],p[2]+d[2]))&&(n.k[u].to=null,n.k[u].ti=null),c[0]===p[0]&&c[1]===p[1]&&0===f[0]&&0===f[1]&&0===d[0]&&0===d[1]&&(2===c.length||c[2]===p[2]&&0===f[2]&&0===d[2])&&(n.k[u].to=null,n.k[u].ti=null));this.effectsSequence=[i.bind(this)],this.data=n,this.keyframes=n.k,this.keyframesMetadata=[],this.offsetTime=e.data.st,this.k=!0,this.kf=!0,this._isFirstFrame=!0,this.mult=l||1,this.elem=e,this.container=h,this.comp=e.comp,this.getValue=s,this.setVValue=a,this.interpolateValue=r,this.frameId=-1;var g=n.k[0].s.length;for(this.v=createTypedArray("float32",g),this.pv=createTypedArray("float32",g),u=0;u<g;u+=1)this.v[u]=t,this.pv[u]=t;this._caching={lastFrame:t,lastIndex:0,value:createTypedArray("float32",g)},this.addEffect=o}return{getProp:function(t,e,r,n,i){var a;if(e.k.length)if("number"==typeof e.k[0])a=new h(t,e,n,i);else switch(r){case 0:a=new u(t,e,n,i);break;case 1:a=new c(t,e,n,i)}else a=new l(t,e,n,i);return a.effectsSequence.length&&i.addDynamicProperty(a),a}}}();function DynamicPropertyContainer(){}DynamicPropertyContainer.prototype={addDynamicProperty:function(t){-1===this.dynamicProperties.indexOf(t)&&(this.dynamicProperties.push(t),this.container.addDynamicProperty(this),this._isAnimated=!0)},iterateDynamicProperties:function(){var t;this._mdf=!1;var e=this.dynamicProperties.length;for(t=0;t<e;t+=1)this.dynamicProperties[t].getValue(),this.dynamicProperties[t]._mdf&&(this._mdf=!0)},initDynamicPropertyContainer:function(t){this.container=t,this.dynamicProperties=[],this._mdf=!1,this._isAnimated=!1}};var pointPool=poolFactory(8,(function(){return createTypedArray("float32",2)}));function ShapePath(){this.c=!1,this._length=0,this._maxLength=8,this.v=createSizedArray(this._maxLength),this.o=createSizedArray(this._maxLength),this.i=createSizedArray(this._maxLength)}ShapePath.prototype.setPathData=function(t,e){this.c=t,this.setLength(e);for(var r=0;r<e;)this.v[r]=pointPool.newElement(),this.o[r]=pointPool.newElement(),this.i[r]=pointPool.newElement(),r+=1},ShapePath.prototype.setLength=function(t){for(;this._maxLength<t;)this.doubleArrayLength();this._length=t},ShapePath.prototype.doubleArrayLength=function(){this.v=this.v.concat(createSizedArray(this._maxLength)),this.i=this.i.concat(createSizedArray(this._maxLength)),this.o=this.o.concat(createSizedArray(this._maxLength)),this._maxLength*=2},ShapePath.prototype.setXYAt=function(t,e,r,n,i){var a;switch(this._length=Math.max(this._length,n+1),this._length>=this._maxLength&&this.doubleArrayLength(),r){case"v":a=this.v;break;case"i":a=this.i;break;case"o":a=this.o;break;default:a=[]}(!a[n]||a[n]&&!i)&&(a[n]=pointPool.newElement()),a[n][0]=t,a[n][1]=e},ShapePath.prototype.setTripleAt=function(t,e,r,n,i,a,s,o){this.setXYAt(t,e,"v",s,o),this.setXYAt(r,n,"o",s,o),this.setXYAt(i,a,"i",s,o)},ShapePath.prototype.reverse=function(){var t=new ShapePath;t.setPathData(this.c,this._length);var e=this.v,r=this.o,n=this.i,i=0;this.c&&(t.setTripleAt(e[0][0],e[0][1],n[0][0],n[0][1],r[0][0],r[0][1],0,!1),i=1);var a,s=this._length-1,o=this._length;for(a=i;a<o;a+=1)t.setTripleAt(e[s][0],e[s][1],n[s][0],n[s][1],r[s][0],r[s][1],a,!1),s-=1;return t};var shapePool=(factory=poolFactory(4,(function(){return new ShapePath}),(function(t){var e,r=t._length;for(e=0;e<r;e+=1)pointPool.release(t.v[e]),pointPool.release(t.i[e]),pointPool.release(t.o[e]),t.v[e]=null,t.i[e]=null,t.o[e]=null;t._length=0,t.c=!1})),factory.clone=function(t){var e,r=factory.newElement(),n=void 0===t._length?t.v.length:t._length;for(r.setLength(n),r.c=t.c,e=0;e<n;e+=1)r.setTripleAt(t.v[e][0],t.v[e][1],t.o[e][0],t.o[e][1],t.i[e][0],t.i[e][1],e);return r},factory),factory;function ShapeCollection(){this._length=0,this._maxLength=4,this.shapes=createSizedArray(this._maxLength)}ShapeCollection.prototype.addShape=function(t){this._length===this._maxLength&&(this.shapes=this.shapes.concat(createSizedArray(this._maxLength)),this._maxLength*=2),this.shapes[this._length]=t,this._length+=1},ShapeCollection.prototype.releaseShapes=function(){var t;for(t=0;t<this._length;t+=1)shapePool.release(this.shapes[t]);this._length=0};var shapeCollectionPool=(ob={newShapeCollection:function(){return _length?pool[_length-=1]:new ShapeCollection},release:function(t){var e,r=t._length;for(e=0;e<r;e+=1)shapePool.release(t.shapes[e]);t._length=0,_length===_maxLength&&(pool=pooling.double(pool),_maxLength*=2),pool[_length]=t,_length+=1}},_length=0,_maxLength=4,pool=createSizedArray(_maxLength),ob),ob,_length,_maxLength,pool,ShapePropertyFactory=function(){var t=-999999;function e(t,e,r){var n,i,a,s,o,l,h,u,c,p=r.lastIndex,f=this.keyframes;if(t<f[0].t-this.offsetTime)n=f[0].s[0],a=!0,p=0;else if(t>=f[f.length-1].t-this.offsetTime)n=f[f.length-1].s?f[f.length-1].s[0]:f[f.length-2].e[0],a=!0;else{for(var d,m,g,y=p,v=f.length-1,b=!0;b&&(d=f[y],!((m=f[y+1]).t-this.offsetTime>t));)y<v-1?y+=1:b=!1;if(g=this.keyframesMetadata[y]||{},p=y,!(a=1===d.h)){if(t>=m.t-this.offsetTime)u=1;else if(t<d.t-this.offsetTime)u=0;else{var w;g.__fnct?w=g.__fnct:(w=BezierFactory.getBezierEasing(d.o.x,d.o.y,d.i.x,d.i.y).get,g.__fnct=w),u=w((t-(d.t-this.offsetTime))/(m.t-this.offsetTime-(d.t-this.offsetTime)))}i=m.s?m.s[0]:d.e[0]}n=d.s[0]}for(l=e._length,h=n.i[0].length,r.lastIndex=p,s=0;s<l;s+=1)for(o=0;o<h;o+=1)c=a?n.i[s][o]:n.i[s][o]+(i.i[s][o]-n.i[s][o])*u,e.i[s][o]=c,c=a?n.o[s][o]:n.o[s][o]+(i.o[s][o]-n.o[s][o])*u,e.o[s][o]=c,c=a?n.v[s][o]:n.v[s][o]+(i.v[s][o]-n.v[s][o])*u,e.v[s][o]=c}function r(){var e=this.comp.renderedFrame-this.offsetTime,r=this.keyframes[0].t-this.offsetTime,n=this.keyframes[this.keyframes.length-1].t-this.offsetTime,i=this._caching.lastFrame;return i!==t&&(i<r&&e<r||i>n&&e>n)||(this._caching.lastIndex=i<e?this._caching.lastIndex:0,this.interpolateShape(e,this.pv,this._caching)),this._caching.lastFrame=e,this.pv}function n(){this.paths=this.localShapeCollection}function i(t){(function(t,e){if(t._length!==e._length||t.c!==e.c)return!1;var r,n=t._length;for(r=0;r<n;r+=1)if(t.v[r][0]!==e.v[r][0]||t.v[r][1]!==e.v[r][1]||t.o[r][0]!==e.o[r][0]||t.o[r][1]!==e.o[r][1]||t.i[r][0]!==e.i[r][0]||t.i[r][1]!==e.i[r][1])return!1;return!0})(this.v,t)||(this.v=shapePool.clone(t),this.localShapeCollection.releaseShapes(),this.localShapeCollection.addShape(this.v),this._mdf=!0,this.paths=this.localShapeCollection)}function a(){if(this.elem.globalData.frameId!==this.frameId)if(this.effectsSequence.length)if(this.lock)this.setVValue(this.pv);else{var t,e;this.lock=!0,this._mdf=!1,t=this.kf?this.pv:this.data.ks?this.data.ks.k:this.data.pt.k;var r=this.effectsSequence.length;for(e=0;e<r;e+=1)t=this.effectsSequence[e](t);this.setVValue(t),this.lock=!1,this.frameId=this.elem.globalData.frameId}else this._mdf=!1}function s(t,e,r){this.propType="shape",this.comp=t.comp,this.container=t,this.elem=t,this.data=e,this.k=!1,this.kf=!1,this._mdf=!1;var i=3===r?e.pt.k:e.ks.k;this.v=shapePool.clone(i),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.reset=n,this.effectsSequence=[]}function o(t){this.effectsSequence.push(t),this.container.addDynamicProperty(this)}function l(e,i,a){this.propType="shape",this.comp=e.comp,this.elem=e,this.container=e,this.offsetTime=e.data.st,this.keyframes=3===a?i.pt.k:i.ks.k,this.keyframesMetadata=[],this.k=!0,this.kf=!0;var s=this.keyframes[0].s[0].i.length;this.v=shapePool.newElement(),this.v.setPathData(this.keyframes[0].s[0].c,s),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.lastFrame=t,this.reset=n,this._caching={lastFrame:t,lastIndex:0},this.effectsSequence=[r.bind(this)]}s.prototype.interpolateShape=e,s.prototype.getValue=a,s.prototype.setVValue=i,s.prototype.addEffect=o,l.prototype.getValue=a,l.prototype.interpolateShape=e,l.prototype.setVValue=i,l.prototype.addEffect=o;var h=function(){var t=roundCorner;function e(t,e){this.v=shapePool.newElement(),this.v.setPathData(!0,4),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.localShapeCollection.addShape(this.v),this.d=e.d,this.elem=t,this.comp=t.comp,this.frameId=-1,this.initDynamicPropertyContainer(t),this.p=PropertyFactory.getProp(t,e.p,1,0,this),this.s=PropertyFactory.getProp(t,e.s,1,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertEllToPath())}return e.prototype={reset:n,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertEllToPath())},convertEllToPath:function(){var e=this.p.v[0],r=this.p.v[1],n=this.s.v[0]/2,i=this.s.v[1]/2,a=3!==this.d,s=this.v;s.v[0][0]=e,s.v[0][1]=r-i,s.v[1][0]=a?e+n:e-n,s.v[1][1]=r,s.v[2][0]=e,s.v[2][1]=r+i,s.v[3][0]=a?e-n:e+n,s.v[3][1]=r,s.i[0][0]=a?e-n*t:e+n*t,s.i[0][1]=r-i,s.i[1][0]=a?e+n:e-n,s.i[1][1]=r-i*t,s.i[2][0]=a?e+n*t:e-n*t,s.i[2][1]=r+i,s.i[3][0]=a?e-n:e+n,s.i[3][1]=r+i*t,s.o[0][0]=a?e+n*t:e-n*t,s.o[0][1]=r-i,s.o[1][0]=a?e+n:e-n,s.o[1][1]=r+i*t,s.o[2][0]=a?e-n*t:e+n*t,s.o[2][1]=r+i,s.o[3][0]=a?e-n:e+n,s.o[3][1]=r-i*t}},extendPrototype([DynamicPropertyContainer],e),e}(),u=function(){function t(t,e){this.v=shapePool.newElement(),this.v.setPathData(!0,0),this.elem=t,this.comp=t.comp,this.data=e,this.frameId=-1,this.d=e.d,this.initDynamicPropertyContainer(t),1===e.sy?(this.ir=PropertyFactory.getProp(t,e.ir,0,0,this),this.is=PropertyFactory.getProp(t,e.is,0,.01,this),this.convertToPath=this.convertStarToPath):this.convertToPath=this.convertPolygonToPath,this.pt=PropertyFactory.getProp(t,e.pt,0,0,this),this.p=PropertyFactory.getProp(t,e.p,1,0,this),this.r=PropertyFactory.getProp(t,e.r,0,degToRads,this),this.or=PropertyFactory.getProp(t,e.or,0,0,this),this.os=PropertyFactory.getProp(t,e.os,0,.01,this),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertToPath())}return t.prototype={reset:n,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertToPath())},convertStarToPath:function(){var t,e,r,n,i=2*Math.floor(this.pt.v),a=2*Math.PI/i,s=!0,o=this.or.v,l=this.ir.v,h=this.os.v,u=this.is.v,c=2*Math.PI*o/(2*i),p=2*Math.PI*l/(2*i),f=-Math.PI/2;f+=this.r.v;var d=3===this.data.d?-1:1;for(this.v._length=0,t=0;t<i;t+=1){r=s?h:u,n=s?c:p;var m=(e=s?o:l)*Math.cos(f),g=e*Math.sin(f),y=0===m&&0===g?0:g/Math.sqrt(m*m+g*g),v=0===m&&0===g?0:-m/Math.sqrt(m*m+g*g);m+=+this.p.v[0],g+=+this.p.v[1],this.v.setTripleAt(m,g,m-y*n*r*d,g-v*n*r*d,m+y*n*r*d,g+v*n*r*d,t,!0),s=!s,f+=a*d}},convertPolygonToPath:function(){var t,e=Math.floor(this.pt.v),r=2*Math.PI/e,n=this.or.v,i=this.os.v,a=2*Math.PI*n/(4*e),s=.5*-Math.PI,o=3===this.data.d?-1:1;for(s+=this.r.v,this.v._length=0,t=0;t<e;t+=1){var l=n*Math.cos(s),h=n*Math.sin(s),u=0===l&&0===h?0:h/Math.sqrt(l*l+h*h),c=0===l&&0===h?0:-l/Math.sqrt(l*l+h*h);l+=+this.p.v[0],h+=+this.p.v[1],this.v.setTripleAt(l,h,l-u*a*i*o,h-c*a*i*o,l+u*a*i*o,h+c*a*i*o,t,!0),s+=r*o}this.paths.length=0,this.paths[0]=this.v}},extendPrototype([DynamicPropertyContainer],t),t}(),c=function(){function t(t,e){this.v=shapePool.newElement(),this.v.c=!0,this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.elem=t,this.comp=t.comp,this.frameId=-1,this.d=e.d,this.initDynamicPropertyContainer(t),this.p=PropertyFactory.getProp(t,e.p,1,0,this),this.s=PropertyFactory.getProp(t,e.s,1,0,this),this.r=PropertyFactory.getProp(t,e.r,0,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertRectToPath())}return t.prototype={convertRectToPath:function(){var t=this.p.v[0],e=this.p.v[1],r=this.s.v[0]/2,n=this.s.v[1]/2,i=bmMin(r,n,this.r.v),a=i*(1-roundCorner);this.v._length=0,2===this.d||1===this.d?(this.v.setTripleAt(t+r,e-n+i,t+r,e-n+i,t+r,e-n+a,0,!0),this.v.setTripleAt(t+r,e+n-i,t+r,e+n-a,t+r,e+n-i,1,!0),0!==i?(this.v.setTripleAt(t+r-i,e+n,t+r-i,e+n,t+r-a,e+n,2,!0),this.v.setTripleAt(t-r+i,e+n,t-r+a,e+n,t-r+i,e+n,3,!0),this.v.setTripleAt(t-r,e+n-i,t-r,e+n-i,t-r,e+n-a,4,!0),this.v.setTripleAt(t-r,e-n+i,t-r,e-n+a,t-r,e-n+i,5,!0),this.v.setTripleAt(t-r+i,e-n,t-r+i,e-n,t-r+a,e-n,6,!0),this.v.setTripleAt(t+r-i,e-n,t+r-a,e-n,t+r-i,e-n,7,!0)):(this.v.setTripleAt(t-r,e+n,t-r+a,e+n,t-r,e+n,2),this.v.setTripleAt(t-r,e-n,t-r,e-n+a,t-r,e-n,3))):(this.v.setTripleAt(t+r,e-n+i,t+r,e-n+a,t+r,e-n+i,0,!0),0!==i?(this.v.setTripleAt(t+r-i,e-n,t+r-i,e-n,t+r-a,e-n,1,!0),this.v.setTripleAt(t-r+i,e-n,t-r+a,e-n,t-r+i,e-n,2,!0),this.v.setTripleAt(t-r,e-n+i,t-r,e-n+i,t-r,e-n+a,3,!0),this.v.setTripleAt(t-r,e+n-i,t-r,e+n-a,t-r,e+n-i,4,!0),this.v.setTripleAt(t-r+i,e+n,t-r+i,e+n,t-r+a,e+n,5,!0),this.v.setTripleAt(t+r-i,e+n,t+r-a,e+n,t+r-i,e+n,6,!0),this.v.setTripleAt(t+r,e+n-i,t+r,e+n-i,t+r,e+n-a,7,!0)):(this.v.setTripleAt(t-r,e-n,t-r+a,e-n,t-r,e-n,1,!0),this.v.setTripleAt(t-r,e+n,t-r,e+n-a,t-r,e+n,2,!0),this.v.setTripleAt(t+r,e+n,t+r-a,e+n,t+r,e+n,3,!0)))},getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertRectToPath())},reset:n},extendPrototype([DynamicPropertyContainer],t),t}();return{getShapeProp:function(t,e,r){var n;return 3===r||4===r?n=(3===r?e.pt:e.ks).k.length?new l(t,e,r):new s(t,e,r):5===r?n=new c(t,e):6===r?n=new h(t,e):7===r&&(n=new u(t,e)),n.k&&t.addDynamicProperty(n),n},getConstructorFunction:function(){return s},getKeyframedConstructorFunction:function(){return l}}}(),Matrix=function(){var t=Math.cos,e=Math.sin,r=Math.tan,n=Math.round;function i(){return this.props[0]=1,this.props[1]=0,this.props[2]=0,this.props[3]=0,this.props[4]=0,this.props[5]=1,this.props[6]=0,this.props[7]=0,this.props[8]=0,this.props[9]=0,this.props[10]=1,this.props[11]=0,this.props[12]=0,this.props[13]=0,this.props[14]=0,this.props[15]=1,this}function a(r){if(0===r)return this;var n=t(r),i=e(r);return this._t(n,-i,0,0,i,n,0,0,0,0,1,0,0,0,0,1)}function s(r){if(0===r)return this;var n=t(r),i=e(r);return this._t(1,0,0,0,0,n,-i,0,0,i,n,0,0,0,0,1)}function o(r){if(0===r)return this;var n=t(r),i=e(r);return this._t(n,0,i,0,0,1,0,0,-i,0,n,0,0,0,0,1)}function l(r){if(0===r)return this;var n=t(r),i=e(r);return this._t(n,-i,0,0,i,n,0,0,0,0,1,0,0,0,0,1)}function h(t,e){return this._t(1,e,t,1,0,0)}function u(t,e){return this.shear(r(t),r(e))}function c(n,i){var a=t(i),s=e(i);return this._t(a,s,0,0,-s,a,0,0,0,0,1,0,0,0,0,1)._t(1,0,0,0,r(n),1,0,0,0,0,1,0,0,0,0,1)._t(a,-s,0,0,s,a,0,0,0,0,1,0,0,0,0,1)}function p(t,e,r){return r||0===r||(r=1),1===t&&1===e&&1===r?this:this._t(t,0,0,0,0,e,0,0,0,0,r,0,0,0,0,1)}function f(t,e,r,n,i,a,s,o,l,h,u,c,p,f,d,m){return this.props[0]=t,this.props[1]=e,this.props[2]=r,this.props[3]=n,this.props[4]=i,this.props[5]=a,this.props[6]=s,this.props[7]=o,this.props[8]=l,this.props[9]=h,this.props[10]=u,this.props[11]=c,this.props[12]=p,this.props[13]=f,this.props[14]=d,this.props[15]=m,this}function d(t,e,r){return r=r||0,0!==t||0!==e||0!==r?this._t(1,0,0,0,0,1,0,0,0,0,1,0,t,e,r,1):this}function m(t,e,r,n,i,a,s,o,l,h,u,c,p,f,d,m){var g=this.props;if(1===t&&0===e&&0===r&&0===n&&0===i&&1===a&&0===s&&0===o&&0===l&&0===h&&1===u&&0===c)return g[12]=g[12]*t+g[15]*p,g[13]=g[13]*a+g[15]*f,g[14]=g[14]*u+g[15]*d,g[15]*=m,this._identityCalculated=!1,this;var y=g[0],v=g[1],b=g[2],w=g[3],x=g[4],_=g[5],k=g[6],S=g[7],E=g[8],C=g[9],M=g[10],P=g[11],A=g[12],T=g[13],D=g[14],I=g[15];return g[0]=y*t+v*i+b*l+w*p,g[1]=y*e+v*a+b*h+w*f,g[2]=y*r+v*s+b*u+w*d,g[3]=y*n+v*o+b*c+w*m,g[4]=x*t+_*i+k*l+S*p,g[5]=x*e+_*a+k*h+S*f,g[6]=x*r+_*s+k*u+S*d,g[7]=x*n+_*o+k*c+S*m,g[8]=E*t+C*i+M*l+P*p,g[9]=E*e+C*a+M*h+P*f,g[10]=E*r+C*s+M*u+P*d,g[11]=E*n+C*o+M*c+P*m,g[12]=A*t+T*i+D*l+I*p,g[13]=A*e+T*a+D*h+I*f,g[14]=A*r+T*s+D*u+I*d,g[15]=A*n+T*o+D*c+I*m,this._identityCalculated=!1,this}function g(){return this._identityCalculated||(this._identity=!(1!==this.props[0]||0!==this.props[1]||0!==this.props[2]||0!==this.props[3]||0!==this.props[4]||1!==this.props[5]||0!==this.props[6]||0!==this.props[7]||0!==this.props[8]||0!==this.props[9]||1!==this.props[10]||0!==this.props[11]||0!==this.props[12]||0!==this.props[13]||0!==this.props[14]||1!==this.props[15]),this._identityCalculated=!0),this._identity}function y(t){for(var e=0;e<16;){if(t.props[e]!==this.props[e])return!1;e+=1}return!0}function v(t){var e;for(e=0;e<16;e+=1)t.props[e]=this.props[e];return t}function b(t){var e;for(e=0;e<16;e+=1)this.props[e]=t[e]}function w(t,e,r){return{x:t*this.props[0]+e*this.props[4]+r*this.props[8]+this.props[12],y:t*this.props[1]+e*this.props[5]+r*this.props[9]+this.props[13],z:t*this.props[2]+e*this.props[6]+r*this.props[10]+this.props[14]}}function x(t,e,r){return t*this.props[0]+e*this.props[4]+r*this.props[8]+this.props[12]}function _(t,e,r){return t*this.props[1]+e*this.props[5]+r*this.props[9]+this.props[13]}function k(t,e,r){return t*this.props[2]+e*this.props[6]+r*this.props[10]+this.props[14]}function S(){var t=this.props[0]*this.props[5]-this.props[1]*this.props[4],e=this.props[5]/t,r=-this.props[1]/t,n=-this.props[4]/t,i=this.props[0]/t,a=(this.props[4]*this.props[13]-this.props[5]*this.props[12])/t,s=-(this.props[0]*this.props[13]-this.props[1]*this.props[12])/t,o=new Matrix;return o.props[0]=e,o.props[1]=r,o.props[4]=n,o.props[5]=i,o.props[12]=a,o.props[13]=s,o}function E(t){return this.getInverseMatrix().applyToPointArray(t[0],t[1],t[2]||0)}function C(t){var e,r=t.length,n=[];for(e=0;e<r;e+=1)n[e]=E(t[e]);return n}function M(t,e,r){var n=createTypedArray("float32",6);if(this.isIdentity())n[0]=t[0],n[1]=t[1],n[2]=e[0],n[3]=e[1],n[4]=r[0],n[5]=r[1];else{var i=this.props[0],a=this.props[1],s=this.props[4],o=this.props[5],l=this.props[12],h=this.props[13];n[0]=t[0]*i+t[1]*s+l,n[1]=t[0]*a+t[1]*o+h,n[2]=e[0]*i+e[1]*s+l,n[3]=e[0]*a+e[1]*o+h,n[4]=r[0]*i+r[1]*s+l,n[5]=r[0]*a+r[1]*o+h}return n}function P(t,e,r){return this.isIdentity()?[t,e,r]:[t*this.props[0]+e*this.props[4]+r*this.props[8]+this.props[12],t*this.props[1]+e*this.props[5]+r*this.props[9]+this.props[13],t*this.props[2]+e*this.props[6]+r*this.props[10]+this.props[14]]}function A(t,e){if(this.isIdentity())return t+","+e;var r=this.props;return Math.round(100*(t*r[0]+e*r[4]+r[12]))/100+","+Math.round(100*(t*r[1]+e*r[5]+r[13]))/100}function T(){for(var t=0,e=this.props,r="matrix3d(";t<16;)r+=n(1e4*e[t])/1e4,r+=15===t?")":",",t+=1;return r}function D(t){return t<1e-6&&t>0||t>-1e-6&&t<0?n(1e4*t)/1e4:t}function I(){var t=this.props;return"matrix("+D(t[0])+","+D(t[1])+","+D(t[4])+","+D(t[5])+","+D(t[12])+","+D(t[13])+")"}return function(){this.reset=i,this.rotate=a,this.rotateX=s,this.rotateY=o,this.rotateZ=l,this.skew=u,this.skewFromAxis=c,this.shear=h,this.scale=p,this.setTransform=f,this.translate=d,this.transform=m,this.applyToPoint=w,this.applyToX=x,this.applyToY=_,this.applyToZ=k,this.applyToPointArray=P,this.applyToTriplePoints=M,this.applyToPointStringified=A,this.toCSS=T,this.to2dCSS=I,this.clone=v,this.cloneFromProps=b,this.equals=y,this.inversePoints=C,this.inversePoint=E,this.getInverseMatrix=S,this._t=this.transform,this.isIdentity=g,this._identity=!0,this._identityCalculated=!1,this.props=createTypedArray("float32",16),this.reset()}}();function _typeof$3(t){return _typeof$3="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$3(t)}var lottie={},standalone="__[STANDALONE]__",animationData="__[ANIMATIONDATA]__",renderer="";function setLocation(t){setLocationHref(t)}function searchAnimations(){!0===standalone?animationManager.searchAnimations(animationData,standalone,renderer):animationManager.searchAnimations()}function setSubframeRendering(t){setSubframeEnabled(t)}function setPrefix(t){setIdPrefix(t)}function loadAnimation(t){return!0===standalone&&(t.animationData=JSON.parse(animationData)),animationManager.loadAnimation(t)}function setQuality(t){if("string"==typeof t)switch(t){case"high":setDefaultCurveSegments(200);break;default:case"medium":setDefaultCurveSegments(50);break;case"low":setDefaultCurveSegments(10)}else!isNaN(t)&&t>1&&setDefaultCurveSegments(t);getDefaultCurveSegments()>=50?roundValues(!1):roundValues(!0)}function inBrowser(){return"undefined"!=typeof navigator}function installPlugin(t,e){"expressions"===t&&setExpressionsPlugin(e)}function getFactory(t){switch(t){case"propertyFactory":return PropertyFactory;case"shapePropertyFactory":return ShapePropertyFactory;case"matrix":return Matrix;default:return null}}function checkReady(){"complete"===document.readyState&&(clearInterval(readyStateCheckInterval),searchAnimations())}function getQueryVariable(t){for(var e=queryString.split("&"),r=0;r<e.length;r+=1){var n=e[r].split("=");if(decodeURIComponent(n[0])==t)return decodeURIComponent(n[1])}return null}lottie.play=animationManager.play,lottie.pause=animationManager.pause,lottie.setLocationHref=setLocation,lottie.togglePause=animationManager.togglePause,lottie.setSpeed=animationManager.setSpeed,lottie.setDirection=animationManager.setDirection,lottie.stop=animationManager.stop,lottie.searchAnimations=searchAnimations,lottie.registerAnimation=animationManager.registerAnimation,lottie.loadAnimation=loadAnimation,lottie.setSubframeRendering=setSubframeRendering,lottie.resize=animationManager.resize,lottie.goToAndStop=animationManager.goToAndStop,lottie.destroy=animationManager.destroy,lottie.setQuality=setQuality,lottie.inBrowser=inBrowser,lottie.installPlugin=installPlugin,lottie.freeze=animationManager.freeze,lottie.unfreeze=animationManager.unfreeze,lottie.setVolume=animationManager.setVolume,lottie.mute=animationManager.mute,lottie.unmute=animationManager.unmute,lottie.getRegisteredAnimations=animationManager.getRegisteredAnimations,lottie.useWebWorker=setWebWorker,lottie.setIDPrefix=setPrefix,lottie.__getFactory=getFactory,lottie.version="5.9.6";var queryString="";if(standalone){var scripts=document.getElementsByTagName("script"),index=scripts.length-1,myScript=scripts[index]||{src:""};queryString=myScript.src?myScript.src.replace(/^[^\?]+\??/,""):"",renderer=getQueryVariable("renderer")}var readyStateCheckInterval=setInterval(checkReady,100);try{"object"!==_typeof$3(exports)&&__webpack_require__.amdO}catch(t){}var ShapeModifiers=function(){var t={},e={};return t.registerModifier=function(t,r){e[t]||(e[t]=r)},t.getModifier=function(t,r,n){return new e[t](r,n)},t}();function ShapeModifier(){}function TrimModifier(){}function PuckerAndBloatModifier(){}ShapeModifier.prototype.initModifierProperties=function(){},ShapeModifier.prototype.addShapeToModifier=function(){},ShapeModifier.prototype.addShape=function(t){if(!this.closed){t.sh.container.addDynamicProperty(t.sh);var e={shape:t.sh,data:t,localShapeCollection:shapeCollectionPool.newShapeCollection()};this.shapes.push(e),this.addShapeToModifier(e),this._isAnimated&&t.setAsAnimated()}},ShapeModifier.prototype.init=function(t,e){this.shapes=[],this.elem=t,this.initDynamicPropertyContainer(t),this.initModifierProperties(t,e),this.frameId=initialDefaultFrame,this.closed=!1,this.k=!1,this.dynamicProperties.length?this.k=!0:this.getValue(!0)},ShapeModifier.prototype.processKeys=function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties())},extendPrototype([DynamicPropertyContainer],ShapeModifier),extendPrototype([ShapeModifier],TrimModifier),TrimModifier.prototype.initModifierProperties=function(t,e){this.s=PropertyFactory.getProp(t,e.s,0,.01,this),this.e=PropertyFactory.getProp(t,e.e,0,.01,this),this.o=PropertyFactory.getProp(t,e.o,0,0,this),this.sValue=0,this.eValue=0,this.getValue=this.processKeys,this.m=e.m,this._isAnimated=!!this.s.effectsSequence.length||!!this.e.effectsSequence.length||!!this.o.effectsSequence.length},TrimModifier.prototype.addShapeToModifier=function(t){t.pathsData=[]},TrimModifier.prototype.calculateShapeEdges=function(t,e,r,n,i){var a=[];e<=1?a.push({s:t,e}):t>=1?a.push({s:t-1,e:e-1}):(a.push({s:t,e:1}),a.push({s:0,e:e-1}));var s,o,l=[],h=a.length;for(s=0;s<h;s+=1){var u,c;(o=a[s]).e*i<n||o.s*i>n+r||(u=o.s*i<=n?0:(o.s*i-n)/r,c=o.e*i>=n+r?1:(o.e*i-n)/r,l.push([u,c]))}return l.length||l.push([0,0]),l},TrimModifier.prototype.releasePathsData=function(t){var e,r=t.length;for(e=0;e<r;e+=1)segmentsLengthPool.release(t[e]);return t.length=0,t},TrimModifier.prototype.processShapes=function(t){var e,r,n,i;if(this._mdf||t){var a=this.o.v%360/360;if(a<0&&(a+=1),(e=this.s.v>1?1+a:this.s.v<0?0+a:this.s.v+a)>(r=this.e.v>1?1+a:this.e.v<0?0+a:this.e.v+a)){var s=e;e=r,r=s}e=1e-4*Math.round(1e4*e),r=1e-4*Math.round(1e4*r),this.sValue=e,this.eValue=r}else e=this.sValue,r=this.eValue;var o,l,h,u,c,p=this.shapes.length,f=0;if(r===e)for(i=0;i<p;i+=1)this.shapes[i].localShapeCollection.releaseShapes(),this.shapes[i].shape._mdf=!0,this.shapes[i].shape.paths=this.shapes[i].localShapeCollection,this._mdf&&(this.shapes[i].pathsData.length=0);else if(1===r&&0===e||0===r&&1===e){if(this._mdf)for(i=0;i<p;i+=1)this.shapes[i].pathsData.length=0,this.shapes[i].shape._mdf=!0}else{var d,m,g=[];for(i=0;i<p;i+=1)if((d=this.shapes[i]).shape._mdf||this._mdf||t||2===this.m){if(l=(n=d.shape.paths)._length,c=0,!d.shape._mdf&&d.pathsData.length)c=d.totalShapeLength;else{for(h=this.releasePathsData(d.pathsData),o=0;o<l;o+=1)u=bez.getSegmentsLength(n.shapes[o]),h.push(u),c+=u.totalLength;d.totalShapeLength=c,d.pathsData=h}f+=c,d.shape._mdf=!0}else d.shape.paths=d.localShapeCollection;var y,v=e,b=r,w=0;for(i=p-1;i>=0;i-=1)if((d=this.shapes[i]).shape._mdf){for((m=d.localShapeCollection).releaseShapes(),2===this.m&&p>1?(y=this.calculateShapeEdges(e,r,d.totalShapeLength,w,f),w+=d.totalShapeLength):y=[[v,b]],l=y.length,o=0;o<l;o+=1){v=y[o][0],b=y[o][1],g.length=0,b<=1?g.push({s:d.totalShapeLength*v,e:d.totalShapeLength*b}):v>=1?g.push({s:d.totalShapeLength*(v-1),e:d.totalShapeLength*(b-1)}):(g.push({s:d.totalShapeLength*v,e:d.totalShapeLength}),g.push({s:0,e:d.totalShapeLength*(b-1)}));var x=this.addShapes(d,g[0]);if(g[0].s!==g[0].e){if(g.length>1)if(d.shape.paths.shapes[d.shape.paths._length-1].c){var _=x.pop();this.addPaths(x,m),x=this.addShapes(d,g[1],_)}else this.addPaths(x,m),x=this.addShapes(d,g[1]);this.addPaths(x,m)}}d.shape.paths=m}}},TrimModifier.prototype.addPaths=function(t,e){var r,n=t.length;for(r=0;r<n;r+=1)e.addShape(t[r])},TrimModifier.prototype.addSegment=function(t,e,r,n,i,a,s){i.setXYAt(e[0],e[1],"o",a),i.setXYAt(r[0],r[1],"i",a+1),s&&i.setXYAt(t[0],t[1],"v",a),i.setXYAt(n[0],n[1],"v",a+1)},TrimModifier.prototype.addSegmentFromArray=function(t,e,r,n){e.setXYAt(t[1],t[5],"o",r),e.setXYAt(t[2],t[6],"i",r+1),n&&e.setXYAt(t[0],t[4],"v",r),e.setXYAt(t[3],t[7],"v",r+1)},TrimModifier.prototype.addShapes=function(t,e,r){var n,i,a,s,o,l,h,u,c=t.pathsData,p=t.shape.paths.shapes,f=t.shape.paths._length,d=0,m=[],g=!0;for(r?(o=r._length,u=r._length):(r=shapePool.newElement(),o=0,u=0),m.push(r),n=0;n<f;n+=1){for(l=c[n].lengths,r.c=p[n].c,a=p[n].c?l.length:l.length+1,i=1;i<a;i+=1)if(d+(s=l[i-1]).addedLength<e.s)d+=s.addedLength,r.c=!1;else{if(d>e.e){r.c=!1;break}e.s<=d&&e.e>=d+s.addedLength?(this.addSegment(p[n].v[i-1],p[n].o[i-1],p[n].i[i],p[n].v[i],r,o,g),g=!1):(h=bez.getNewSegment(p[n].v[i-1],p[n].v[i],p[n].o[i-1],p[n].i[i],(e.s-d)/s.addedLength,(e.e-d)/s.addedLength,l[i-1]),this.addSegmentFromArray(h,r,o,g),g=!1,r.c=!1),d+=s.addedLength,o+=1}if(p[n].c&&l.length){if(s=l[i-1],d<=e.e){var y=l[i-1].addedLength;e.s<=d&&e.e>=d+y?(this.addSegment(p[n].v[i-1],p[n].o[i-1],p[n].i[0],p[n].v[0],r,o,g),g=!1):(h=bez.getNewSegment(p[n].v[i-1],p[n].v[0],p[n].o[i-1],p[n].i[0],(e.s-d)/y,(e.e-d)/y,l[i-1]),this.addSegmentFromArray(h,r,o,g),g=!1,r.c=!1)}else r.c=!1;d+=s.addedLength,o+=1}if(r._length&&(r.setXYAt(r.v[u][0],r.v[u][1],"i",u),r.setXYAt(r.v[r._length-1][0],r.v[r._length-1][1],"o",r._length-1)),d>e.e)break;n<f-1&&(r=shapePool.newElement(),g=!0,m.push(r),o=0)}return m},extendPrototype([ShapeModifier],PuckerAndBloatModifier),PuckerAndBloatModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.amount=PropertyFactory.getProp(t,e.a,0,null,this),this._isAnimated=!!this.amount.effectsSequence.length},PuckerAndBloatModifier.prototype.processPath=function(t,e){var r=e/100,n=[0,0],i=t._length,a=0;for(a=0;a<i;a+=1)n[0]+=t.v[a][0],n[1]+=t.v[a][1];n[0]/=i,n[1]/=i;var s,o,l,h,u,c,p=shapePool.newElement();for(p.c=t.c,a=0;a<i;a+=1)s=t.v[a][0]+(n[0]-t.v[a][0])*r,o=t.v[a][1]+(n[1]-t.v[a][1])*r,l=t.o[a][0]+(n[0]-t.o[a][0])*-r,h=t.o[a][1]+(n[1]-t.o[a][1])*-r,u=t.i[a][0]+(n[0]-t.i[a][0])*-r,c=t.i[a][1]+(n[1]-t.i[a][1])*-r,p.setTripleAt(s,o,l,h,u,c,a);return p},PuckerAndBloatModifier.prototype.processShapes=function(t){var e,r,n,i,a,s,o=this.shapes.length,l=this.amount.v;if(0!==l)for(r=0;r<o;r+=1){if(s=(a=this.shapes[r]).localShapeCollection,a.shape._mdf||this._mdf||t)for(s.releaseShapes(),a.shape._mdf=!0,e=a.shape.paths.shapes,i=a.shape.paths._length,n=0;n<i;n+=1)s.addShape(this.processPath(e[n],l));a.shape.paths=a.localShapeCollection}this.dynamicProperties.length||(this._mdf=!1)};var TransformPropertyFactory=function(){var t=[0,0];function e(t,e,r){if(this.elem=t,this.frameId=-1,this.propType="transform",this.data=e,this.v=new Matrix,this.pre=new Matrix,this.appliedTransformations=0,this.initDynamicPropertyContainer(r||t),e.p&&e.p.s?(this.px=PropertyFactory.getProp(t,e.p.x,0,0,this),this.py=PropertyFactory.getProp(t,e.p.y,0,0,this),e.p.z&&(this.pz=PropertyFactory.getProp(t,e.p.z,0,0,this))):this.p=PropertyFactory.getProp(t,e.p||{k:[0,0,0]},1,0,this),e.rx){if(this.rx=PropertyFactory.getProp(t,e.rx,0,degToRads,this),this.ry=PropertyFactory.getProp(t,e.ry,0,degToRads,this),this.rz=PropertyFactory.getProp(t,e.rz,0,degToRads,this),e.or.k[0].ti){var n,i=e.or.k.length;for(n=0;n<i;n+=1)e.or.k[n].to=null,e.or.k[n].ti=null}this.or=PropertyFactory.getProp(t,e.or,1,degToRads,this),this.or.sh=!0}else this.r=PropertyFactory.getProp(t,e.r||{k:0},0,degToRads,this);e.sk&&(this.sk=PropertyFactory.getProp(t,e.sk,0,degToRads,this),this.sa=PropertyFactory.getProp(t,e.sa,0,degToRads,this)),this.a=PropertyFactory.getProp(t,e.a||{k:[0,0,0]},1,0,this),this.s=PropertyFactory.getProp(t,e.s||{k:[100,100,100]},1,.01,this),e.o?this.o=PropertyFactory.getProp(t,e.o,0,.01,t):this.o={_mdf:!1,v:1},this._isDirty=!0,this.dynamicProperties.length||this.getValue(!0)}return e.prototype={applyToMatrix:function(t){var e=this._mdf;this.iterateDynamicProperties(),this._mdf=this._mdf||e,this.a&&t.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.s&&t.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&t.skewFromAxis(-this.sk.v,this.sa.v),this.r?t.rotate(-this.r.v):t.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.data.p.s?this.data.p.z?t.translate(this.px.v,this.py.v,-this.pz.v):t.translate(this.px.v,this.py.v,0):t.translate(this.p.v[0],this.p.v[1],-this.p.v[2])},getValue:function(e){if(this.elem.globalData.frameId!==this.frameId){if(this._isDirty&&(this.precalculateMatrix(),this._isDirty=!1),this.iterateDynamicProperties(),this._mdf||e){var r;if(this.v.cloneFromProps(this.pre.props),this.appliedTransformations<1&&this.v.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations<2&&this.v.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&this.appliedTransformations<3&&this.v.skewFromAxis(-this.sk.v,this.sa.v),this.r&&this.appliedTransformations<4?this.v.rotate(-this.r.v):!this.r&&this.appliedTransformations<4&&this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.autoOriented){var n,i;if(r=this.elem.globalData.frameRate,this.p&&this.p.keyframes&&this.p.getValueAtTime)this.p._caching.lastFrame+this.p.offsetTime<=this.p.keyframes[0].t?(n=this.p.getValueAtTime((this.p.keyframes[0].t+.01)/r,0),i=this.p.getValueAtTime(this.p.keyframes[0].t/r,0)):this.p._caching.lastFrame+this.p.offsetTime>=this.p.keyframes[this.p.keyframes.length-1].t?(n=this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length-1].t/r,0),i=this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length-1].t-.05)/r,0)):(n=this.p.pv,i=this.p.getValueAtTime((this.p._caching.lastFrame+this.p.offsetTime-.01)/r,this.p.offsetTime));else if(this.px&&this.px.keyframes&&this.py.keyframes&&this.px.getValueAtTime&&this.py.getValueAtTime){n=[],i=[];var a=this.px,s=this.py;a._caching.lastFrame+a.offsetTime<=a.keyframes[0].t?(n[0]=a.getValueAtTime((a.keyframes[0].t+.01)/r,0),n[1]=s.getValueAtTime((s.keyframes[0].t+.01)/r,0),i[0]=a.getValueAtTime(a.keyframes[0].t/r,0),i[1]=s.getValueAtTime(s.keyframes[0].t/r,0)):a._caching.lastFrame+a.offsetTime>=a.keyframes[a.keyframes.length-1].t?(n[0]=a.getValueAtTime(a.keyframes[a.keyframes.length-1].t/r,0),n[1]=s.getValueAtTime(s.keyframes[s.keyframes.length-1].t/r,0),i[0]=a.getValueAtTime((a.keyframes[a.keyframes.length-1].t-.01)/r,0),i[1]=s.getValueAtTime((s.keyframes[s.keyframes.length-1].t-.01)/r,0)):(n=[a.pv,s.pv],i[0]=a.getValueAtTime((a._caching.lastFrame+a.offsetTime-.01)/r,a.offsetTime),i[1]=s.getValueAtTime((s._caching.lastFrame+s.offsetTime-.01)/r,s.offsetTime))}else n=i=t;this.v.rotate(-Math.atan2(n[1]-i[1],n[0]-i[0]))}this.data.p&&this.data.p.s?this.data.p.z?this.v.translate(this.px.v,this.py.v,-this.pz.v):this.v.translate(this.px.v,this.py.v,0):this.v.translate(this.p.v[0],this.p.v[1],-this.p.v[2])}this.frameId=this.elem.globalData.frameId}},precalculateMatrix:function(){if(!this.a.k&&(this.pre.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations=1,!this.s.effectsSequence.length)){if(this.pre.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.appliedTransformations=2,this.sk){if(this.sk.effectsSequence.length||this.sa.effectsSequence.length)return;this.pre.skewFromAxis(-this.sk.v,this.sa.v),this.appliedTransformations=3}this.r?this.r.effectsSequence.length||(this.pre.rotate(-this.r.v),this.appliedTransformations=4):this.rz.effectsSequence.length||this.ry.effectsSequence.length||this.rx.effectsSequence.length||this.or.effectsSequence.length||(this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.appliedTransformations=4)}},autoOrient:function(){}},extendPrototype([DynamicPropertyContainer],e),e.prototype.addDynamicProperty=function(t){this._addDynamicProperty(t),this.elem.addDynamicProperty(t),this._isDirty=!0},e.prototype._addDynamicProperty=DynamicPropertyContainer.prototype.addDynamicProperty,{getTransformProperty:function(t,r,n){return new e(t,r,n)}}}();function RepeaterModifier(){}function RoundCornersModifier(){}function getFontProperties(t){for(var e=t.fStyle?t.fStyle.split(" "):[],r="normal",n="normal",i=e.length,a=0;a<i;a+=1)switch(e[a].toLowerCase()){case"italic":n="italic";break;case"bold":r="700";break;case"black":r="900";break;case"medium":r="500";break;case"regular":case"normal":r="400";break;case"light":case"thin":r="200"}return{style:n,weight:t.fWeight||r}}extendPrototype([ShapeModifier],RepeaterModifier),RepeaterModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.c=PropertyFactory.getProp(t,e.c,0,null,this),this.o=PropertyFactory.getProp(t,e.o,0,null,this),this.tr=TransformPropertyFactory.getTransformProperty(t,e.tr,this),this.so=PropertyFactory.getProp(t,e.tr.so,0,.01,this),this.eo=PropertyFactory.getProp(t,e.tr.eo,0,.01,this),this.data=e,this.dynamicProperties.length||this.getValue(!0),this._isAnimated=!!this.dynamicProperties.length,this.pMatrix=new Matrix,this.rMatrix=new Matrix,this.sMatrix=new Matrix,this.tMatrix=new Matrix,this.matrix=new Matrix},RepeaterModifier.prototype.applyTransforms=function(t,e,r,n,i,a){var s=a?-1:1,o=n.s.v[0]+(1-n.s.v[0])*(1-i),l=n.s.v[1]+(1-n.s.v[1])*(1-i);t.translate(n.p.v[0]*s*i,n.p.v[1]*s*i,n.p.v[2]),e.translate(-n.a.v[0],-n.a.v[1],n.a.v[2]),e.rotate(-n.r.v*s*i),e.translate(n.a.v[0],n.a.v[1],n.a.v[2]),r.translate(-n.a.v[0],-n.a.v[1],n.a.v[2]),r.scale(a?1/o:o,a?1/l:l),r.translate(n.a.v[0],n.a.v[1],n.a.v[2])},RepeaterModifier.prototype.init=function(t,e,r,n){for(this.elem=t,this.arr=e,this.pos=r,this.elemsData=n,this._currentCopies=0,this._elements=[],this._groups=[],this.frameId=-1,this.initDynamicPropertyContainer(t),this.initModifierProperties(t,e[r]);r>0;)r-=1,this._elements.unshift(e[r]);this.dynamicProperties.length?this.k=!0:this.getValue(!0)},RepeaterModifier.prototype.resetElements=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e]._processed=!1,"gr"===t[e].ty&&this.resetElements(t[e].it)},RepeaterModifier.prototype.cloneElements=function(t){var e=JSON.parse(JSON.stringify(t));return this.resetElements(e),e},RepeaterModifier.prototype.changeGroupRender=function(t,e){var r,n=t.length;for(r=0;r<n;r+=1)t[r]._render=e,"gr"===t[r].ty&&this.changeGroupRender(t[r].it,e)},RepeaterModifier.prototype.processShapes=function(t){var e,r,n,i,a,s=!1;if(this._mdf||t){var o,l=Math.ceil(this.c.v);if(this._groups.length<l){for(;this._groups.length<l;){var h={it:this.cloneElements(this._elements),ty:"gr"};h.it.push({a:{a:0,ix:1,k:[0,0]},nm:"Transform",o:{a:0,ix:7,k:100},p:{a:0,ix:2,k:[0,0]},r:{a:1,ix:6,k:[{s:0,e:0,t:0},{s:0,e:0,t:1}]},s:{a:0,ix:3,k:[100,100]},sa:{a:0,ix:5,k:0},sk:{a:0,ix:4,k:0},ty:"tr"}),this.arr.splice(0,0,h),this._groups.splice(0,0,h),this._currentCopies+=1}this.elem.reloadShapes(),s=!0}for(a=0,n=0;n<=this._groups.length-1;n+=1){if(o=a<l,this._groups[n]._render=o,this.changeGroupRender(this._groups[n].it,o),!o){var u=this.elemsData[n].it,c=u[u.length-1];0!==c.transform.op.v?(c.transform.op._mdf=!0,c.transform.op.v=0):c.transform.op._mdf=!1}a+=1}this._currentCopies=l;var p=this.o.v,f=p%1,d=p>0?Math.floor(p):Math.ceil(p),m=this.pMatrix.props,g=this.rMatrix.props,y=this.sMatrix.props;this.pMatrix.reset(),this.rMatrix.reset(),this.sMatrix.reset(),this.tMatrix.reset(),this.matrix.reset();var v,b,w=0;if(p>0){for(;w<d;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),w+=1;f&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,f,!1),w+=f)}else if(p<0){for(;w>d;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!0),w-=1;f&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,-f,!0),w-=f)}for(n=1===this.data.m?0:this._currentCopies-1,i=1===this.data.m?1:-1,a=this._currentCopies;a;){if(b=(r=(e=this.elemsData[n].it)[e.length-1].transform.mProps.v.props).length,e[e.length-1].transform.mProps._mdf=!0,e[e.length-1].transform.op._mdf=!0,e[e.length-1].transform.op.v=1===this._currentCopies?this.so.v:this.so.v+(this.eo.v-this.so.v)*(n/(this._currentCopies-1)),0!==w){for((0!==n&&1===i||n!==this._currentCopies-1&&-1===i)&&this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),this.matrix.transform(g[0],g[1],g[2],g[3],g[4],g[5],g[6],g[7],g[8],g[9],g[10],g[11],g[12],g[13],g[14],g[15]),this.matrix.transform(y[0],y[1],y[2],y[3],y[4],y[5],y[6],y[7],y[8],y[9],y[10],y[11],y[12],y[13],y[14],y[15]),this.matrix.transform(m[0],m[1],m[2],m[3],m[4],m[5],m[6],m[7],m[8],m[9],m[10],m[11],m[12],m[13],m[14],m[15]),v=0;v<b;v+=1)r[v]=this.matrix.props[v];this.matrix.reset()}else for(this.matrix.reset(),v=0;v<b;v+=1)r[v]=this.matrix.props[v];w+=1,a-=1,n+=i}}else for(a=this._currentCopies,n=0,i=1;a;)r=(e=this.elemsData[n].it)[e.length-1].transform.mProps.v.props,e[e.length-1].transform.mProps._mdf=!1,e[e.length-1].transform.op._mdf=!1,a-=1,n+=i;return s},RepeaterModifier.prototype.addShape=function(){},extendPrototype([ShapeModifier],RoundCornersModifier),RoundCornersModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.rd=PropertyFactory.getProp(t,e.r,0,null,this),this._isAnimated=!!this.rd.effectsSequence.length},RoundCornersModifier.prototype.processPath=function(t,e){var r,n=shapePool.newElement();n.c=t.c;var i,a,s,o,l,h,u,c,p,f,d,m,g=t._length,y=0;for(r=0;r<g;r+=1)i=t.v[r],s=t.o[r],a=t.i[r],i[0]===s[0]&&i[1]===s[1]&&i[0]===a[0]&&i[1]===a[1]?0!==r&&r!==g-1||t.c?(o=0===r?t.v[g-1]:t.v[r-1],h=(l=Math.sqrt(Math.pow(i[0]-o[0],2)+Math.pow(i[1]-o[1],2)))?Math.min(l/2,e)/l:0,u=d=i[0]+(o[0]-i[0])*h,c=m=i[1]-(i[1]-o[1])*h,p=u-(u-i[0])*roundCorner,f=c-(c-i[1])*roundCorner,n.setTripleAt(u,c,p,f,d,m,y),y+=1,o=r===g-1?t.v[0]:t.v[r+1],h=(l=Math.sqrt(Math.pow(i[0]-o[0],2)+Math.pow(i[1]-o[1],2)))?Math.min(l/2,e)/l:0,u=p=i[0]+(o[0]-i[0])*h,c=f=i[1]+(o[1]-i[1])*h,d=u-(u-i[0])*roundCorner,m=c-(c-i[1])*roundCorner,n.setTripleAt(u,c,p,f,d,m,y),y+=1):(n.setTripleAt(i[0],i[1],s[0],s[1],a[0],a[1],y),y+=1):(n.setTripleAt(t.v[r][0],t.v[r][1],t.o[r][0],t.o[r][1],t.i[r][0],t.i[r][1],y),y+=1);return n},RoundCornersModifier.prototype.processShapes=function(t){var e,r,n,i,a,s,o=this.shapes.length,l=this.rd.v;if(0!==l)for(r=0;r<o;r+=1){if(s=(a=this.shapes[r]).localShapeCollection,a.shape._mdf||this._mdf||t)for(s.releaseShapes(),a.shape._mdf=!0,e=a.shape.paths.shapes,i=a.shape.paths._length,n=0;n<i;n+=1)s.addShape(this.processPath(e[n],l));a.shape.paths=a.localShapeCollection}this.dynamicProperties.length||(this._mdf=!1)};var FontManager=function(){var t={w:0,size:0,shapes:[],data:{shapes:[]}},e=[];e=e.concat([2304,2305,2306,2307,2362,2363,2364,2364,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2387,2388,2389,2390,2391,2402,2403]);var r=["d83cdffb","d83cdffc","d83cdffd","d83cdffe","d83cdfff"],n=[65039,8205];function i(t,e){var r=createTag("span");r.setAttribute("aria-hidden",!0),r.style.fontFamily=e;var n=createTag("span");n.innerText="giItT1WQy@!-/#",r.style.position="absolute",r.style.left="-10000px",r.style.top="-10000px",r.style.fontSize="300px",r.style.fontVariant="normal",r.style.fontStyle="normal",r.style.fontWeight="normal",r.style.letterSpacing="0",r.appendChild(n),document.body.appendChild(r);var i=n.offsetWidth;return n.style.fontFamily=function(t){var e,r=t.split(","),n=r.length,i=[];for(e=0;e<n;e+=1)"sans-serif"!==r[e]&&"monospace"!==r[e]&&i.push(r[e]);return i.join(",")}(t)+", "+e,{node:n,w:i,parent:r}}function a(t,e){var r,n=document.body&&e?"svg":"canvas",i=getFontProperties(t);if("svg"===n){var a=createNS("text");a.style.fontSize="100px",a.setAttribute("font-family",t.fFamily),a.setAttribute("font-style",i.style),a.setAttribute("font-weight",i.weight),a.textContent="1",t.fClass?(a.style.fontFamily="inherit",a.setAttribute("class",t.fClass)):a.style.fontFamily=t.fFamily,e.appendChild(a),r=a}else{var s=new OffscreenCanvas(500,500).getContext("2d");s.font=i.style+" "+i.weight+" 100px "+t.fFamily,r=s}return{measureText:function(t){return"svg"===n?(r.textContent=t,r.getComputedTextLength()):r.measureText(t).width}}}var s=function(){this.fonts=[],this.chars=null,this.typekitLoaded=0,this.isLoaded=!1,this._warned=!1,this.initTime=Date.now(),this.setIsLoadedBinded=this.setIsLoaded.bind(this),this.checkLoadedFontsBinded=this.checkLoadedFonts.bind(this)};s.isModifier=function(t,e){var n=t.toString(16)+e.toString(16);return-1!==r.indexOf(n)},s.isZeroWidthJoiner=function(t,e){return e?t===n[0]&&e===n[1]:t===n[1]},s.isCombinedCharacter=function(t){return-1!==e.indexOf(t)};var o={addChars:function(t){if(t){var e;this.chars||(this.chars=[]);var r,n,i=t.length,a=this.chars.length;for(e=0;e<i;e+=1){for(r=0,n=!1;r<a;)this.chars[r].style===t[e].style&&this.chars[r].fFamily===t[e].fFamily&&this.chars[r].ch===t[e].ch&&(n=!0),r+=1;n||(this.chars.push(t[e]),a+=1)}}},addFonts:function(t,e){if(t){if(this.chars)return this.isLoaded=!0,void(this.fonts=t.list);if(!document.body)return this.isLoaded=!0,t.list.forEach((function(t){t.helper=a(t),t.cache={}})),void(this.fonts=t.list);var r,n=t.list,s=n.length,o=s;for(r=0;r<s;r+=1){var l,h,u=!0;if(n[r].loaded=!1,n[r].monoCase=i(n[r].fFamily,"monospace"),n[r].sansCase=i(n[r].fFamily,"sans-serif"),n[r].fPath){if("p"===n[r].fOrigin||3===n[r].origin){if((l=document.querySelectorAll('style[f-forigin="p"][f-family="'+n[r].fFamily+'"], style[f-origin="3"][f-family="'+n[r].fFamily+'"]')).length>0&&(u=!1),u){var c=createTag("style");c.setAttribute("f-forigin",n[r].fOrigin),c.setAttribute("f-origin",n[r].origin),c.setAttribute("f-family",n[r].fFamily),c.type="text/css",c.innerText="@font-face {font-family: "+n[r].fFamily+"; font-style: normal; src: url('"+n[r].fPath+"');}",e.appendChild(c)}}else if("g"===n[r].fOrigin||1===n[r].origin){for(l=document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]'),h=0;h<l.length;h+=1)-1!==l[h].href.indexOf(n[r].fPath)&&(u=!1);if(u){var p=createTag("link");p.setAttribute("f-forigin",n[r].fOrigin),p.setAttribute("f-origin",n[r].origin),p.type="text/css",p.rel="stylesheet",p.href=n[r].fPath,document.body.appendChild(p)}}else if("t"===n[r].fOrigin||2===n[r].origin){for(l=document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]'),h=0;h<l.length;h+=1)n[r].fPath===l[h].src&&(u=!1);if(u){var f=createTag("link");f.setAttribute("f-forigin",n[r].fOrigin),f.setAttribute("f-origin",n[r].origin),f.setAttribute("rel","stylesheet"),f.setAttribute("href",n[r].fPath),e.appendChild(f)}}}else n[r].loaded=!0,o-=1;n[r].helper=a(n[r],e),n[r].cache={},this.fonts.push(n[r])}0===o?this.isLoaded=!0:setTimeout(this.checkLoadedFonts.bind(this),100)}else this.isLoaded=!0},getCharData:function(e,r,n){for(var i=0,a=this.chars.length;i<a;){if(this.chars[i].ch===e&&this.chars[i].style===r&&this.chars[i].fFamily===n)return this.chars[i];i+=1}return("string"==typeof e&&13!==e.charCodeAt(0)||!e)&&console&&console.warn&&!this._warned&&(this._warned=!0,console.warn("Missing character from exported characters list: ",e,r,n)),t},getFontByName:function(t){for(var e=0,r=this.fonts.length;e<r;){if(this.fonts[e].fName===t)return this.fonts[e];e+=1}return this.fonts[0]},measureText:function(t,e,r){var n=this.getFontByName(e),i=t.charCodeAt(0);if(!n.cache[i+1]){var a=n.helper;if(" "===t){var s=a.measureText("|"+t+"|"),o=a.measureText("||");n.cache[i+1]=(s-o)/100}else n.cache[i+1]=a.measureText(t)/100}return n.cache[i+1]*r},checkLoadedFonts:function(){var t,e,r,n=this.fonts.length,i=n;for(t=0;t<n;t+=1)this.fonts[t].loaded?i-=1:"n"===this.fonts[t].fOrigin||0===this.fonts[t].origin?this.fonts[t].loaded=!0:(e=this.fonts[t].monoCase.node,r=this.fonts[t].monoCase.w,e.offsetWidth!==r?(i-=1,this.fonts[t].loaded=!0):(e=this.fonts[t].sansCase.node,r=this.fonts[t].sansCase.w,e.offsetWidth!==r&&(i-=1,this.fonts[t].loaded=!0)),this.fonts[t].loaded&&(this.fonts[t].sansCase.parent.parentNode.removeChild(this.fonts[t].sansCase.parent),this.fonts[t].monoCase.parent.parentNode.removeChild(this.fonts[t].monoCase.parent)));0!==i&&Date.now()-this.initTime<5e3?setTimeout(this.checkLoadedFontsBinded,20):setTimeout(this.setIsLoadedBinded,10)},setIsLoaded:function(){this.isLoaded=!0}};return s.prototype=o,s}();function RenderableElement(){}RenderableElement.prototype={initRenderable:function(){this.isInRange=!1,this.hidden=!1,this.isTransparent=!1,this.renderableComponents=[]},addRenderableComponent:function(t){-1===this.renderableComponents.indexOf(t)&&this.renderableComponents.push(t)},removeRenderableComponent:function(t){-1!==this.renderableComponents.indexOf(t)&&this.renderableComponents.splice(this.renderableComponents.indexOf(t),1)},prepareRenderableFrame:function(t){this.checkLayerLimits(t)},checkTransparency:function(){this.finalTransform.mProp.o.v<=0?!this.isTransparent&&this.globalData.renderConfig.hideOnTransparent&&(this.isTransparent=!0,this.hide()):this.isTransparent&&(this.isTransparent=!1,this.show())},checkLayerLimits:function(t){this.data.ip-this.data.st<=t&&this.data.op-this.data.st>t?!0!==this.isInRange&&(this.globalData._mdf=!0,this._mdf=!0,this.isInRange=!0,this.show()):!1!==this.isInRange&&(this.globalData._mdf=!0,this.isInRange=!1,this.hide())},renderRenderable:function(){var t,e=this.renderableComponents.length;for(t=0;t<e;t+=1)this.renderableComponents[t].renderFrame(this._isFirstFrame)},sourceRectAtTime:function(){return{top:0,left:0,width:100,height:100}},getLayerSize:function(){return 5===this.data.ty?{w:this.data.textData.width,h:this.data.textData.height}:{w:this.data.width,h:this.data.height}}};var MaskManagerInterface=function(){function t(t,e){this._mask=t,this._data=e}return Object.defineProperty(t.prototype,"maskPath",{get:function(){return this._mask.prop.k&&this._mask.prop.getValue(),this._mask.prop}}),Object.defineProperty(t.prototype,"maskOpacity",{get:function(){return this._mask.op.k&&this._mask.op.getValue(),100*this._mask.op.v}}),function(e){var r,n=createSizedArray(e.viewData.length),i=e.viewData.length;for(r=0;r<i;r+=1)n[r]=new t(e.viewData[r],e.masksProperties[r]);return function(t){for(r=0;r<i;){if(e.masksProperties[r].nm===t)return n[r];r+=1}return null}}}(),ExpressionPropertyInterface=function(){var t={pv:0,v:0,mult:1},e={pv:[0,0,0],v:[0,0,0],mult:1};function r(t,e,r){Object.defineProperty(t,"velocity",{get:function(){return e.getVelocityAtTime(e.comp.currentFrame)}}),t.numKeys=e.keyframes?e.keyframes.length:0,t.key=function(n){if(!t.numKeys)return 0;var i;i="s"in e.keyframes[n-1]?e.keyframes[n-1].s:"e"in e.keyframes[n-2]?e.keyframes[n-2].e:e.keyframes[n-2].s;var a="unidimensional"===r?new Number(i):Object.assign({},i);return a.time=e.keyframes[n-1].t/e.elem.comp.globalData.frameRate,a.value="unidimensional"===r?i[0]:i,a},t.valueAtTime=e.getValueAtTime,t.speedAtTime=e.getSpeedAtTime,t.velocityAtTime=e.getVelocityAtTime,t.propertyGroup=e.propertyGroup}function n(){return t}return function(i){return i?"unidimensional"===i.propType?function(e){e&&"pv"in e||(e=t);var n=1/e.mult,i=e.pv*n,a=new Number(i);return a.value=i,r(a,e,"unidimensional"),function(){return e.k&&e.getValue(),i=e.v*n,a.value!==i&&((a=new Number(i)).value=i,r(a,e,"unidimensional")),a}}(i):function(t){t&&"pv"in t||(t=e);var n=1/t.mult,i=t.data&&t.data.l||t.pv.length,a=createTypedArray("float32",i),s=createTypedArray("float32",i);return a.value=s,r(a,t,"multidimensional"),function(){t.k&&t.getValue();for(var e=0;e<i;e+=1)s[e]=t.v[e]*n,a[e]=s[e];return a}}(i):n}}(),TransformExpressionInterface=function(t){function e(t){switch(t){case"scale":case"Scale":case"ADBE Scale":case 6:return e.scale;case"rotation":case"Rotation":case"ADBE Rotation":case"ADBE Rotate Z":case 10:return e.rotation;case"ADBE Rotate X":return e.xRotation;case"ADBE Rotate Y":return e.yRotation;case"position":case"Position":case"ADBE Position":case 2:return e.position;case"ADBE Position_0":return e.xPosition;case"ADBE Position_1":return e.yPosition;case"ADBE Position_2":return e.zPosition;case"anchorPoint":case"AnchorPoint":case"Anchor Point":case"ADBE AnchorPoint":case 1:return e.anchorPoint;case"opacity":case"Opacity":case 11:return e.opacity;default:return null}}var r,n,i,a;return Object.defineProperty(e,"rotation",{get:ExpressionPropertyInterface(t.r||t.rz)}),Object.defineProperty(e,"zRotation",{get:ExpressionPropertyInterface(t.rz||t.r)}),Object.defineProperty(e,"xRotation",{get:ExpressionPropertyInterface(t.rx)}),Object.defineProperty(e,"yRotation",{get:ExpressionPropertyInterface(t.ry)}),Object.defineProperty(e,"scale",{get:ExpressionPropertyInterface(t.s)}),t.p?a=ExpressionPropertyInterface(t.p):(r=ExpressionPropertyInterface(t.px),n=ExpressionPropertyInterface(t.py),t.pz&&(i=ExpressionPropertyInterface(t.pz))),Object.defineProperty(e,"position",{get:function(){return t.p?a():[r(),n(),i?i():0]}}),Object.defineProperty(e,"xPosition",{get:ExpressionPropertyInterface(t.px)}),Object.defineProperty(e,"yPosition",{get:ExpressionPropertyInterface(t.py)}),Object.defineProperty(e,"zPosition",{get:ExpressionPropertyInterface(t.pz)}),Object.defineProperty(e,"anchorPoint",{get:ExpressionPropertyInterface(t.a)}),Object.defineProperty(e,"opacity",{get:ExpressionPropertyInterface(t.o)}),Object.defineProperty(e,"skew",{get:ExpressionPropertyInterface(t.sk)}),Object.defineProperty(e,"skewAxis",{get:ExpressionPropertyInterface(t.sa)}),Object.defineProperty(e,"orientation",{get:ExpressionPropertyInterface(t.or)}),e},LayerExpressionInterface=function(){function t(t){var e=new Matrix;return void 0!==t?this._elem.finalTransform.mProp.getValueAtTime(t).clone(e):this._elem.finalTransform.mProp.applyToMatrix(e),e}function e(t,e){var r=this.getMatrix(e);return r.props[12]=0,r.props[13]=0,r.props[14]=0,this.applyPoint(r,t)}function r(t,e){var r=this.getMatrix(e);return this.applyPoint(r,t)}function n(t,e){var r=this.getMatrix(e);return r.props[12]=0,r.props[13]=0,r.props[14]=0,this.invertPoint(r,t)}function i(t,e){var r=this.getMatrix(e);return this.invertPoint(r,t)}function a(t,e){if(this._elem.hierarchy&&this._elem.hierarchy.length){var r,n=this._elem.hierarchy.length;for(r=0;r<n;r+=1)this._elem.hierarchy[r].finalTransform.mProp.applyToMatrix(t)}return t.applyToPointArray(e[0],e[1],e[2]||0)}function s(t,e){if(this._elem.hierarchy&&this._elem.hierarchy.length){var r,n=this._elem.hierarchy.length;for(r=0;r<n;r+=1)this._elem.hierarchy[r].finalTransform.mProp.applyToMatrix(t)}return t.inversePoint(e)}function o(t){var e=new Matrix;if(e.reset(),this._elem.finalTransform.mProp.applyToMatrix(e),this._elem.hierarchy&&this._elem.hierarchy.length){var r,n=this._elem.hierarchy.length;for(r=0;r<n;r+=1)this._elem.hierarchy[r].finalTransform.mProp.applyToMatrix(e);return e.inversePoint(t)}return e.inversePoint(t)}function l(){return[1,1,1,1]}return function(h){var u;function c(t){switch(t){case"ADBE Root Vectors Group":case"Contents":case 2:return c.shapeInterface;case 1:case 6:case"Transform":case"transform":case"ADBE Transform Group":return u;case 4:case"ADBE Effect Parade":case"effects":case"Effects":return c.effect;case"ADBE Text Properties":return c.textInterface;default:return null}}c.getMatrix=t,c.invertPoint=s,c.applyPoint=a,c.toWorld=r,c.toWorldVec=e,c.fromWorld=i,c.fromWorldVec=n,c.toComp=r,c.fromComp=o,c.sampleImage=l,c.sourceRectAtTime=h.sourceRectAtTime.bind(h),c._elem=h;var p=getDescriptor(u=TransformExpressionInterface(h.finalTransform.mProp),"anchorPoint");return Object.defineProperties(c,{hasParent:{get:function(){return h.hierarchy.length}},parent:{get:function(){return h.hierarchy[0].layerInterface}},rotation:getDescriptor(u,"rotation"),scale:getDescriptor(u,"scale"),position:getDescriptor(u,"position"),opacity:getDescriptor(u,"opacity"),anchorPoint:p,anchor_point:p,transform:{get:function(){return u}},active:{get:function(){return h.isInRange}}}),c.startTime=h.data.st,c.index=h.data.ind,c.source=h.data.refId,c.height=0===h.data.ty?h.data.h:100,c.width=0===h.data.ty?h.data.w:100,c.inPoint=h.data.ip/h.comp.globalData.frameRate,c.outPoint=h.data.op/h.comp.globalData.frameRate,c._name=h.data.nm,c.registerMaskInterface=function(t){c.mask=new MaskManagerInterface(t,h)},c.registerEffectsInterface=function(t){c.effect=t},c}}(),propertyGroupFactory=function(t,e){return function(r){return(r=void 0===r?1:r)<=0?t:e(r-1)}},PropertyInterface=function(t,e){var r={_name:t};return function(t){return(t=void 0===t?1:t)<=0?r:e(t-1)}},EffectsExpressionInterface=function(){function t(r,n,i,a){function s(t){for(var e=r.ef,n=0,i=e.length;n<i;){if(t===e[n].nm||t===e[n].mn||t===e[n].ix)return 5===e[n].ty?h[n]:h[n]();n+=1}throw new Error}var o,l=propertyGroupFactory(s,i),h=[],u=r.ef.length;for(o=0;o<u;o+=1)5===r.ef[o].ty?h.push(t(r.ef[o],n.effectElements[o],n.effectElements[o].propertyGroup,a)):h.push(e(n.effectElements[o],r.ef[o].ty,a,l));return"ADBE Color Control"===r.mn&&Object.defineProperty(s,"color",{get:function(){return h[0]()}}),Object.defineProperties(s,{numProperties:{get:function(){return r.np}},_name:{value:r.nm},propertyGroup:{value:l}}),s.enabled=0!==r.en,s.active=s.enabled,s}function e(t,e,r,n){var i=ExpressionPropertyInterface(t.p);return t.p.setGroupProperty&&t.p.setGroupProperty(PropertyInterface("",n)),function(){return 10===e?r.comp.compInterface(t.p.v):i()}}return{createEffectsInterface:function(e,r){if(e.effectsManager){var n,i=[],a=e.data.ef,s=e.effectsManager.effectElements.length;for(n=0;n<s;n+=1)i.push(t(a[n],e.effectsManager.effectElements[n],r,e));var o=e.data.ef||[],l=function(t){for(n=0,s=o.length;n<s;){if(t===o[n].nm||t===o[n].mn||t===o[n].ix)return i[n];n+=1}return null};return Object.defineProperty(l,"numProperties",{get:function(){return o.length}}),l}return null}}}(),CompExpressionInterface=function(t){function e(e){for(var r=0,n=t.layers.length;r<n;){if(t.layers[r].nm===e||t.layers[r].ind===e)return t.elements[r].layerInterface;r+=1}return null}return Object.defineProperty(e,"_name",{value:t.data.nm}),e.layer=e,e.pixelAspect=1,e.height=t.data.h||t.globalData.compSize.h,e.width=t.data.w||t.globalData.compSize.w,e.pixelAspect=1,e.frameDuration=1/t.globalData.frameRate,e.displayStartTime=0,e.numLayers=t.layers.length,e},ShapePathInterface=function(t,e,r){var n=e.sh;function i(t){return"Shape"===t||"shape"===t||"Path"===t||"path"===t||"ADBE Vector Shape"===t||2===t?i.path:null}var a=propertyGroupFactory(i,r);return n.setGroupProperty(PropertyInterface("Path",a)),Object.defineProperties(i,{path:{get:function(){return n.k&&n.getValue(),n}},shape:{get:function(){return n.k&&n.getValue(),n}},_name:{value:t.nm},ix:{value:t.ix},propertyIndex:{value:t.ix},mn:{value:t.mn},propertyGroup:{value:r}}),i},ShapeExpressionInterface=function(){function t(t,s,p){var f,d=[],m=t?t.length:0;for(f=0;f<m;f+=1)"gr"===t[f].ty?d.push(e(t[f],s[f],p)):"fl"===t[f].ty?d.push(r(t[f],s[f],p)):"st"===t[f].ty?d.push(i(t[f],s[f],p)):"tm"===t[f].ty?d.push(a(t[f],s[f],p)):"tr"===t[f].ty||("el"===t[f].ty?d.push(o(t[f],s[f],p)):"sr"===t[f].ty?d.push(l(t[f],s[f],p)):"sh"===t[f].ty?d.push(ShapePathInterface(t[f],s[f],p)):"rc"===t[f].ty?d.push(h(t[f],s[f],p)):"rd"===t[f].ty?d.push(u(t[f],s[f],p)):"rp"===t[f].ty?d.push(c(t[f],s[f],p)):"gf"===t[f].ty?d.push(n(t[f],s[f],p)):d.push((t[f],s[f],function(){return null})));return d}function e(e,r,n){var i=function(t){switch(t){case"ADBE Vectors Group":case"Contents":case 2:return i.content;default:return i.transform}};i.propertyGroup=propertyGroupFactory(i,n);var a=function(e,r,n){var i,a=function(t){for(var e=0,r=i.length;e<r;){if(i[e]._name===t||i[e].mn===t||i[e].propertyIndex===t||i[e].ix===t||i[e].ind===t)return i[e];e+=1}return"number"==typeof t?i[t-1]:null};a.propertyGroup=propertyGroupFactory(a,n),i=t(e.it,r.it,a.propertyGroup),a.numProperties=i.length;var o=s(e.it[e.it.length-1],r.it[r.it.length-1],a.propertyGroup);return a.transform=o,a.propertyIndex=e.cix,a._name=e.nm,a}(e,r,i.propertyGroup),o=s(e.it[e.it.length-1],r.it[r.it.length-1],i.propertyGroup);return i.content=a,i.transform=o,Object.defineProperty(i,"_name",{get:function(){return e.nm}}),i.numProperties=e.np,i.propertyIndex=e.ix,i.nm=e.nm,i.mn=e.mn,i}function r(t,e,r){function n(t){return"Color"===t||"color"===t?n.color:"Opacity"===t||"opacity"===t?n.opacity:null}return Object.defineProperties(n,{color:{get:ExpressionPropertyInterface(e.c)},opacity:{get:ExpressionPropertyInterface(e.o)},_name:{value:t.nm},mn:{value:t.mn}}),e.c.setGroupProperty(PropertyInterface("Color",r)),e.o.setGroupProperty(PropertyInterface("Opacity",r)),n}function n(t,e,r){function n(t){return"Start Point"===t||"start point"===t?n.startPoint:"End Point"===t||"end point"===t?n.endPoint:"Opacity"===t||"opacity"===t?n.opacity:null}return Object.defineProperties(n,{startPoint:{get:ExpressionPropertyInterface(e.s)},endPoint:{get:ExpressionPropertyInterface(e.e)},opacity:{get:ExpressionPropertyInterface(e.o)},type:{get:function(){return"a"}},_name:{value:t.nm},mn:{value:t.mn}}),e.s.setGroupProperty(PropertyInterface("Start Point",r)),e.e.setGroupProperty(PropertyInterface("End Point",r)),e.o.setGroupProperty(PropertyInterface("Opacity",r)),n}function i(t,e,r){var n,i=propertyGroupFactory(h,r),a=propertyGroupFactory(l,i);function s(r){Object.defineProperty(l,t.d[r].nm,{get:ExpressionPropertyInterface(e.d.dataProps[r].p)})}var o=t.d?t.d.length:0,l={};for(n=0;n<o;n+=1)s(n),e.d.dataProps[n].p.setGroupProperty(a);function h(t){return"Color"===t||"color"===t?h.color:"Opacity"===t||"opacity"===t?h.opacity:"Stroke Width"===t||"stroke width"===t?h.strokeWidth:null}return Object.defineProperties(h,{color:{get:ExpressionPropertyInterface(e.c)},opacity:{get:ExpressionPropertyInterface(e.o)},strokeWidth:{get:ExpressionPropertyInterface(e.w)},dash:{get:function(){return l}},_name:{value:t.nm},mn:{value:t.mn}}),e.c.setGroupProperty(PropertyInterface("Color",i)),e.o.setGroupProperty(PropertyInterface("Opacity",i)),e.w.setGroupProperty(PropertyInterface("Stroke Width",i)),h}function a(t,e,r){function n(e){return e===t.e.ix||"End"===e||"end"===e?n.end:e===t.s.ix?n.start:e===t.o.ix?n.offset:null}var i=propertyGroupFactory(n,r);return n.propertyIndex=t.ix,e.s.setGroupProperty(PropertyInterface("Start",i)),e.e.setGroupProperty(PropertyInterface("End",i)),e.o.setGroupProperty(PropertyInterface("Offset",i)),n.propertyIndex=t.ix,n.propertyGroup=r,Object.defineProperties(n,{start:{get:ExpressionPropertyInterface(e.s)},end:{get:ExpressionPropertyInterface(e.e)},offset:{get:ExpressionPropertyInterface(e.o)},_name:{value:t.nm}}),n.mn=t.mn,n}function s(t,e,r){function n(e){return t.a.ix===e||"Anchor Point"===e?n.anchorPoint:t.o.ix===e||"Opacity"===e?n.opacity:t.p.ix===e||"Position"===e?n.position:t.r.ix===e||"Rotation"===e||"ADBE Vector Rotation"===e?n.rotation:t.s.ix===e||"Scale"===e?n.scale:t.sk&&t.sk.ix===e||"Skew"===e?n.skew:t.sa&&t.sa.ix===e||"Skew Axis"===e?n.skewAxis:null}var i=propertyGroupFactory(n,r);return e.transform.mProps.o.setGroupProperty(PropertyInterface("Opacity",i)),e.transform.mProps.p.setGroupProperty(PropertyInterface("Position",i)),e.transform.mProps.a.setGroupProperty(PropertyInterface("Anchor Point",i)),e.transform.mProps.s.setGroupProperty(PropertyInterface("Scale",i)),e.transform.mProps.r.setGroupProperty(PropertyInterface("Rotation",i)),e.transform.mProps.sk&&(e.transform.mProps.sk.setGroupProperty(PropertyInterface("Skew",i)),e.transform.mProps.sa.setGroupProperty(PropertyInterface("Skew Angle",i))),e.transform.op.setGroupProperty(PropertyInterface("Opacity",i)),Object.defineProperties(n,{opacity:{get:ExpressionPropertyInterface(e.transform.mProps.o)},position:{get:ExpressionPropertyInterface(e.transform.mProps.p)},anchorPoint:{get:ExpressionPropertyInterface(e.transform.mProps.a)},scale:{get:ExpressionPropertyInterface(e.transform.mProps.s)},rotation:{get:ExpressionPropertyInterface(e.transform.mProps.r)},skew:{get:ExpressionPropertyInterface(e.transform.mProps.sk)},skewAxis:{get:ExpressionPropertyInterface(e.transform.mProps.sa)},_name:{value:t.nm}}),n.ty="tr",n.mn=t.mn,n.propertyGroup=r,n}function o(t,e,r){function n(e){return t.p.ix===e?n.position:t.s.ix===e?n.size:null}var i=propertyGroupFactory(n,r);n.propertyIndex=t.ix;var a="tm"===e.sh.ty?e.sh.prop:e.sh;return a.s.setGroupProperty(PropertyInterface("Size",i)),a.p.setGroupProperty(PropertyInterface("Position",i)),Object.defineProperties(n,{size:{get:ExpressionPropertyInterface(a.s)},position:{get:ExpressionPropertyInterface(a.p)},_name:{value:t.nm}}),n.mn=t.mn,n}function l(t,e,r){function n(e){return t.p.ix===e?n.position:t.r.ix===e?n.rotation:t.pt.ix===e?n.points:t.or.ix===e||"ADBE Vector Star Outer Radius"===e?n.outerRadius:t.os.ix===e?n.outerRoundness:!t.ir||t.ir.ix!==e&&"ADBE Vector Star Inner Radius"!==e?t.is&&t.is.ix===e?n.innerRoundness:null:n.innerRadius}var i=propertyGroupFactory(n,r),a="tm"===e.sh.ty?e.sh.prop:e.sh;return n.propertyIndex=t.ix,a.or.setGroupProperty(PropertyInterface("Outer Radius",i)),a.os.setGroupProperty(PropertyInterface("Outer Roundness",i)),a.pt.setGroupProperty(PropertyInterface("Points",i)),a.p.setGroupProperty(PropertyInterface("Position",i)),a.r.setGroupProperty(PropertyInterface("Rotation",i)),t.ir&&(a.ir.setGroupProperty(PropertyInterface("Inner Radius",i)),a.is.setGroupProperty(PropertyInterface("Inner Roundness",i))),Object.defineProperties(n,{position:{get:ExpressionPropertyInterface(a.p)},rotation:{get:ExpressionPropertyInterface(a.r)},points:{get:ExpressionPropertyInterface(a.pt)},outerRadius:{get:ExpressionPropertyInterface(a.or)},outerRoundness:{get:ExpressionPropertyInterface(a.os)},innerRadius:{get:ExpressionPropertyInterface(a.ir)},innerRoundness:{get:ExpressionPropertyInterface(a.is)},_name:{value:t.nm}}),n.mn=t.mn,n}function h(t,e,r){function n(e){return t.p.ix===e?n.position:t.r.ix===e?n.roundness:t.s.ix===e||"Size"===e||"ADBE Vector Rect Size"===e?n.size:null}var i=propertyGroupFactory(n,r),a="tm"===e.sh.ty?e.sh.prop:e.sh;return n.propertyIndex=t.ix,a.p.setGroupProperty(PropertyInterface("Position",i)),a.s.setGroupProperty(PropertyInterface("Size",i)),a.r.setGroupProperty(PropertyInterface("Rotation",i)),Object.defineProperties(n,{position:{get:ExpressionPropertyInterface(a.p)},roundness:{get:ExpressionPropertyInterface(a.r)},size:{get:ExpressionPropertyInterface(a.s)},_name:{value:t.nm}}),n.mn=t.mn,n}function u(t,e,r){function n(e){return t.r.ix===e||"Round Corners 1"===e?n.radius:null}var i=propertyGroupFactory(n,r),a=e;return n.propertyIndex=t.ix,a.rd.setGroupProperty(PropertyInterface("Radius",i)),Object.defineProperties(n,{radius:{get:ExpressionPropertyInterface(a.rd)},_name:{value:t.nm}}),n.mn=t.mn,n}function c(t,e,r){function n(e){return t.c.ix===e||"Copies"===e?n.copies:t.o.ix===e||"Offset"===e?n.offset:null}var i=propertyGroupFactory(n,r),a=e;return n.propertyIndex=t.ix,a.c.setGroupProperty(PropertyInterface("Copies",i)),a.o.setGroupProperty(PropertyInterface("Offset",i)),Object.defineProperties(n,{copies:{get:ExpressionPropertyInterface(a.c)},offset:{get:ExpressionPropertyInterface(a.o)},_name:{value:t.nm}}),n.mn=t.mn,n}return function(e,r,n){var i;function a(t){if("number"==typeof t)return 0===(t=void 0===t?1:t)?n:i[t-1];for(var e=0,r=i.length;e<r;){if(i[e]._name===t)return i[e];e+=1}return null}return a.propertyGroup=propertyGroupFactory(a,(function(){return n})),i=t(e,r,a.propertyGroup),a.numProperties=i.length,a._name="Contents",a}}(),TextExpressionInterface=function(t){var e,r;function n(t){return"ADBE Text Document"===t?n.sourceText:null}return Object.defineProperty(n,"sourceText",{get:function(){t.textProperty.getValue();var n=t.textProperty.currentData.t;return n!==e&&(t.textProperty.currentData.t=e,(r=new String(n)).value=n||new String(n)),r}}),n},getBlendMode=(blendModeEnums={0:"source-over",1:"multiply",2:"screen",3:"overlay",4:"darken",5:"lighten",6:"color-dodge",7:"color-burn",8:"hard-light",9:"soft-light",10:"difference",11:"exclusion",12:"hue",13:"saturation",14:"color",15:"luminosity"},function(t){return blendModeEnums[t]||""}),blendModeEnums;function SliderEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function AngleEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function ColorEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,1,0,r)}function PointEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,1,0,r)}function LayerIndexEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function MaskIndexEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function CheckboxEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function NoValueEffect(){this.p={}}function EffectsManager(t,e){var r,n=t.ef||[];this.effectElements=[];var i,a=n.length;for(r=0;r<a;r+=1)i=new GroupEffect(n[r],e),this.effectElements.push(i)}function GroupEffect(t,e){this.init(t,e)}function BaseElement(){}function FrameElement(){}function _typeof$2(t){return _typeof$2="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$2(t)}extendPrototype([DynamicPropertyContainer],GroupEffect),GroupEffect.prototype.getValue=GroupEffect.prototype.iterateDynamicProperties,GroupEffect.prototype.init=function(t,e){var r;this.data=t,this.effectElements=[],this.initDynamicPropertyContainer(e);var n,i=this.data.ef.length,a=this.data.ef;for(r=0;r<i;r+=1){switch(n=null,a[r].ty){case 0:n=new SliderEffect(a[r],e,this);break;case 1:n=new AngleEffect(a[r],e,this);break;case 2:n=new ColorEffect(a[r],e,this);break;case 3:n=new PointEffect(a[r],e,this);break;case 4:case 7:n=new CheckboxEffect(a[r],e,this);break;case 10:n=new LayerIndexEffect(a[r],e,this);break;case 11:n=new MaskIndexEffect(a[r],e,this);break;case 5:n=new EffectsManager(a[r],e,this);break;default:n=new NoValueEffect(a[r],e,this)}n&&this.effectElements.push(n)}},BaseElement.prototype={checkMasks:function(){if(!this.data.hasMask)return!1;for(var t=0,e=this.data.masksProperties.length;t<e;){if("n"!==this.data.masksProperties[t].mode&&!1!==this.data.masksProperties[t].cl)return!0;t+=1}return!1},initExpressions:function(){this.layerInterface=LayerExpressionInterface(this),this.data.hasMask&&this.maskManager&&this.layerInterface.registerMaskInterface(this.maskManager);var t=EffectsExpressionInterface.createEffectsInterface(this,this.layerInterface);this.layerInterface.registerEffectsInterface(t),0===this.data.ty||this.data.xt?this.compInterface=CompExpressionInterface(this):4===this.data.ty?(this.layerInterface.shapeInterface=ShapeExpressionInterface(this.shapesData,this.itemsData,this.layerInterface),this.layerInterface.content=this.layerInterface.shapeInterface):5===this.data.ty&&(this.layerInterface.textInterface=TextExpressionInterface(this),this.layerInterface.text=this.layerInterface.textInterface)},setBlendMode:function(){var t=getBlendMode(this.data.bm);(this.baseElement||this.layerElement).style["mix-blend-mode"]=t},initBaseData:function(t,e,r){this.globalData=e,this.comp=r,this.data=t,this.layerId=createElementID(),this.data.sr||(this.data.sr=1),this.effectsManager=new EffectsManager(this.data,this,this.dynamicProperties)},getType:function(){return this.type},sourceRectAtTime:function(){}},FrameElement.prototype={initFrame:function(){this._isFirstFrame=!1,this.dynamicProperties=[],this._mdf=!1},prepareProperties:function(t,e){var r,n=this.dynamicProperties.length;for(r=0;r<n;r+=1)(e||this._isParent&&"transform"===this.dynamicProperties[r].propType)&&(this.dynamicProperties[r].getValue(),this.dynamicProperties[r]._mdf&&(this.globalData._mdf=!0,this._mdf=!0))},addDynamicProperty:function(t){-1===this.dynamicProperties.indexOf(t)&&this.dynamicProperties.push(t)}};var FootageInterface=(dataInterfaceFactory=function(t){function e(t){return"Outline"===t?e.outlineInterface():null}return e._name="Outline",e.outlineInterface=function(t){var e="",r=t.getFootageData();function n(t){if(r[t])return e=t,"object"===_typeof$2(r=r[t])?n:r;var i=t.indexOf(e);if(-1!==i){var a=parseInt(t.substr(i+e.length),10);return"object"===_typeof$2(r=r[a])?n:r}return""}return function(){return e="",r=t.getFootageData(),n}}(t),e},function(t){function e(t){return"Data"===t?e.dataInterface:null}return e._name="Data",e.dataInterface=dataInterfaceFactory(t),e}),dataInterfaceFactory;function FootageElement(t,e,r){this.initFrame(),this.initRenderable(),this.assetData=e.getAssetData(t.refId),this.footageData=e.imageLoader.getAsset(this.assetData),this.initBaseData(t,e,r)}function AudioElement(t,e,r){this.initFrame(),this.initRenderable(),this.assetData=e.getAssetData(t.refId),this.initBaseData(t,e,r),this._isPlaying=!1,this._canPlay=!1;var n=this.globalData.getAssetsPath(this.assetData);this.audio=this.globalData.audioController.createAudio(n),this._currentTime=0,this.globalData.audioController.addAudio(this),this._volumeMultiplier=1,this._volume=1,this._previousVolume=null,this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0},this.lv=PropertyFactory.getProp(this,t.au&&t.au.lv?t.au.lv:{k:[100]},1,.01,this)}function BaseRenderer(){}function TransformElement(){}function MaskElement(t,e,r){this.data=t,this.element=e,this.globalData=r,this.storedData=[],this.masksProperties=this.data.masksProperties||[],this.maskElement=null;var n,i,a=this.globalData.defs,s=this.masksProperties?this.masksProperties.length:0;this.viewData=createSizedArray(s),this.solidPath="";var o,l,h,u,c,p,f=this.masksProperties,d=0,m=[],g=createElementID(),y="clipPath",v="clip-path";for(n=0;n<s;n+=1)if(("a"!==f[n].mode&&"n"!==f[n].mode||f[n].inv||100!==f[n].o.k||f[n].o.x)&&(y="mask",v="mask"),"s"!==f[n].mode&&"i"!==f[n].mode||0!==d?h=null:((h=createNS("rect")).setAttribute("fill","#ffffff"),h.setAttribute("width",this.element.comp.data.w||0),h.setAttribute("height",this.element.comp.data.h||0),m.push(h)),i=createNS("path"),"n"===f[n].mode)this.viewData[n]={op:PropertyFactory.getProp(this.element,f[n].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,f[n],3),elem:i,lastPath:""},a.appendChild(i);else{var b;if(d+=1,i.setAttribute("fill","s"===f[n].mode?"#000000":"#ffffff"),i.setAttribute("clip-rule","nonzero"),0!==f[n].x.k?(y="mask",v="mask",p=PropertyFactory.getProp(this.element,f[n].x,0,null,this.element),b=createElementID(),(u=createNS("filter")).setAttribute("id",b),(c=createNS("feMorphology")).setAttribute("operator","erode"),c.setAttribute("in","SourceGraphic"),c.setAttribute("radius","0"),u.appendChild(c),a.appendChild(u),i.setAttribute("stroke","s"===f[n].mode?"#000000":"#ffffff")):(c=null,p=null),this.storedData[n]={elem:i,x:p,expan:c,lastPath:"",lastOperator:"",filterId:b,lastRadius:0},"i"===f[n].mode){l=m.length;var w=createNS("g");for(o=0;o<l;o+=1)w.appendChild(m[o]);var x=createNS("mask");x.setAttribute("mask-type","alpha"),x.setAttribute("id",g+"_"+d),x.appendChild(i),a.appendChild(x),w.setAttribute("mask","url("+getLocationHref()+"#"+g+"_"+d+")"),m.length=0,m.push(w)}else m.push(i);f[n].inv&&!this.solidPath&&(this.solidPath=this.createLayerSolidPath()),this.viewData[n]={elem:i,lastPath:"",op:PropertyFactory.getProp(this.element,f[n].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,f[n],3),invRect:h},this.viewData[n].prop.k||this.drawPath(f[n],this.viewData[n].prop.v,this.viewData[n])}for(this.maskElement=createNS(y),s=m.length,n=0;n<s;n+=1)this.maskElement.appendChild(m[n]);d>0&&(this.maskElement.setAttribute("id",g),this.element.maskedElement.setAttribute(v,"url("+getLocationHref()+"#"+g+")"),a.appendChild(this.maskElement)),this.viewData.length&&this.element.addRenderableComponent(this)}FootageElement.prototype.prepareFrame=function(){},extendPrototype([RenderableElement,BaseElement,FrameElement],FootageElement),FootageElement.prototype.getBaseElement=function(){return null},FootageElement.prototype.renderFrame=function(){},FootageElement.prototype.destroy=function(){},FootageElement.prototype.initExpressions=function(){this.layerInterface=FootageInterface(this)},FootageElement.prototype.getFootageData=function(){return this.footageData},AudioElement.prototype.prepareFrame=function(t){if(this.prepareRenderableFrame(t,!0),this.prepareProperties(t,!0),this.tm._placeholder)this._currentTime=t/this.data.sr;else{var e=this.tm.v;this._currentTime=e}this._volume=this.lv.v[0];var r=this._volume*this._volumeMultiplier;this._previousVolume!==r&&(this._previousVolume=r,this.audio.volume(r))},extendPrototype([RenderableElement,BaseElement,FrameElement],AudioElement),AudioElement.prototype.renderFrame=function(){this.isInRange&&this._canPlay&&(this._isPlaying?(!this.audio.playing()||Math.abs(this._currentTime/this.globalData.frameRate-this.audio.seek())>.1)&&this.audio.seek(this._currentTime/this.globalData.frameRate):(this.audio.play(),this.audio.seek(this._currentTime/this.globalData.frameRate),this._isPlaying=!0))},AudioElement.prototype.show=function(){},AudioElement.prototype.hide=function(){this.audio.pause(),this._isPlaying=!1},AudioElement.prototype.pause=function(){this.audio.pause(),this._isPlaying=!1,this._canPlay=!1},AudioElement.prototype.resume=function(){this._canPlay=!0},AudioElement.prototype.setRate=function(t){this.audio.rate(t)},AudioElement.prototype.volume=function(t){this._volumeMultiplier=t,this._previousVolume=t*this._volume,this.audio.volume(this._previousVolume)},AudioElement.prototype.getBaseElement=function(){return null},AudioElement.prototype.destroy=function(){},AudioElement.prototype.sourceRectAtTime=function(){},AudioElement.prototype.initExpressions=function(){},BaseRenderer.prototype.checkLayers=function(t){var e,r,n=this.layers.length;for(this.completeLayers=!0,e=n-1;e>=0;e-=1)this.elements[e]||(r=this.layers[e]).ip-r.st<=t-this.layers[e].st&&r.op-r.st>t-this.layers[e].st&&this.buildItem(e),this.completeLayers=!!this.elements[e]&&this.completeLayers;this.checkPendingElements()},BaseRenderer.prototype.createItem=function(t){switch(t.ty){case 2:return this.createImage(t);case 0:return this.createComp(t);case 1:return this.createSolid(t);case 3:default:return this.createNull(t);case 4:return this.createShape(t);case 5:return this.createText(t);case 6:return this.createAudio(t);case 13:return this.createCamera(t);case 15:return this.createFootage(t)}},BaseRenderer.prototype.createCamera=function(){throw new Error("You're using a 3d camera. Try the html renderer.")},BaseRenderer.prototype.createAudio=function(t){return new AudioElement(t,this.globalData,this)},BaseRenderer.prototype.createFootage=function(t){return new FootageElement(t,this.globalData,this)},BaseRenderer.prototype.buildAllItems=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)this.buildItem(t);this.checkPendingElements()},BaseRenderer.prototype.includeLayers=function(t){var e;this.completeLayers=!1;var r,n=t.length,i=this.layers.length;for(e=0;e<n;e+=1)for(r=0;r<i;){if(this.layers[r].id===t[e].id){this.layers[r]=t[e];break}r+=1}},BaseRenderer.prototype.setProjectInterface=function(t){this.globalData.projectInterface=t},BaseRenderer.prototype.initItems=function(){this.globalData.progressiveLoad||this.buildAllItems()},BaseRenderer.prototype.buildElementParenting=function(t,e,r){for(var n=this.elements,i=this.layers,a=0,s=i.length;a<s;)i[a].ind==e&&(n[a]&&!0!==n[a]?(r.push(n[a]),n[a].setAsParent(),void 0!==i[a].parent?this.buildElementParenting(t,i[a].parent,r):t.setHierarchy(r)):(this.buildItem(a),this.addPendingElement(t))),a+=1},BaseRenderer.prototype.addPendingElement=function(t){this.pendingElements.push(t)},BaseRenderer.prototype.searchExtraCompositions=function(t){var e,r=t.length;for(e=0;e<r;e+=1)if(t[e].xt){var n=this.createComp(t[e]);n.initExpressions(),this.globalData.projectInterface.registerComposition(n)}},BaseRenderer.prototype.getElementByPath=function(t){var e,r=t.shift();if("number"==typeof r)e=this.elements[r];else{var n,i=this.elements.length;for(n=0;n<i;n+=1)if(this.elements[n].data.nm===r){e=this.elements[n];break}}return 0===t.length?e:e.getElementByPath(t)},BaseRenderer.prototype.setupGlobalData=function(t,e){this.globalData.fontManager=new FontManager,this.globalData.fontManager.addChars(t.chars),this.globalData.fontManager.addFonts(t.fonts,e),this.globalData.getAssetData=this.animationItem.getAssetData.bind(this.animationItem),this.globalData.getAssetsPath=this.animationItem.getAssetsPath.bind(this.animationItem),this.globalData.imageLoader=this.animationItem.imagePreloader,this.globalData.audioController=this.animationItem.audioController,this.globalData.frameId=0,this.globalData.frameRate=t.fr,this.globalData.nm=t.nm,this.globalData.compSize={w:t.w,h:t.h}},TransformElement.prototype={initTransform:function(){this.finalTransform={mProp:this.data.ks?TransformPropertyFactory.getTransformProperty(this,this.data.ks,this):{o:0},_matMdf:!1,_opMdf:!1,mat:new Matrix},this.data.ao&&(this.finalTransform.mProp.autoOriented=!0),this.data.ty},renderTransform:function(){if(this.finalTransform._opMdf=this.finalTransform.mProp.o._mdf||this._isFirstFrame,this.finalTransform._matMdf=this.finalTransform.mProp._mdf||this._isFirstFrame,this.hierarchy){var t,e=this.finalTransform.mat,r=0,n=this.hierarchy.length;if(!this.finalTransform._matMdf)for(;r<n;){if(this.hierarchy[r].finalTransform.mProp._mdf){this.finalTransform._matMdf=!0;break}r+=1}if(this.finalTransform._matMdf)for(t=this.finalTransform.mProp.v.props,e.cloneFromProps(t),r=0;r<n;r+=1)t=this.hierarchy[r].finalTransform.mProp.v.props,e.transform(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])}},globalToLocal:function(t){var e=[];e.push(this.finalTransform);for(var r,n=!0,i=this.comp;n;)i.finalTransform?(i.data.hasMask&&e.splice(0,0,i.finalTransform),i=i.comp):n=!1;var a,s=e.length;for(r=0;r<s;r+=1)a=e[r].mat.applyToPointArray(0,0,0),t=[t[0]-a[0],t[1]-a[1],0];return t},mHelper:new Matrix},MaskElement.prototype.getMaskProperty=function(t){return this.viewData[t].prop},MaskElement.prototype.renderFrame=function(t){var e,r=this.element.finalTransform.mat,n=this.masksProperties.length;for(e=0;e<n;e+=1)if((this.viewData[e].prop._mdf||t)&&this.drawPath(this.masksProperties[e],this.viewData[e].prop.v,this.viewData[e]),(this.viewData[e].op._mdf||t)&&this.viewData[e].elem.setAttribute("fill-opacity",this.viewData[e].op.v),"n"!==this.masksProperties[e].mode&&(this.viewData[e].invRect&&(this.element.finalTransform.mProp._mdf||t)&&this.viewData[e].invRect.setAttribute("transform",r.getInverseMatrix().to2dCSS()),this.storedData[e].x&&(this.storedData[e].x._mdf||t))){var i=this.storedData[e].expan;this.storedData[e].x.v<0?("erode"!==this.storedData[e].lastOperator&&(this.storedData[e].lastOperator="erode",this.storedData[e].elem.setAttribute("filter","url("+getLocationHref()+"#"+this.storedData[e].filterId+")")),i.setAttribute("radius",-this.storedData[e].x.v)):("dilate"!==this.storedData[e].lastOperator&&(this.storedData[e].lastOperator="dilate",this.storedData[e].elem.setAttribute("filter",null)),this.storedData[e].elem.setAttribute("stroke-width",2*this.storedData[e].x.v))}},MaskElement.prototype.getMaskelement=function(){return this.maskElement},MaskElement.prototype.createLayerSolidPath=function(){var t="M0,0 ";return t+=" h"+this.globalData.compSize.w,t+=" v"+this.globalData.compSize.h,(t+=" h-"+this.globalData.compSize.w)+" v-"+this.globalData.compSize.h+" "},MaskElement.prototype.drawPath=function(t,e,r){var n,i,a=" M"+e.v[0][0]+","+e.v[0][1];for(i=e._length,n=1;n<i;n+=1)a+=" C"+e.o[n-1][0]+","+e.o[n-1][1]+" "+e.i[n][0]+","+e.i[n][1]+" "+e.v[n][0]+","+e.v[n][1];if(e.c&&i>1&&(a+=" C"+e.o[n-1][0]+","+e.o[n-1][1]+" "+e.i[0][0]+","+e.i[0][1]+" "+e.v[0][0]+","+e.v[0][1]),r.lastPath!==a){var s="";r.elem&&(e.c&&(s=t.inv?this.solidPath+a:a),r.elem.setAttribute("d",s)),r.lastPath=a}},MaskElement.prototype.destroy=function(){this.element=null,this.globalData=null,this.maskElement=null,this.data=null,this.masksProperties=null};var filtersFactory={createFilter:function(t,e){var r=createNS("filter");return r.setAttribute("id",t),!0!==e&&(r.setAttribute("filterUnits","objectBoundingBox"),r.setAttribute("x","0%"),r.setAttribute("y","0%"),r.setAttribute("width","100%"),r.setAttribute("height","100%")),r},createAlphaToLuminanceFilter:function(){var t=createNS("feColorMatrix");return t.setAttribute("type","matrix"),t.setAttribute("color-interpolation-filters","sRGB"),t.setAttribute("values","0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1"),t}},featureSupport=function(){var t={maskType:!0};return(/MSIE 10/i.test(navigator.userAgent)||/MSIE 9/i.test(navigator.userAgent)||/rv:11.0/i.test(navigator.userAgent)||/Edge\/\d./i.test(navigator.userAgent))&&(t.maskType=!1),t}(),registeredEffects={},idPrefix="filter_result_";function SVGEffects(t){var e,r,n="SourceGraphic",i=t.data.ef?t.data.ef.length:0,a=createElementID(),s=filtersFactory.createFilter(a,!0),o=0;for(this.filters=[],e=0;e<i;e+=1){r=null;var l=t.data.ef[e].ty;registeredEffects[l]&&(r=new(0,registeredEffects[l].effect)(s,t.effectsManager.effectElements[e],t,idPrefix+o,n),n=idPrefix+o,registeredEffects[l].countsAsEffect&&(o+=1)),r&&this.filters.push(r)}o&&(t.globalData.defs.appendChild(s),t.layerElement.setAttribute("filter","url("+getLocationHref()+"#"+a+")")),this.filters.length&&t.addRenderableComponent(this)}function registerEffect(t,e,r){registeredEffects[t]={effect:e,countsAsEffect:r}}function SVGBaseElement(){}function HierarchyElement(){}function RenderableDOMElement(){}function IImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.initElement(t,e,r),this.sourceRect={top:0,left:0,width:this.assetData.w,height:this.assetData.h}}function ProcessedElement(t,e){this.elem=t,this.pos=e}function IShapeElement(){}SVGEffects.prototype.renderFrame=function(t){var e,r=this.filters.length;for(e=0;e<r;e+=1)this.filters[e].renderFrame(t)},SVGBaseElement.prototype={initRendererElement:function(){this.layerElement=createNS("g")},createContainerElements:function(){this.matteElement=createNS("g"),this.transformedElement=this.layerElement,this.maskedElement=this.layerElement,this._sizeChanged=!1;var t,e,r,n=null;if(this.data.td){if(3==this.data.td||1==this.data.td){var i=createNS("mask");i.setAttribute("id",this.layerId),i.setAttribute("mask-type",3==this.data.td?"luminance":"alpha"),i.appendChild(this.layerElement),n=i,this.globalData.defs.appendChild(i),featureSupport.maskType||1!=this.data.td||(i.setAttribute("mask-type","luminance"),t=createElementID(),e=filtersFactory.createFilter(t),this.globalData.defs.appendChild(e),e.appendChild(filtersFactory.createAlphaToLuminanceFilter()),(r=createNS("g")).appendChild(this.layerElement),n=r,i.appendChild(r),r.setAttribute("filter","url("+getLocationHref()+"#"+t+")"))}else if(2==this.data.td){var a=createNS("mask");a.setAttribute("id",this.layerId),a.setAttribute("mask-type","alpha");var s=createNS("g");a.appendChild(s),t=createElementID(),e=filtersFactory.createFilter(t);var o=createNS("feComponentTransfer");o.setAttribute("in","SourceGraphic"),e.appendChild(o);var l=createNS("feFuncA");l.setAttribute("type","table"),l.setAttribute("tableValues","1.0 0.0"),o.appendChild(l),this.globalData.defs.appendChild(e);var h=createNS("rect");h.setAttribute("width",this.comp.data.w),h.setAttribute("height",this.comp.data.h),h.setAttribute("x","0"),h.setAttribute("y","0"),h.setAttribute("fill","#ffffff"),h.setAttribute("opacity","0"),s.setAttribute("filter","url("+getLocationHref()+"#"+t+")"),s.appendChild(h),s.appendChild(this.layerElement),n=s,featureSupport.maskType||(a.setAttribute("mask-type","luminance"),e.appendChild(filtersFactory.createAlphaToLuminanceFilter()),r=createNS("g"),s.appendChild(h),r.appendChild(this.layerElement),n=r,s.appendChild(r)),this.globalData.defs.appendChild(a)}}else this.data.tt?(this.matteElement.appendChild(this.layerElement),n=this.matteElement,this.baseElement=this.matteElement):this.baseElement=this.layerElement;if(this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),0===this.data.ty&&!this.data.hd){var u=createNS("clipPath"),c=createNS("path");c.setAttribute("d","M0,0 L"+this.data.w+",0 L"+this.data.w+","+this.data.h+" L0,"+this.data.h+"z");var p=createElementID();if(u.setAttribute("id",p),u.appendChild(c),this.globalData.defs.appendChild(u),this.checkMasks()){var f=createNS("g");f.setAttribute("clip-path","url("+getLocationHref()+"#"+p+")"),f.appendChild(this.layerElement),this.transformedElement=f,n?n.appendChild(this.transformedElement):this.baseElement=this.transformedElement}else this.layerElement.setAttribute("clip-path","url("+getLocationHref()+"#"+p+")")}0!==this.data.bm&&this.setBlendMode()},renderElement:function(){this.finalTransform._matMdf&&this.transformedElement.setAttribute("transform",this.finalTransform.mat.to2dCSS()),this.finalTransform._opMdf&&this.transformedElement.setAttribute("opacity",this.finalTransform.mProp.o.v)},destroyBaseElement:function(){this.layerElement=null,this.matteElement=null,this.maskManager.destroy()},getBaseElement:function(){return this.data.hd?null:this.baseElement},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData),this.renderableEffectsManager=new SVGEffects(this)},setMatte:function(t){this.matteElement&&this.matteElement.setAttribute("mask","url("+getLocationHref()+"#"+t+")")}},HierarchyElement.prototype={initHierarchy:function(){this.hierarchy=[],this._isParent=!1,this.checkParenting()},setHierarchy:function(t){this.hierarchy=t},setAsParent:function(){this._isParent=!0},checkParenting:function(){void 0!==this.data.parent&&this.comp.buildElementParenting(this,this.data.parent,[])}},extendPrototype([RenderableElement,createProxyFunction({initElement:function(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initTransform(t,e,r),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide()},hide:function(){this.hidden||this.isInRange&&!this.isTransparent||((this.baseElement||this.layerElement).style.display="none",this.hidden=!0)},show:function(){this.isInRange&&!this.isTransparent&&(this.data.hd||((this.baseElement||this.layerElement).style.display="block"),this.hidden=!1,this._isFirstFrame=!0)},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},renderInnerContent:function(){},prepareFrame:function(t){this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange),this.checkTransparency()},destroy:function(){this.innerElem=null,this.destroyBaseElement()}})],RenderableDOMElement),extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],IImageElement),IImageElement.prototype.createContent=function(){var t=this.globalData.getAssetsPath(this.assetData);this.innerElem=createNS("image"),this.innerElem.setAttribute("width",this.assetData.w+"px"),this.innerElem.setAttribute("height",this.assetData.h+"px"),this.innerElem.setAttribute("preserveAspectRatio",this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio),this.innerElem.setAttributeNS("http://www.w3.org/1999/xlink","href",t),this.layerElement.appendChild(this.innerElem)},IImageElement.prototype.sourceRectAtTime=function(){return this.sourceRect},IShapeElement.prototype={addShapeToModifiers:function(t){var e,r=this.shapeModifiers.length;for(e=0;e<r;e+=1)this.shapeModifiers[e].addShape(t)},isShapeInAnimatedModifiers:function(t){for(var e=this.shapeModifiers.length;0<e;)if(this.shapeModifiers[0].isAnimatedWithShape(t))return!0;return!1},renderModifiers:function(){if(this.shapeModifiers.length){var t,e=this.shapes.length;for(t=0;t<e;t+=1)this.shapes[t].sh.reset();for(t=(e=this.shapeModifiers.length)-1;t>=0&&!this.shapeModifiers[t].processShapes(this._isFirstFrame);t-=1);}},searchProcessedElement:function(t){for(var e=this.processedElements,r=0,n=e.length;r<n;){if(e[r].elem===t)return e[r].pos;r+=1}return 0},addProcessedElement:function(t,e){for(var r=this.processedElements,n=r.length;n;)if(r[n-=1].elem===t)return void(r[n].pos=e);r.push(new ProcessedElement(t,e))},prepareFrame:function(t){this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange)}};var lineCapEnum={1:"butt",2:"round",3:"square"},lineJoinEnum={1:"miter",2:"round",3:"bevel"};function SVGShapeData(t,e,r){this.caches=[],this.styles=[],this.transformers=t,this.lStr="",this.sh=r,this.lvl=e,this._isAnimated=!!r.k;for(var n=0,i=t.length;n<i;){if(t[n].mProps.dynamicProperties.length){this._isAnimated=!0;break}n+=1}}function SVGStyleData(t,e){this.data=t,this.type=t.ty,this.d="",this.lvl=e,this._mdf=!1,this.closed=!0===t.hd,this.pElem=createNS("path"),this.msElem=null}function DashProperty(t,e,r,n){var i;this.elem=t,this.frameId=-1,this.dataProps=createSizedArray(e.length),this.renderer=r,this.k=!1,this.dashStr="",this.dashArray=createTypedArray("float32",e.length?e.length-1:0),this.dashoffset=createTypedArray("float32",1),this.initDynamicPropertyContainer(n);var a,s=e.length||0;for(i=0;i<s;i+=1)a=PropertyFactory.getProp(t,e[i].v,0,0,this),this.k=a.k||this.k,this.dataProps[i]={n:e[i].n,p:a};this.k||this.getValue(!0),this._isAnimated=this.k}function SVGStrokeStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.w=PropertyFactory.getProp(t,e.w,0,null,this),this.d=new DashProperty(t,e.d||{},"svg",this),this.c=PropertyFactory.getProp(t,e.c,1,255,this),this.style=r,this._isAnimated=!!this._isAnimated}function SVGFillStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.c=PropertyFactory.getProp(t,e.c,1,255,this),this.style=r}function SVGNoStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.style=r}function GradientProperty(t,e,r){this.data=e,this.c=createTypedArray("uint8c",4*e.p);var n=e.k.k[0].s?e.k.k[0].s.length-4*e.p:e.k.k.length-4*e.p;this.o=createTypedArray("float32",n),this._cmdf=!1,this._omdf=!1,this._collapsable=this.checkCollapsable(),this._hasOpacity=n,this.initDynamicPropertyContainer(r),this.prop=PropertyFactory.getProp(t,e.k,1,null,this),this.k=this.prop.k,this.getValue(!0)}function SVGGradientFillStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.initGradientData(t,e,r)}function SVGGradientStrokeStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.w=PropertyFactory.getProp(t,e.w,0,null,this),this.d=new DashProperty(t,e.d||{},"svg",this),this.initGradientData(t,e,r),this._isAnimated=!!this._isAnimated}function ShapeGroupData(){this.it=[],this.prevViewData=[],this.gr=createNS("g")}function SVGTransformData(t,e,r){this.transform={mProps:t,op:e,container:r},this.elements=[],this._isAnimated=this.transform.mProps.dynamicProperties.length||this.transform.op.effectsSequence.length}SVGShapeData.prototype.setAsAnimated=function(){this._isAnimated=!0},SVGStyleData.prototype.reset=function(){this.d="",this._mdf=!1},DashProperty.prototype.getValue=function(t){if((this.elem.globalData.frameId!==this.frameId||t)&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf=this._mdf||t,this._mdf)){var e=0,r=this.dataProps.length;for("svg"===this.renderer&&(this.dashStr=""),e=0;e<r;e+=1)"o"!==this.dataProps[e].n?"svg"===this.renderer?this.dashStr+=" "+this.dataProps[e].p.v:this.dashArray[e]=this.dataProps[e].p.v:this.dashoffset[0]=this.dataProps[e].p.v}},extendPrototype([DynamicPropertyContainer],DashProperty),extendPrototype([DynamicPropertyContainer],SVGStrokeStyleData),extendPrototype([DynamicPropertyContainer],SVGFillStyleData),extendPrototype([DynamicPropertyContainer],SVGNoStyleData),GradientProperty.prototype.comparePoints=function(t,e){for(var r=0,n=this.o.length/2;r<n;){if(Math.abs(t[4*r]-t[4*e+2*r])>.01)return!1;r+=1}return!0},GradientProperty.prototype.checkCollapsable=function(){if(this.o.length/2!=this.c.length/4)return!1;if(this.data.k.k[0].s)for(var t=0,e=this.data.k.k.length;t<e;){if(!this.comparePoints(this.data.k.k[t].s,this.data.p))return!1;t+=1}else if(!this.comparePoints(this.data.k.k,this.data.p))return!1;return!0},GradientProperty.prototype.getValue=function(t){if(this.prop.getValue(),this._mdf=!1,this._cmdf=!1,this._omdf=!1,this.prop._mdf||t){var e,r,n,i=4*this.data.p;for(e=0;e<i;e+=1)r=e%4==0?100:255,n=Math.round(this.prop.v[e]*r),this.c[e]!==n&&(this.c[e]=n,this._cmdf=!t);if(this.o.length)for(i=this.prop.v.length,e=4*this.data.p;e<i;e+=1)r=e%2==0?100:1,n=e%2==0?Math.round(100*this.prop.v[e]):this.prop.v[e],this.o[e-4*this.data.p]!==n&&(this.o[e-4*this.data.p]=n,this._omdf=!t);this._mdf=!t}},extendPrototype([DynamicPropertyContainer],GradientProperty),SVGGradientFillStyleData.prototype.initGradientData=function(t,e,r){this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.s=PropertyFactory.getProp(t,e.s,1,null,this),this.e=PropertyFactory.getProp(t,e.e,1,null,this),this.h=PropertyFactory.getProp(t,e.h||{k:0},0,.01,this),this.a=PropertyFactory.getProp(t,e.a||{k:0},0,degToRads,this),this.g=new GradientProperty(t,e.g,this),this.style=r,this.stops=[],this.setGradientData(r.pElem,e),this.setGradientOpacity(e,r),this._isAnimated=!!this._isAnimated},SVGGradientFillStyleData.prototype.setGradientData=function(t,e){var r=createElementID(),n=createNS(1===e.t?"linearGradient":"radialGradient");n.setAttribute("id",r),n.setAttribute("spreadMethod","pad"),n.setAttribute("gradientUnits","userSpaceOnUse");var i,a,s,o=[];for(s=4*e.g.p,a=0;a<s;a+=4)i=createNS("stop"),n.appendChild(i),o.push(i);t.setAttribute("gf"===e.ty?"fill":"stroke","url("+getLocationHref()+"#"+r+")"),this.gf=n,this.cst=o},SVGGradientFillStyleData.prototype.setGradientOpacity=function(t,e){if(this.g._hasOpacity&&!this.g._collapsable){var r,n,i,a=createNS("mask"),s=createNS("path");a.appendChild(s);var o=createElementID(),l=createElementID();a.setAttribute("id",l);var h=createNS(1===t.t?"linearGradient":"radialGradient");h.setAttribute("id",o),h.setAttribute("spreadMethod","pad"),h.setAttribute("gradientUnits","userSpaceOnUse"),i=t.g.k.k[0].s?t.g.k.k[0].s.length:t.g.k.k.length;var u=this.stops;for(n=4*t.g.p;n<i;n+=2)(r=createNS("stop")).setAttribute("stop-color","rgb(255,255,255)"),h.appendChild(r),u.push(r);s.setAttribute("gf"===t.ty?"fill":"stroke","url("+getLocationHref()+"#"+o+")"),"gs"===t.ty&&(s.setAttribute("stroke-linecap",lineCapEnum[t.lc||2]),s.setAttribute("stroke-linejoin",lineJoinEnum[t.lj||2]),1===t.lj&&s.setAttribute("stroke-miterlimit",t.ml)),this.of=h,this.ms=a,this.ost=u,this.maskId=l,e.msElem=s}},extendPrototype([DynamicPropertyContainer],SVGGradientFillStyleData),extendPrototype([SVGGradientFillStyleData,DynamicPropertyContainer],SVGGradientStrokeStyleData);var buildShapeString=function(t,e,r,n){if(0===e)return"";var i,a=t.o,s=t.i,o=t.v,l=" M"+n.applyToPointStringified(o[0][0],o[0][1]);for(i=1;i<e;i+=1)l+=" C"+n.applyToPointStringified(a[i-1][0],a[i-1][1])+" "+n.applyToPointStringified(s[i][0],s[i][1])+" "+n.applyToPointStringified(o[i][0],o[i][1]);return r&&e&&(l+=" C"+n.applyToPointStringified(a[i-1][0],a[i-1][1])+" "+n.applyToPointStringified(s[0][0],s[0][1])+" "+n.applyToPointStringified(o[0][0],o[0][1]),l+="z"),l},SVGElementsRenderer=function(){var t=new Matrix,e=new Matrix;function r(t,e,r){(r||e.transform.op._mdf)&&e.transform.container.setAttribute("opacity",e.transform.op.v),(r||e.transform.mProps._mdf)&&e.transform.container.setAttribute("transform",e.transform.mProps.v.to2dCSS())}function n(){}function i(r,n,i){var a,s,o,l,h,u,c,p,f,d,m,g=n.styles.length,y=n.lvl;for(u=0;u<g;u+=1){if(l=n.sh._mdf||i,n.styles[u].lvl<y){for(p=e.reset(),d=y-n.styles[u].lvl,m=n.transformers.length-1;!l&&d>0;)l=n.transformers[m].mProps._mdf||l,d-=1,m-=1;if(l)for(d=y-n.styles[u].lvl,m=n.transformers.length-1;d>0;)f=n.transformers[m].mProps.v.props,p.transform(f[0],f[1],f[2],f[3],f[4],f[5],f[6],f[7],f[8],f[9],f[10],f[11],f[12],f[13],f[14],f[15]),d-=1,m-=1}else p=t;if(s=(c=n.sh.paths)._length,l){for(o="",a=0;a<s;a+=1)(h=c.shapes[a])&&h._length&&(o+=buildShapeString(h,h._length,h.c,p));n.caches[u]=o}else o=n.caches[u];n.styles[u].d+=!0===r.hd?"":o,n.styles[u]._mdf=l||n.styles[u]._mdf}}function a(t,e,r){var n=e.style;(e.c._mdf||r)&&n.pElem.setAttribute("fill","rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r)&&n.pElem.setAttribute("fill-opacity",e.o.v)}function s(t,e,r){o(t,e,r),l(0,e,r)}function o(t,e,r){var n,i,a,s,o,l=e.gf,h=e.g._hasOpacity,u=e.s.v,c=e.e.v;if(e.o._mdf||r){var p="gf"===t.ty?"fill-opacity":"stroke-opacity";e.style.pElem.setAttribute(p,e.o.v)}if(e.s._mdf||r){var f=1===t.t?"x1":"cx",d="x1"===f?"y1":"cy";l.setAttribute(f,u[0]),l.setAttribute(d,u[1]),h&&!e.g._collapsable&&(e.of.setAttribute(f,u[0]),e.of.setAttribute(d,u[1]))}if(e.g._cmdf||r){n=e.cst;var m=e.g.c;for(a=n.length,i=0;i<a;i+=1)(s=n[i]).setAttribute("offset",m[4*i]+"%"),s.setAttribute("stop-color","rgb("+m[4*i+1]+","+m[4*i+2]+","+m[4*i+3]+")")}if(h&&(e.g._omdf||r)){var g=e.g.o;for(a=(n=e.g._collapsable?e.cst:e.ost).length,i=0;i<a;i+=1)s=n[i],e.g._collapsable||s.setAttribute("offset",g[2*i]+"%"),s.setAttribute("stop-opacity",g[2*i+1])}if(1===t.t)(e.e._mdf||r)&&(l.setAttribute("x2",c[0]),l.setAttribute("y2",c[1]),h&&!e.g._collapsable&&(e.of.setAttribute("x2",c[0]),e.of.setAttribute("y2",c[1])));else if((e.s._mdf||e.e._mdf||r)&&(o=Math.sqrt(Math.pow(u[0]-c[0],2)+Math.pow(u[1]-c[1],2)),l.setAttribute("r",o),h&&!e.g._collapsable&&e.of.setAttribute("r",o)),e.e._mdf||e.h._mdf||e.a._mdf||r){o||(o=Math.sqrt(Math.pow(u[0]-c[0],2)+Math.pow(u[1]-c[1],2)));var y=Math.atan2(c[1]-u[1],c[0]-u[0]),v=e.h.v;v>=1?v=.99:v<=-1&&(v=-.99);var b=o*v,w=Math.cos(y+e.a.v)*b+u[0],x=Math.sin(y+e.a.v)*b+u[1];l.setAttribute("fx",w),l.setAttribute("fy",x),h&&!e.g._collapsable&&(e.of.setAttribute("fx",w),e.of.setAttribute("fy",x))}}function l(t,e,r){var n=e.style,i=e.d;i&&(i._mdf||r)&&i.dashStr&&(n.pElem.setAttribute("stroke-dasharray",i.dashStr),n.pElem.setAttribute("stroke-dashoffset",i.dashoffset[0])),e.c&&(e.c._mdf||r)&&n.pElem.setAttribute("stroke","rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r)&&n.pElem.setAttribute("stroke-opacity",e.o.v),(e.w._mdf||r)&&(n.pElem.setAttribute("stroke-width",e.w.v),n.msElem&&n.msElem.setAttribute("stroke-width",e.w.v))}return{createRenderFunction:function(t){switch(t.ty){case"fl":return a;case"gf":return o;case"gs":return s;case"st":return l;case"sh":case"el":case"rc":case"sr":return i;case"tr":return r;case"no":return n;default:return null}}}}();function SVGShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.initElement(t,e,r),this.prevViewData=[]}function LetterProps(t,e,r,n,i,a){this.o=t,this.sw=e,this.sc=r,this.fc=n,this.m=i,this.p=a,this._mdf={o:!0,sw:!!e,sc:!!r,fc:!!n,m:!0,p:!0}}function TextProperty(t,e){this._frameId=initialDefaultFrame,this.pv="",this.v="",this.kf=!1,this._isFirstFrame=!0,this._mdf=!1,this.data=e,this.elem=t,this.comp=this.elem.comp,this.keysIndex=0,this.canResize=!1,this.minimumFontSize=1,this.effectsSequence=[],this.currentData={ascent:0,boxWidth:this.defaultBoxWidth,f:"",fStyle:"",fWeight:"",fc:"",j:"",justifyOffset:"",l:[],lh:0,lineWidths:[],ls:"",of:"",s:"",sc:"",sw:0,t:0,tr:0,sz:0,ps:null,fillColorAnim:!1,strokeColorAnim:!1,strokeWidthAnim:!1,yOffset:0,finalSize:0,finalText:[],finalLineHeight:0,__complete:!1},this.copyData(this.currentData,this.data.d.k[0].s),this.searchProperty()||this.completeTextData(this.currentData)}extendPrototype([BaseElement,TransformElement,SVGBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableDOMElement],SVGShapeElement),SVGShapeElement.prototype.initSecondaryElement=function(){},SVGShapeElement.prototype.identityMatrix=new Matrix,SVGShapeElement.prototype.buildExpressionInterface=function(){},SVGShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes()},SVGShapeElement.prototype.filterUniqueShapes=function(){var t,e,r,n,i=this.shapes.length,a=this.stylesList.length,s=[],o=!1;for(r=0;r<a;r+=1){for(n=this.stylesList[r],o=!1,s.length=0,t=0;t<i;t+=1)-1!==(e=this.shapes[t]).styles.indexOf(n)&&(s.push(e),o=e._isAnimated||o);s.length>1&&o&&this.setShapesAsAnimated(s)}},SVGShapeElement.prototype.setShapesAsAnimated=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e].setAsAnimated()},SVGShapeElement.prototype.createStyleElement=function(t,e){var r,n=new SVGStyleData(t,e),i=n.pElem;return"st"===t.ty?r=new SVGStrokeStyleData(this,t,n):"fl"===t.ty?r=new SVGFillStyleData(this,t,n):"gf"===t.ty||"gs"===t.ty?(r=new("gf"===t.ty?SVGGradientFillStyleData:SVGGradientStrokeStyleData)(this,t,n),this.globalData.defs.appendChild(r.gf),r.maskId&&(this.globalData.defs.appendChild(r.ms),this.globalData.defs.appendChild(r.of),i.setAttribute("mask","url("+getLocationHref()+"#"+r.maskId+")"))):"no"===t.ty&&(r=new SVGNoStyleData(this,t,n)),"st"!==t.ty&&"gs"!==t.ty||(i.setAttribute("stroke-linecap",lineCapEnum[t.lc||2]),i.setAttribute("stroke-linejoin",lineJoinEnum[t.lj||2]),i.setAttribute("fill-opacity","0"),1===t.lj&&i.setAttribute("stroke-miterlimit",t.ml)),2===t.r&&i.setAttribute("fill-rule","evenodd"),t.ln&&i.setAttribute("id",t.ln),t.cl&&i.setAttribute("class",t.cl),t.bm&&(i.style["mix-blend-mode"]=getBlendMode(t.bm)),this.stylesList.push(n),this.addToAnimatedContents(t,r),r},SVGShapeElement.prototype.createGroupElement=function(t){var e=new ShapeGroupData;return t.ln&&e.gr.setAttribute("id",t.ln),t.cl&&e.gr.setAttribute("class",t.cl),t.bm&&(e.gr.style["mix-blend-mode"]=getBlendMode(t.bm)),e},SVGShapeElement.prototype.createTransformElement=function(t,e){var r=TransformPropertyFactory.getTransformProperty(this,t,this),n=new SVGTransformData(r,r.o,e);return this.addToAnimatedContents(t,n),n},SVGShapeElement.prototype.createShapeElement=function(t,e,r){var n=4;"rc"===t.ty?n=5:"el"===t.ty?n=6:"sr"===t.ty&&(n=7);var i=new SVGShapeData(e,r,ShapePropertyFactory.getShapeProp(this,t,n,this));return this.shapes.push(i),this.addShapeToModifiers(i),this.addToAnimatedContents(t,i),i},SVGShapeElement.prototype.addToAnimatedContents=function(t,e){for(var r=0,n=this.animatedContents.length;r<n;){if(this.animatedContents[r].element===e)return;r+=1}this.animatedContents.push({fn:SVGElementsRenderer.createRenderFunction(t),element:e,data:t})},SVGShapeElement.prototype.setElementStyles=function(t){var e,r=t.styles,n=this.stylesList.length;for(e=0;e<n;e+=1)this.stylesList[e].closed||r.push(this.stylesList[e])},SVGShapeElement.prototype.reloadShapes=function(){var t;this._isFirstFrame=!0;var e=this.itemsData.length;for(t=0;t<e;t+=1)this.prevViewData[t]=this.itemsData[t];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes(),e=this.dynamicProperties.length,t=0;t<e;t+=1)this.dynamicProperties[t].getValue();this.renderModifiers()},SVGShapeElement.prototype.searchShapes=function(t,e,r,n,i,a,s){var o,l,h,u,c,p,f=[].concat(a),d=t.length-1,m=[],g=[];for(o=d;o>=0;o-=1){if((p=this.searchProcessedElement(t[o]))?e[o]=r[p-1]:t[o]._render=s,"fl"===t[o].ty||"st"===t[o].ty||"gf"===t[o].ty||"gs"===t[o].ty||"no"===t[o].ty)p?e[o].style.closed=!1:e[o]=this.createStyleElement(t[o],i),t[o]._render&&e[o].style.pElem.parentNode!==n&&n.appendChild(e[o].style.pElem),m.push(e[o].style);else if("gr"===t[o].ty){if(p)for(h=e[o].it.length,l=0;l<h;l+=1)e[o].prevViewData[l]=e[o].it[l];else e[o]=this.createGroupElement(t[o]);this.searchShapes(t[o].it,e[o].it,e[o].prevViewData,e[o].gr,i+1,f,s),t[o]._render&&e[o].gr.parentNode!==n&&n.appendChild(e[o].gr)}else"tr"===t[o].ty?(p||(e[o]=this.createTransformElement(t[o],n)),u=e[o].transform,f.push(u)):"sh"===t[o].ty||"rc"===t[o].ty||"el"===t[o].ty||"sr"===t[o].ty?(p||(e[o]=this.createShapeElement(t[o],f,i)),this.setElementStyles(e[o])):"tm"===t[o].ty||"rd"===t[o].ty||"ms"===t[o].ty||"pb"===t[o].ty?(p?(c=e[o]).closed=!1:((c=ShapeModifiers.getModifier(t[o].ty)).init(this,t[o]),e[o]=c,this.shapeModifiers.push(c)),g.push(c)):"rp"===t[o].ty&&(p?(c=e[o]).closed=!0:(c=ShapeModifiers.getModifier(t[o].ty),e[o]=c,c.init(this,t,o,e),this.shapeModifiers.push(c),s=!1),g.push(c));this.addProcessedElement(t[o],o+1)}for(d=m.length,o=0;o<d;o+=1)m[o].closed=!0;for(d=g.length,o=0;o<d;o+=1)g[o].closed=!0},SVGShapeElement.prototype.renderInnerContent=function(){var t;this.renderModifiers();var e=this.stylesList.length;for(t=0;t<e;t+=1)this.stylesList[t].reset();for(this.renderShape(),t=0;t<e;t+=1)(this.stylesList[t]._mdf||this._isFirstFrame)&&(this.stylesList[t].msElem&&(this.stylesList[t].msElem.setAttribute("d",this.stylesList[t].d),this.stylesList[t].d="M0 0"+this.stylesList[t].d),this.stylesList[t].pElem.setAttribute("d",this.stylesList[t].d||"M0 0"))},SVGShapeElement.prototype.renderShape=function(){var t,e,r=this.animatedContents.length;for(t=0;t<r;t+=1)e=this.animatedContents[t],(this._isFirstFrame||e.element._isAnimated)&&!0!==e.data&&e.fn(e.data,e.element,this._isFirstFrame)},SVGShapeElement.prototype.destroy=function(){this.destroyBaseElement(),this.shapesData=null,this.itemsData=null},LetterProps.prototype.update=function(t,e,r,n,i,a){this._mdf.o=!1,this._mdf.sw=!1,this._mdf.sc=!1,this._mdf.fc=!1,this._mdf.m=!1,this._mdf.p=!1;var s=!1;return this.o!==t&&(this.o=t,this._mdf.o=!0,s=!0),this.sw!==e&&(this.sw=e,this._mdf.sw=!0,s=!0),this.sc!==r&&(this.sc=r,this._mdf.sc=!0,s=!0),this.fc!==n&&(this.fc=n,this._mdf.fc=!0,s=!0),this.m!==i&&(this.m=i,this._mdf.m=!0,s=!0),!a.length||this.p[0]===a[0]&&this.p[1]===a[1]&&this.p[4]===a[4]&&this.p[5]===a[5]&&this.p[12]===a[12]&&this.p[13]===a[13]||(this.p=a,this._mdf.p=!0,s=!0),s},TextProperty.prototype.defaultBoxWidth=[0,0],TextProperty.prototype.copyData=function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},TextProperty.prototype.setCurrentData=function(t){t.__complete||this.completeTextData(t),this.currentData=t,this.currentData.boxWidth=this.currentData.boxWidth||this.defaultBoxWidth,this._mdf=!0},TextProperty.prototype.searchProperty=function(){return this.searchKeyframes()},TextProperty.prototype.searchKeyframes=function(){return this.kf=this.data.d.k.length>1,this.kf&&this.addEffect(this.getKeyframeValue.bind(this)),this.kf},TextProperty.prototype.addEffect=function(t){this.effectsSequence.push(t),this.elem.addDynamicProperty(this)},TextProperty.prototype.getValue=function(t){if(this.elem.globalData.frameId!==this.frameId&&this.effectsSequence.length||t){this.currentData.t=this.data.d.k[this.keysIndex].s.t;var e=this.currentData,r=this.keysIndex;if(this.lock)this.setCurrentData(this.currentData);else{var n;this.lock=!0,this._mdf=!1;var i=this.effectsSequence.length,a=t||this.data.d.k[this.keysIndex].s;for(n=0;n<i;n+=1)a=r!==this.keysIndex?this.effectsSequence[n](a,a.t):this.effectsSequence[n](this.currentData,a.t);e!==a&&this.setCurrentData(a),this.v=this.currentData,this.pv=this.v,this.lock=!1,this.frameId=this.elem.globalData.frameId}}},TextProperty.prototype.getKeyframeValue=function(){for(var t=this.data.d.k,e=this.elem.comp.renderedFrame,r=0,n=t.length;r<=n-1&&!(r===n-1||t[r+1].t>e);)r+=1;return this.keysIndex!==r&&(this.keysIndex=r),this.data.d.k[this.keysIndex].s},TextProperty.prototype.buildFinalText=function(t){for(var e,r,n=[],i=0,a=t.length,s=!1;i<a;)e=t.charCodeAt(i),FontManager.isCombinedCharacter(e)?n[n.length-1]+=t.charAt(i):e>=55296&&e<=56319?(r=t.charCodeAt(i+1))>=56320&&r<=57343?(s||FontManager.isModifier(e,r)?(n[n.length-1]+=t.substr(i,2),s=!1):n.push(t.substr(i,2)),i+=1):n.push(t.charAt(i)):e>56319?(r=t.charCodeAt(i+1),FontManager.isZeroWidthJoiner(e,r)?(s=!0,n[n.length-1]+=t.substr(i,2),i+=1):n.push(t.charAt(i))):FontManager.isZeroWidthJoiner(e)?(n[n.length-1]+=t.charAt(i),s=!0):n.push(t.charAt(i)),i+=1;return n},TextProperty.prototype.completeTextData=function(t){t.__complete=!0;var e,r,n,i,a,s,o,l=this.elem.globalData.fontManager,h=this.data,u=[],c=0,p=h.m.g,f=0,d=0,m=0,g=[],y=0,v=0,b=l.getFontByName(t.f),w=0,x=getFontProperties(b);t.fWeight=x.weight,t.fStyle=x.style,t.finalSize=t.s,t.finalText=this.buildFinalText(t.t),r=t.finalText.length,t.finalLineHeight=t.lh;var _,k=t.tr/1e3*t.finalSize;if(t.sz)for(var S,E,C=!0,M=t.sz[0],P=t.sz[1];C;){S=0,y=0,r=(E=this.buildFinalText(t.t)).length,k=t.tr/1e3*t.finalSize;var A=-1;for(e=0;e<r;e+=1)_=E[e].charCodeAt(0),n=!1," "===E[e]?A=e:13!==_&&3!==_||(y=0,n=!0,S+=t.finalLineHeight||1.2*t.finalSize),l.chars?(o=l.getCharData(E[e],b.fStyle,b.fFamily),w=n?0:o.w*t.finalSize/100):w=l.measureText(E[e],t.f,t.finalSize),y+w>M&&" "!==E[e]?(-1===A?r+=1:e=A,S+=t.finalLineHeight||1.2*t.finalSize,E.splice(e,A===e?1:0,"\r"),A=-1,y=0):(y+=w,y+=k);S+=b.ascent*t.finalSize/100,this.canResize&&t.finalSize>this.minimumFontSize&&P<S?(t.finalSize-=1,t.finalLineHeight=t.finalSize*t.lh/t.s):(t.finalText=E,r=t.finalText.length,C=!1)}y=-k,w=0;var T,D=0;for(e=0;e<r;e+=1)if(n=!1,13===(_=(T=t.finalText[e]).charCodeAt(0))||3===_?(D=0,g.push(y),v=y>v?y:v,y=-2*k,i="",n=!0,m+=1):i=T,l.chars?(o=l.getCharData(T,b.fStyle,l.getFontByName(t.f).fFamily),w=n?0:o.w*t.finalSize/100):w=l.measureText(i,t.f,t.finalSize)," "===T?D+=w+k:(y+=w+k+D,D=0),u.push({l:w,an:w,add:f,n,anIndexes:[],val:i,line:m,animatorJustifyOffset:0}),2==p){if(f+=w,""===i||" "===i||e===r-1){for(""!==i&&" "!==i||(f-=w);d<=e;)u[d].an=f,u[d].ind=c,u[d].extra=w,d+=1;c+=1,f=0}}else if(3==p){if(f+=w,""===i||e===r-1){for(""===i&&(f-=w);d<=e;)u[d].an=f,u[d].ind=c,u[d].extra=w,d+=1;f=0,c+=1}}else u[c].ind=c,u[c].extra=0,c+=1;if(t.l=u,v=y>v?y:v,g.push(y),t.sz)t.boxWidth=t.sz[0],t.justifyOffset=0;else switch(t.boxWidth=v,t.j){case 1:t.justifyOffset=-t.boxWidth;break;case 2:t.justifyOffset=-t.boxWidth/2;break;default:t.justifyOffset=0}t.lineWidths=g;var I,F,R,B,L=h.a;s=L.length;var N=[];for(a=0;a<s;a+=1){for((I=L[a]).a.sc&&(t.strokeColorAnim=!0),I.a.sw&&(t.strokeWidthAnim=!0),(I.a.fc||I.a.fh||I.a.fs||I.a.fb)&&(t.fillColorAnim=!0),B=0,R=I.s.b,e=0;e<r;e+=1)(F=u[e]).anIndexes[a]=B,(1==R&&""!==F.val||2==R&&""!==F.val&&" "!==F.val||3==R&&(F.n||" "==F.val||e==r-1)||4==R&&(F.n||e==r-1))&&(1===I.s.rn&&N.push(B),B+=1);h.a[a].s.totalChars=B;var O,V=-1;if(1===I.s.rn)for(e=0;e<r;e+=1)V!=(F=u[e]).anIndexes[a]&&(V=F.anIndexes[a],O=N.splice(Math.floor(Math.random()*N.length),1)[0]),F.anIndexes[a]=O}t.yOffset=t.finalLineHeight||1.2*t.finalSize,t.ls=t.ls||0,t.ascent=b.ascent*t.finalSize/100},TextProperty.prototype.updateDocumentData=function(t,e){e=void 0===e?this.keysIndex:e;var r=this.copyData({},this.data.d.k[e].s);r=this.copyData(r,t),this.data.d.k[e].s=r,this.recalculate(e),this.elem.addDynamicProperty(this)},TextProperty.prototype.recalculate=function(t){var e=this.data.d.k[t].s;e.__complete=!1,this.keysIndex=0,this._isFirstFrame=!0,this.getValue(e)},TextProperty.prototype.canResizeFont=function(t){this.canResize=t,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)},TextProperty.prototype.setMinimumFontSize=function(t){this.minimumFontSize=Math.floor(t)||1,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)};var TextSelectorProp=function(){var t=Math.max,e=Math.min,r=Math.floor;function n(t,e){this._currentTextLength=-1,this.k=!1,this.data=e,this.elem=t,this.comp=t.comp,this.finalS=0,this.finalE=0,this.initDynamicPropertyContainer(t),this.s=PropertyFactory.getProp(t,e.s||{k:0},0,0,this),this.e="e"in e?PropertyFactory.getProp(t,e.e,0,0,this):{v:100},this.o=PropertyFactory.getProp(t,e.o||{k:0},0,0,this),this.xe=PropertyFactory.getProp(t,e.xe||{k:0},0,0,this),this.ne=PropertyFactory.getProp(t,e.ne||{k:0},0,0,this),this.sm=PropertyFactory.getProp(t,e.sm||{k:100},0,0,this),this.a=PropertyFactory.getProp(t,e.a,0,.01,this),this.dynamicProperties.length||this.getValue()}return n.prototype={getMult:function(n){this._currentTextLength!==this.elem.textProperty.currentData.l.length&&this.getValue();var i=0,a=0,s=1,o=1;this.ne.v>0?i=this.ne.v/100:a=-this.ne.v/100,this.xe.v>0?s=1-this.xe.v/100:o=1+this.xe.v/100;var l=BezierFactory.getBezierEasing(i,a,s,o).get,h=0,u=this.finalS,c=this.finalE,p=this.data.sh;if(2===p)h=l(h=c===u?n>=c?1:0:t(0,e(.5/(c-u)+(n-u)/(c-u),1)));else if(3===p)h=l(h=c===u?n>=c?0:1:1-t(0,e(.5/(c-u)+(n-u)/(c-u),1)));else if(4===p)c===u?h=0:(h=t(0,e(.5/(c-u)+(n-u)/(c-u),1)))<.5?h*=2:h=1-2*(h-.5),h=l(h);else if(5===p){if(c===u)h=0;else{var f=c-u,d=-f/2+(n=e(t(0,n+.5-u),c-u)),m=f/2;h=Math.sqrt(1-d*d/(m*m))}h=l(h)}else 6===p?(c===u?h=0:(n=e(t(0,n+.5-u),c-u),h=(1+Math.cos(Math.PI+2*Math.PI*n/(c-u)))/2),h=l(h)):(n>=r(u)&&(h=t(0,e(n-u<0?e(c,1)-(u-n):c-n,1))),h=l(h));if(100!==this.sm.v){var g=.01*this.sm.v;0===g&&(g=1e-8);var y=.5-.5*g;h<y?h=0:(h=(h-y)/g)>1&&(h=1)}return h*this.a.v},getValue:function(t){this.iterateDynamicProperties(),this._mdf=t||this._mdf,this._currentTextLength=this.elem.textProperty.currentData.l.length||0,t&&2===this.data.r&&(this.e.v=this._currentTextLength);var e=2===this.data.r?1:100/this.data.totalChars,r=this.o.v/e,n=this.s.v/e+r,i=this.e.v/e+r;if(n>i){var a=n;n=i,i=a}this.finalS=n,this.finalE=i}},extendPrototype([DynamicPropertyContainer],n),{getTextSelectorProp:function(t,e,r){return new n(t,e,r)}}}();function TextAnimatorDataProperty(t,e,r){var n={propType:!1},i=PropertyFactory.getProp,a=e.a;this.a={r:a.r?i(t,a.r,0,degToRads,r):n,rx:a.rx?i(t,a.rx,0,degToRads,r):n,ry:a.ry?i(t,a.ry,0,degToRads,r):n,sk:a.sk?i(t,a.sk,0,degToRads,r):n,sa:a.sa?i(t,a.sa,0,degToRads,r):n,s:a.s?i(t,a.s,1,.01,r):n,a:a.a?i(t,a.a,1,0,r):n,o:a.o?i(t,a.o,0,.01,r):n,p:a.p?i(t,a.p,1,0,r):n,sw:a.sw?i(t,a.sw,0,0,r):n,sc:a.sc?i(t,a.sc,1,0,r):n,fc:a.fc?i(t,a.fc,1,0,r):n,fh:a.fh?i(t,a.fh,0,0,r):n,fs:a.fs?i(t,a.fs,0,.01,r):n,fb:a.fb?i(t,a.fb,0,.01,r):n,t:a.t?i(t,a.t,0,0,r):n},this.s=TextSelectorProp.getTextSelectorProp(t,e.s,r),this.s.t=e.s.t}function TextAnimatorProperty(t,e,r){this._isFirstFrame=!0,this._hasMaskedPath=!1,this._frameId=-1,this._textData=t,this._renderType=e,this._elem=r,this._animatorsData=createSizedArray(this._textData.a.length),this._pathData={},this._moreOptions={alignment:{}},this.renderedLetters=[],this.lettersChangedFlag=!1,this.initDynamicPropertyContainer(r)}function ITextElement(){}TextAnimatorProperty.prototype.searchProperties=function(){var t,e,r=this._textData.a.length,n=PropertyFactory.getProp;for(t=0;t<r;t+=1)e=this._textData.a[t],this._animatorsData[t]=new TextAnimatorDataProperty(this._elem,e,this);this._textData.p&&"m"in this._textData.p?(this._pathData={a:n(this._elem,this._textData.p.a,0,0,this),f:n(this._elem,this._textData.p.f,0,0,this),l:n(this._elem,this._textData.p.l,0,0,this),r:n(this._elem,this._textData.p.r,0,0,this),p:n(this._elem,this._textData.p.p,0,0,this),m:this._elem.maskManager.getMaskProperty(this._textData.p.m)},this._hasMaskedPath=!0):this._hasMaskedPath=!1,this._moreOptions.alignment=n(this._elem,this._textData.m.a,1,0,this)},TextAnimatorProperty.prototype.getMeasures=function(t,e){if(this.lettersChangedFlag=e,this._mdf||this._isFirstFrame||e||this._hasMaskedPath&&this._pathData.m._mdf){this._isFirstFrame=!1;var r,n,i,a,s,o,l,h,u,c,p,f,d,m,g,y,v,b,w,x=this._moreOptions.alignment.v,_=this._animatorsData,k=this._textData,S=this.mHelper,E=this._renderType,C=this.renderedLetters.length,M=t.l;if(this._hasMaskedPath){if(w=this._pathData.m,!this._pathData.n||this._pathData._mdf){var P,A=w.v;for(this._pathData.r.v&&(A=A.reverse()),s={tLength:0,segments:[]},a=A._length-1,y=0,i=0;i<a;i+=1)P=bez.buildBezierData(A.v[i],A.v[i+1],[A.o[i][0]-A.v[i][0],A.o[i][1]-A.v[i][1]],[A.i[i+1][0]-A.v[i+1][0],A.i[i+1][1]-A.v[i+1][1]]),s.tLength+=P.segmentLength,s.segments.push(P),y+=P.segmentLength;i=a,w.v.c&&(P=bez.buildBezierData(A.v[i],A.v[0],[A.o[i][0]-A.v[i][0],A.o[i][1]-A.v[i][1]],[A.i[0][0]-A.v[0][0],A.i[0][1]-A.v[0][1]]),s.tLength+=P.segmentLength,s.segments.push(P),y+=P.segmentLength),this._pathData.pi=s}if(s=this._pathData.pi,o=this._pathData.f.v,p=0,c=1,h=0,u=!0,m=s.segments,o<0&&w.v.c)for(s.tLength<Math.abs(o)&&(o=-Math.abs(o)%s.tLength),c=(d=m[p=m.length-1].points).length-1;o<0;)o+=d[c].partialLength,(c-=1)<0&&(c=(d=m[p-=1].points).length-1);f=(d=m[p].points)[c-1],g=(l=d[c]).partialLength}a=M.length,r=0,n=0;var T,D,I,F,R,B=1.2*t.finalSize*.714,L=!0;I=_.length;var N,O,V,z,G,j,H,q,W,U,$,Z,Q=-1,Y=o,K=p,J=c,X=-1,tt="",et=this.defaultPropsArray;if(2===t.j||1===t.j){var rt=0,nt=0,it=2===t.j?-.5:-1,at=0,st=!0;for(i=0;i<a;i+=1)if(M[i].n){for(rt&&(rt+=nt);at<i;)M[at].animatorJustifyOffset=rt,at+=1;rt=0,st=!0}else{for(D=0;D<I;D+=1)(T=_[D].a).t.propType&&(st&&2===t.j&&(nt+=T.t.v*it),(R=_[D].s.getMult(M[i].anIndexes[D],k.a[D].s.totalChars)).length?rt+=T.t.v*R[0]*it:rt+=T.t.v*R*it);st=!1}for(rt&&(rt+=nt);at<i;)M[at].animatorJustifyOffset=rt,at+=1}for(i=0;i<a;i+=1){if(S.reset(),z=1,M[i].n)r=0,n+=t.yOffset,n+=L?1:0,o=Y,L=!1,this._hasMaskedPath&&(c=J,f=(d=m[p=K].points)[c-1],g=(l=d[c]).partialLength,h=0),tt="",$="",W="",Z="",et=this.defaultPropsArray;else{if(this._hasMaskedPath){if(X!==M[i].line){switch(t.j){case 1:o+=y-t.lineWidths[M[i].line];break;case 2:o+=(y-t.lineWidths[M[i].line])/2}X=M[i].line}Q!==M[i].ind&&(M[Q]&&(o+=M[Q].extra),o+=M[i].an/2,Q=M[i].ind),o+=x[0]*M[i].an*.005;var ot=0;for(D=0;D<I;D+=1)(T=_[D].a).p.propType&&((R=_[D].s.getMult(M[i].anIndexes[D],k.a[D].s.totalChars)).length?ot+=T.p.v[0]*R[0]:ot+=T.p.v[0]*R),T.a.propType&&((R=_[D].s.getMult(M[i].anIndexes[D],k.a[D].s.totalChars)).length?ot+=T.a.v[0]*R[0]:ot+=T.a.v[0]*R);for(u=!0,this._pathData.a.v&&(o=.5*M[0].an+(y-this._pathData.f.v-.5*M[0].an-.5*M[M.length-1].an)*Q/(a-1),o+=this._pathData.f.v);u;)h+g>=o+ot||!d?(v=(o+ot-h)/l.partialLength,O=f.point[0]+(l.point[0]-f.point[0])*v,V=f.point[1]+(l.point[1]-f.point[1])*v,S.translate(-x[0]*M[i].an*.005,-x[1]*B*.01),u=!1):d&&(h+=l.partialLength,(c+=1)>=d.length&&(c=0,m[p+=1]?d=m[p].points:w.v.c?(c=0,d=m[p=0].points):(h-=l.partialLength,d=null)),d&&(f=l,g=(l=d[c]).partialLength));N=M[i].an/2-M[i].add,S.translate(-N,0,0)}else N=M[i].an/2-M[i].add,S.translate(-N,0,0),S.translate(-x[0]*M[i].an*.005,-x[1]*B*.01,0);for(D=0;D<I;D+=1)(T=_[D].a).t.propType&&(R=_[D].s.getMult(M[i].anIndexes[D],k.a[D].s.totalChars),0===r&&0===t.j||(this._hasMaskedPath?R.length?o+=T.t.v*R[0]:o+=T.t.v*R:R.length?r+=T.t.v*R[0]:r+=T.t.v*R));for(t.strokeWidthAnim&&(j=t.sw||0),t.strokeColorAnim&&(G=t.sc?[t.sc[0],t.sc[1],t.sc[2]]:[0,0,0]),t.fillColorAnim&&t.fc&&(H=[t.fc[0],t.fc[1],t.fc[2]]),D=0;D<I;D+=1)(T=_[D].a).a.propType&&((R=_[D].s.getMult(M[i].anIndexes[D],k.a[D].s.totalChars)).length?S.translate(-T.a.v[0]*R[0],-T.a.v[1]*R[1],T.a.v[2]*R[2]):S.translate(-T.a.v[0]*R,-T.a.v[1]*R,T.a.v[2]*R));for(D=0;D<I;D+=1)(T=_[D].a).s.propType&&((R=_[D].s.getMult(M[i].anIndexes[D],k.a[D].s.totalChars)).length?S.scale(1+(T.s.v[0]-1)*R[0],1+(T.s.v[1]-1)*R[1],1):S.scale(1+(T.s.v[0]-1)*R,1+(T.s.v[1]-1)*R,1));for(D=0;D<I;D+=1){if(T=_[D].a,R=_[D].s.getMult(M[i].anIndexes[D],k.a[D].s.totalChars),T.sk.propType&&(R.length?S.skewFromAxis(-T.sk.v*R[0],T.sa.v*R[1]):S.skewFromAxis(-T.sk.v*R,T.sa.v*R)),T.r.propType&&(R.length?S.rotateZ(-T.r.v*R[2]):S.rotateZ(-T.r.v*R)),T.ry.propType&&(R.length?S.rotateY(T.ry.v*R[1]):S.rotateY(T.ry.v*R)),T.rx.propType&&(R.length?S.rotateX(T.rx.v*R[0]):S.rotateX(T.rx.v*R)),T.o.propType&&(R.length?z+=(T.o.v*R[0]-z)*R[0]:z+=(T.o.v*R-z)*R),t.strokeWidthAnim&&T.sw.propType&&(R.length?j+=T.sw.v*R[0]:j+=T.sw.v*R),t.strokeColorAnim&&T.sc.propType)for(q=0;q<3;q+=1)R.length?G[q]+=(T.sc.v[q]-G[q])*R[0]:G[q]+=(T.sc.v[q]-G[q])*R;if(t.fillColorAnim&&t.fc){if(T.fc.propType)for(q=0;q<3;q+=1)R.length?H[q]+=(T.fc.v[q]-H[q])*R[0]:H[q]+=(T.fc.v[q]-H[q])*R;T.fh.propType&&(H=R.length?addHueToRGB(H,T.fh.v*R[0]):addHueToRGB(H,T.fh.v*R)),T.fs.propType&&(H=R.length?addSaturationToRGB(H,T.fs.v*R[0]):addSaturationToRGB(H,T.fs.v*R)),T.fb.propType&&(H=R.length?addBrightnessToRGB(H,T.fb.v*R[0]):addBrightnessToRGB(H,T.fb.v*R))}}for(D=0;D<I;D+=1)(T=_[D].a).p.propType&&(R=_[D].s.getMult(M[i].anIndexes[D],k.a[D].s.totalChars),this._hasMaskedPath?R.length?S.translate(0,T.p.v[1]*R[0],-T.p.v[2]*R[1]):S.translate(0,T.p.v[1]*R,-T.p.v[2]*R):R.length?S.translate(T.p.v[0]*R[0],T.p.v[1]*R[1],-T.p.v[2]*R[2]):S.translate(T.p.v[0]*R,T.p.v[1]*R,-T.p.v[2]*R));if(t.strokeWidthAnim&&(W=j<0?0:j),t.strokeColorAnim&&(U="rgb("+Math.round(255*G[0])+","+Math.round(255*G[1])+","+Math.round(255*G[2])+")"),t.fillColorAnim&&t.fc&&($="rgb("+Math.round(255*H[0])+","+Math.round(255*H[1])+","+Math.round(255*H[2])+")"),this._hasMaskedPath){if(S.translate(0,-t.ls),S.translate(0,x[1]*B*.01+n,0),this._pathData.p.v){b=(l.point[1]-f.point[1])/(l.point[0]-f.point[0]);var lt=180*Math.atan(b)/Math.PI;l.point[0]<f.point[0]&&(lt+=180),S.rotate(-lt*Math.PI/180)}S.translate(O,V,0),o-=x[0]*M[i].an*.005,M[i+1]&&Q!==M[i+1].ind&&(o+=M[i].an/2,o+=.001*t.tr*t.finalSize)}else{switch(S.translate(r,n,0),t.ps&&S.translate(t.ps[0],t.ps[1]+t.ascent,0),t.j){case 1:S.translate(M[i].animatorJustifyOffset+t.justifyOffset+(t.boxWidth-t.lineWidths[M[i].line]),0,0);break;case 2:S.translate(M[i].animatorJustifyOffset+t.justifyOffset+(t.boxWidth-t.lineWidths[M[i].line])/2,0,0)}S.translate(0,-t.ls),S.translate(N,0,0),S.translate(x[0]*M[i].an*.005,x[1]*B*.01,0),r+=M[i].l+.001*t.tr*t.finalSize}"html"===E?tt=S.toCSS():"svg"===E?tt=S.to2dCSS():et=[S.props[0],S.props[1],S.props[2],S.props[3],S.props[4],S.props[5],S.props[6],S.props[7],S.props[8],S.props[9],S.props[10],S.props[11],S.props[12],S.props[13],S.props[14],S.props[15]],Z=z}C<=i?(F=new LetterProps(Z,W,U,$,tt,et),this.renderedLetters.push(F),C+=1,this.lettersChangedFlag=!0):(F=this.renderedLetters[i],this.lettersChangedFlag=F.update(Z,W,U,$,tt,et)||this.lettersChangedFlag)}}},TextAnimatorProperty.prototype.getValue=function(){this._elem.globalData.frameId!==this._frameId&&(this._frameId=this._elem.globalData.frameId,this.iterateDynamicProperties())},TextAnimatorProperty.prototype.mHelper=new Matrix,TextAnimatorProperty.prototype.defaultPropsArray=[],extendPrototype([DynamicPropertyContainer],TextAnimatorProperty),ITextElement.prototype.initElement=function(t,e,r){this.lettersChangedFlag=!0,this.initFrame(),this.initBaseData(t,e,r),this.textProperty=new TextProperty(this,t.t,this.dynamicProperties),this.textAnimator=new TextAnimatorProperty(t.t,this.renderType,this),this.initTransform(t,e,r),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide(),this.textAnimator.searchProperties(this.dynamicProperties)},ITextElement.prototype.prepareFrame=function(t){this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange),(this.textProperty._mdf||this.textProperty._isFirstFrame)&&(this.buildNewText(),this.textProperty._isFirstFrame=!1,this.textProperty._mdf=!1)},ITextElement.prototype.createPathShape=function(t,e){var r,n,i=e.length,a="";for(r=0;r<i;r+=1)"sh"===e[r].ty&&(n=e[r].ks.k,a+=buildShapeString(n,n.i.length,!0,t));return a},ITextElement.prototype.updateDocumentData=function(t,e){this.textProperty.updateDocumentData(t,e)},ITextElement.prototype.canResizeFont=function(t){this.textProperty.canResizeFont(t)},ITextElement.prototype.setMinimumFontSize=function(t){this.textProperty.setMinimumFontSize(t)},ITextElement.prototype.applyTextPropertiesToMatrix=function(t,e,r,n,i){switch(t.ps&&e.translate(t.ps[0],t.ps[1]+t.ascent,0),e.translate(0,-t.ls,0),t.j){case 1:e.translate(t.justifyOffset+(t.boxWidth-t.lineWidths[r]),0,0);break;case 2:e.translate(t.justifyOffset+(t.boxWidth-t.lineWidths[r])/2,0,0)}e.translate(n,i,0)},ITextElement.prototype.buildColor=function(t){return"rgb("+Math.round(255*t[0])+","+Math.round(255*t[1])+","+Math.round(255*t[2])+")"},ITextElement.prototype.emptyProp=new LetterProps,ITextElement.prototype.destroy=function(){};var emptyShapeData={shapes:[]};function SVGTextLottieElement(t,e,r){this.textSpans=[],this.renderType="svg",this.initElement(t,e,r)}function ISolidElement(t,e,r){this.initElement(t,e,r)}function NullElement(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initFrame(),this.initTransform(t,e,r),this.initHierarchy()}function SVGRendererBase(){}function ICompElement(){}function SVGCompElement(t,e,r){this.layers=t.layers,this.supports3d=!0,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}function SVGRenderer(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.svgElement=createNS("svg");var r="";if(e&&e.title){var n=createNS("title"),i=createElementID();n.setAttribute("id",i),n.textContent=e.title,this.svgElement.appendChild(n),r+=i}if(e&&e.description){var a=createNS("desc"),s=createElementID();a.setAttribute("id",s),a.textContent=e.description,this.svgElement.appendChild(a),r+=" "+s}r&&this.svgElement.setAttribute("aria-labelledby",r);var o=createNS("defs");this.svgElement.appendChild(o);var l=createNS("g");this.svgElement.appendChild(l),this.layerElement=l,this.renderConfig={preserveAspectRatio:e&&e.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:e&&e.contentVisibility||"visible",progressiveLoad:e&&e.progressiveLoad||!1,hideOnTransparent:!(e&&!1===e.hideOnTransparent),viewBoxOnly:e&&e.viewBoxOnly||!1,viewBoxSize:e&&e.viewBoxSize||!1,className:e&&e.className||"",id:e&&e.id||"",focusable:e&&e.focusable,filterSize:{width:e&&e.filterSize&&e.filterSize.width||"100%",height:e&&e.filterSize&&e.filterSize.height||"100%",x:e&&e.filterSize&&e.filterSize.x||"0%",y:e&&e.filterSize&&e.filterSize.y||"0%"},width:e&&e.width,height:e&&e.height},this.globalData={_mdf:!1,frameNum:-1,defs:o,renderConfig:this.renderConfig},this.elements=[],this.pendingElements=[],this.destroyed=!1,this.rendererType="svg"}function CVContextData(){var t;for(this.saved=[],this.cArrPos=0,this.cTr=new Matrix,this.cO=1,this.savedOp=createTypedArray("float32",15),t=0;t<15;t+=1)this.saved[t]=createTypedArray("float32",16);this._length=15}function ShapeTransformManager(){this.sequences={},this.sequenceList=[],this.transform_key_count=0}function CVEffects(){}function CVMaskElement(t,e){var r;this.data=t,this.element=e,this.masksProperties=this.data.masksProperties||[],this.viewData=createSizedArray(this.masksProperties.length);var n=this.masksProperties.length,i=!1;for(r=0;r<n;r+=1)"n"!==this.masksProperties[r].mode&&(i=!0),this.viewData[r]=ShapePropertyFactory.getShapeProp(this.element,this.masksProperties[r],3);this.hasMasks=i,i&&this.element.addRenderableComponent(this)}function CVBaseElement(){}function CVShapeData(t,e,r,n){this.styledShapes=[],this.tr=[0,0,0,0,0,0];var i,a=4;"rc"===e.ty?a=5:"el"===e.ty?a=6:"sr"===e.ty&&(a=7),this.sh=ShapePropertyFactory.getShapeProp(t,e,a,t);var s,o=r.length;for(i=0;i<o;i+=1)r[i].closed||(s={transforms:n.addTransformSequence(r[i].transforms),trNodes:[]},this.styledShapes.push(s),r[i].elements.push(s))}function CVShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.itemsData=[],this.prevViewData=[],this.shapeModifiers=[],this.processedElements=[],this.transformsManager=new ShapeTransformManager,this.initElement(t,e,r)}function CVTextElement(t,e,r){this.textSpans=[],this.yOffset=0,this.fillColorAnim=!1,this.strokeColorAnim=!1,this.strokeWidthAnim=!1,this.stroke=!1,this.fill=!1,this.justifyOffset=0,this.currentRender=null,this.renderType="canvas",this.values={fill:"rgba(0,0,0,0)",stroke:"rgba(0,0,0,0)",sWidth:0,fValue:""},this.initElement(t,e,r)}function CVImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.img=e.imageLoader.getAsset(this.assetData),this.initElement(t,e,r)}function CVSolidElement(t,e,r){this.initElement(t,e,r)}function CanvasRendererBase(t,e){this.animationItem=t,this.renderConfig={clearCanvas:!e||void 0===e.clearCanvas||e.clearCanvas,context:e&&e.context||null,progressiveLoad:e&&e.progressiveLoad||!1,preserveAspectRatio:e&&e.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:e&&e.contentVisibility||"visible",className:e&&e.className||"",id:e&&e.id||""},this.renderConfig.dpr=e&&e.dpr||1,this.animationItem.wrapper&&(this.renderConfig.dpr=e&&e.dpr||window.devicePixelRatio||1),this.renderedFrame=-1,this.globalData={frameNum:-1,_mdf:!1,renderConfig:this.renderConfig,currentGlobalAlpha:-1},this.contextData=new CVContextData,this.elements=[],this.pendingElements=[],this.transformMat=new Matrix,this.completeLayers=!1,this.rendererType="canvas"}function CVCompElement(t,e,r){this.completeLayers=!1,this.layers=t.layers,this.pendingElements=[],this.elements=createSizedArray(this.layers.length),this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}function CanvasRenderer(t,e){this.animationItem=t,this.renderConfig={clearCanvas:!e||void 0===e.clearCanvas||e.clearCanvas,context:e&&e.context||null,progressiveLoad:e&&e.progressiveLoad||!1,preserveAspectRatio:e&&e.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:e&&e.contentVisibility||"visible",className:e&&e.className||"",id:e&&e.id||""},this.renderConfig.dpr=e&&e.dpr||1,this.animationItem.wrapper&&(this.renderConfig.dpr=e&&e.dpr||window.devicePixelRatio||1),this.renderedFrame=-1,this.globalData={frameNum:-1,_mdf:!1,renderConfig:this.renderConfig,currentGlobalAlpha:-1},this.contextData=new CVContextData,this.elements=[],this.pendingElements=[],this.transformMat=new Matrix,this.completeLayers=!1,this.rendererType="canvas"}function HBaseElement(){}function HSolidElement(t,e,r){this.initElement(t,e,r)}function HShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.shapesContainer=createNS("g"),this.initElement(t,e,r),this.prevViewData=[],this.currentBBox={x:999999,y:-999999,h:0,w:0}}function HTextElement(t,e,r){this.textSpans=[],this.textPaths=[],this.currentBBox={x:999999,y:-999999,h:0,w:0},this.renderType="svg",this.isMasked=!1,this.initElement(t,e,r)}function HCameraElement(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initHierarchy();var n=PropertyFactory.getProp;if(this.pe=n(this,t.pe,0,0,this),t.ks.p.s?(this.px=n(this,t.ks.p.x,1,0,this),this.py=n(this,t.ks.p.y,1,0,this),this.pz=n(this,t.ks.p.z,1,0,this)):this.p=n(this,t.ks.p,1,0,this),t.ks.a&&(this.a=n(this,t.ks.a,1,0,this)),t.ks.or.k.length&&t.ks.or.k[0].to){var i,a=t.ks.or.k.length;for(i=0;i<a;i+=1)t.ks.or.k[i].to=null,t.ks.or.k[i].ti=null}this.or=n(this,t.ks.or,1,degToRads,this),this.or.sh=!0,this.rx=n(this,t.ks.rx,0,degToRads,this),this.ry=n(this,t.ks.ry,0,degToRads,this),this.rz=n(this,t.ks.rz,0,degToRads,this),this.mat=new Matrix,this._prevMat=new Matrix,this._isFirstFrame=!0,this.finalTransform={mProp:this}}function HImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.initElement(t,e,r)}function HybridRendererBase(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:e&&e.className||"",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(e&&!1===e.hideOnTransparent),filterSize:{width:e&&e.filterSize&&e.filterSize.width||"400%",height:e&&e.filterSize&&e.filterSize.height||"400%",x:e&&e.filterSize&&e.filterSize.x||"-100%",y:e&&e.filterSize&&e.filterSize.y||"-100%"}},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}function HCompElement(t,e,r){this.layers=t.layers,this.supports3d=!t.hasMask,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}function HybridRenderer(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:e&&e.className||"",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(e&&!1===e.hideOnTransparent),filterSize:{width:e&&e.filterSize&&e.filterSize.width||"400%",height:e&&e.filterSize&&e.filterSize.height||"400%",x:e&&e.filterSize&&e.filterSize.x||"-100%",y:e&&e.filterSize&&e.filterSize.y||"-100%"}},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],SVGTextLottieElement),SVGTextLottieElement.prototype.createContent=function(){this.data.singleShape&&!this.globalData.fontManager.chars&&(this.textContainer=createNS("text"))},SVGTextLottieElement.prototype.buildTextContents=function(t){for(var e=0,r=t.length,n=[],i="";e<r;)t[e]===String.fromCharCode(13)||t[e]===String.fromCharCode(3)?(n.push(i),i=""):i+=t[e],e+=1;return n.push(i),n},SVGTextLottieElement.prototype.buildShapeData=function(t,e){if(t.shapes&&t.shapes.length){var r=t.shapes[0];if(r.it){var n=r.it[r.it.length-1];n.s&&(n.s.k[0]=e,n.s.k[1]=e)}}return t},SVGTextLottieElement.prototype.buildNewText=function(){var t,e;this.addDynamicProperty(this);var r=this.textProperty.currentData;this.renderedLetters=createSizedArray(r?r.l.length:0),r.fc?this.layerElement.setAttribute("fill",this.buildColor(r.fc)):this.layerElement.setAttribute("fill","rgba(0,0,0,0)"),r.sc&&(this.layerElement.setAttribute("stroke",this.buildColor(r.sc)),this.layerElement.setAttribute("stroke-width",r.sw)),this.layerElement.setAttribute("font-size",r.finalSize);var n=this.globalData.fontManager.getFontByName(r.f);if(n.fClass)this.layerElement.setAttribute("class",n.fClass);else{this.layerElement.setAttribute("font-family",n.fFamily);var i=r.fWeight,a=r.fStyle;this.layerElement.setAttribute("font-style",a),this.layerElement.setAttribute("font-weight",i)}this.layerElement.setAttribute("aria-label",r.t);var s,o=r.l||[],l=!!this.globalData.fontManager.chars;e=o.length;var h=this.mHelper,u=this.data.singleShape,c=0,p=0,f=!0,d=.001*r.tr*r.finalSize;if(!u||l||r.sz){var m,g=this.textSpans.length;for(t=0;t<e;t+=1){if(this.textSpans[t]||(this.textSpans[t]={span:null,childSpan:null,glyph:null}),!l||!u||0===t){if(s=g>t?this.textSpans[t].span:createNS(l?"g":"text"),g<=t){if(s.setAttribute("stroke-linecap","butt"),s.setAttribute("stroke-linejoin","round"),s.setAttribute("stroke-miterlimit","4"),this.textSpans[t].span=s,l){var y=createNS("g");s.appendChild(y),this.textSpans[t].childSpan=y}this.textSpans[t].span=s,this.layerElement.appendChild(s)}s.style.display="inherit"}if(h.reset(),u&&(o[t].n&&(c=-d,p+=r.yOffset,p+=f?1:0,f=!1),this.applyTextPropertiesToMatrix(r,h,o[t].line,c,p),c+=o[t].l||0,c+=d),l){var v;if(1===(m=this.globalData.fontManager.getCharData(r.finalText[t],n.fStyle,this.globalData.fontManager.getFontByName(r.f).fFamily)).t)v=new SVGCompElement(m.data,this.globalData,this);else{var b=emptyShapeData;m.data&&m.data.shapes&&(b=this.buildShapeData(m.data,r.finalSize)),v=new SVGShapeElement(b,this.globalData,this)}if(this.textSpans[t].glyph){var w=this.textSpans[t].glyph;this.textSpans[t].childSpan.removeChild(w.layerElement),w.destroy()}this.textSpans[t].glyph=v,v._debug=!0,v.prepareFrame(0),v.renderFrame(),this.textSpans[t].childSpan.appendChild(v.layerElement),1===m.t&&this.textSpans[t].childSpan.setAttribute("transform","scale("+r.finalSize/100+","+r.finalSize/100+")")}else u&&s.setAttribute("transform","translate("+h.props[12]+","+h.props[13]+")"),s.textContent=o[t].val,s.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve")}u&&s&&s.setAttribute("d","")}else{var x=this.textContainer,_="start";switch(r.j){case 1:_="end";break;case 2:_="middle";break;default:_="start"}x.setAttribute("text-anchor",_),x.setAttribute("letter-spacing",d);var k=this.buildTextContents(r.finalText);for(e=k.length,p=r.ps?r.ps[1]+r.ascent:0,t=0;t<e;t+=1)(s=this.textSpans[t].span||createNS("tspan")).textContent=k[t],s.setAttribute("x",0),s.setAttribute("y",p),s.style.display="inherit",x.appendChild(s),this.textSpans[t]||(this.textSpans[t]={span:null,glyph:null}),this.textSpans[t].span=s,p+=r.finalLineHeight;this.layerElement.appendChild(x)}for(;t<this.textSpans.length;)this.textSpans[t].span.style.display="none",t+=1;this._sizeChanged=!0},SVGTextLottieElement.prototype.sourceRectAtTime=function(){if(this.prepareFrame(this.comp.renderedFrame-this.data.st),this.renderInnerContent(),this._sizeChanged){this._sizeChanged=!1;var t=this.layerElement.getBBox();this.bbox={top:t.y,left:t.x,width:t.width,height:t.height}}return this.bbox},SVGTextLottieElement.prototype.getValue=function(){var t,e,r=this.textSpans.length;for(this.renderedFrame=this.comp.renderedFrame,t=0;t<r;t+=1)(e=this.textSpans[t].glyph)&&(e.prepareFrame(this.comp.renderedFrame-this.data.st),e._mdf&&(this._mdf=!0))},SVGTextLottieElement.prototype.renderInnerContent=function(){if((!this.data.singleShape||this._mdf)&&(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),this.lettersChangedFlag||this.textAnimator.lettersChangedFlag)){var t,e;this._sizeChanged=!0;var r,n,i,a=this.textAnimator.renderedLetters,s=this.textProperty.currentData.l;for(e=s.length,t=0;t<e;t+=1)s[t].n||(r=a[t],n=this.textSpans[t].span,(i=this.textSpans[t].glyph)&&i.renderFrame(),r._mdf.m&&n.setAttribute("transform",r.m),r._mdf.o&&n.setAttribute("opacity",r.o),r._mdf.sw&&n.setAttribute("stroke-width",r.sw),r._mdf.sc&&n.setAttribute("stroke",r.sc),r._mdf.fc&&n.setAttribute("fill",r.fc))}},extendPrototype([IImageElement],ISolidElement),ISolidElement.prototype.createContent=function(){var t=createNS("rect");t.setAttribute("width",this.data.sw),t.setAttribute("height",this.data.sh),t.setAttribute("fill",this.data.sc),this.layerElement.appendChild(t)},NullElement.prototype.prepareFrame=function(t){this.prepareProperties(t,!0)},NullElement.prototype.renderFrame=function(){},NullElement.prototype.getBaseElement=function(){return null},NullElement.prototype.destroy=function(){},NullElement.prototype.sourceRectAtTime=function(){},NullElement.prototype.hide=function(){},extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement],NullElement),extendPrototype([BaseRenderer],SVGRendererBase),SVGRendererBase.prototype.createNull=function(t){return new NullElement(t,this.globalData,this)},SVGRendererBase.prototype.createShape=function(t){return new SVGShapeElement(t,this.globalData,this)},SVGRendererBase.prototype.createText=function(t){return new SVGTextLottieElement(t,this.globalData,this)},SVGRendererBase.prototype.createImage=function(t){return new IImageElement(t,this.globalData,this)},SVGRendererBase.prototype.createSolid=function(t){return new ISolidElement(t,this.globalData,this)},SVGRendererBase.prototype.configAnimation=function(t){this.svgElement.setAttribute("xmlns","http://www.w3.org/2000/svg"),this.renderConfig.viewBoxSize?this.svgElement.setAttribute("viewBox",this.renderConfig.viewBoxSize):this.svgElement.setAttribute("viewBox","0 0 "+t.w+" "+t.h),this.renderConfig.viewBoxOnly||(this.svgElement.setAttribute("width",t.w),this.svgElement.setAttribute("height",t.h),this.svgElement.style.width="100%",this.svgElement.style.height="100%",this.svgElement.style.transform="translate3d(0,0,0)",this.svgElement.style.contentVisibility=this.renderConfig.contentVisibility),this.renderConfig.width&&this.svgElement.setAttribute("width",this.renderConfig.width),this.renderConfig.height&&this.svgElement.setAttribute("height",this.renderConfig.height),this.renderConfig.className&&this.svgElement.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.svgElement.setAttribute("id",this.renderConfig.id),void 0!==this.renderConfig.focusable&&this.svgElement.setAttribute("focusable",this.renderConfig.focusable),this.svgElement.setAttribute("preserveAspectRatio",this.renderConfig.preserveAspectRatio),this.animationItem.wrapper.appendChild(this.svgElement);var e=this.globalData.defs;this.setupGlobalData(t,e),this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.data=t;var r=createNS("clipPath"),n=createNS("rect");n.setAttribute("width",t.w),n.setAttribute("height",t.h),n.setAttribute("x",0),n.setAttribute("y",0);var i=createElementID();r.setAttribute("id",i),r.appendChild(n),this.layerElement.setAttribute("clip-path","url("+getLocationHref()+"#"+i+")"),e.appendChild(r),this.layers=t.layers,this.elements=createSizedArray(t.layers.length)},SVGRendererBase.prototype.destroy=function(){var t;this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.layerElement=null,this.globalData.defs=null;var e=this.layers?this.layers.length:0;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},SVGRendererBase.prototype.updateContainerSize=function(){},SVGRendererBase.prototype.buildItem=function(t){var e=this.elements;if(!e[t]&&99!==this.layers[t].ty){e[t]=!0;var r=this.createItem(this.layers[t]);e[t]=r,getExpressionsPlugin()&&(0===this.layers[t].ty&&this.globalData.projectInterface.registerComposition(r),r.initExpressions()),this.appendElementInPos(r,t),this.layers[t].tt&&(this.elements[t-1]&&!0!==this.elements[t-1]?r.setMatte(e[t-1].layerId):(this.buildItem(t-1),this.addPendingElement(r)))}},SVGRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var t=this.pendingElements.pop();if(t.checkParenting(),t.data.tt)for(var e=0,r=this.elements.length;e<r;){if(this.elements[e]===t){t.setMatte(this.elements[e-1].layerId);break}e+=1}}},SVGRendererBase.prototype.renderFrame=function(t){if(this.renderedFrame!==t&&!this.destroyed){var e;null===t?t=this.renderedFrame:this.renderedFrame=t,this.globalData.frameNum=t,this.globalData.frameId+=1,this.globalData.projectInterface.currentFrame=t,this.globalData._mdf=!1;var r=this.layers.length;for(this.completeLayers||this.checkLayers(t),e=r-1;e>=0;e-=1)(this.completeLayers||this.elements[e])&&this.elements[e].prepareFrame(t-this.layers[e].st);if(this.globalData._mdf)for(e=0;e<r;e+=1)(this.completeLayers||this.elements[e])&&this.elements[e].renderFrame()}},SVGRendererBase.prototype.appendElementInPos=function(t,e){var r=t.getBaseElement();if(r){for(var n,i=0;i<e;)this.elements[i]&&!0!==this.elements[i]&&this.elements[i].getBaseElement()&&(n=this.elements[i].getBaseElement()),i+=1;n?this.layerElement.insertBefore(r,n):this.layerElement.appendChild(r)}},SVGRendererBase.prototype.hide=function(){this.layerElement.style.display="none"},SVGRendererBase.prototype.show=function(){this.layerElement.style.display="block"},extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement,RenderableDOMElement],ICompElement),ICompElement.prototype.initElement=function(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initTransform(t,e,r),this.initRenderable(),this.initHierarchy(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),!this.data.xt&&e.progressiveLoad||this.buildAllItems(),this.hide()},ICompElement.prototype.prepareFrame=function(t){if(this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange),this.isInRange||this.data.xt){if(this.tm._placeholder)this.renderedFrame=t/this.data.sr;else{var e=this.tm.v;e===this.data.op&&(e=this.data.op-1),this.renderedFrame=e}var r,n=this.elements.length;for(this.completeLayers||this.checkLayers(this.renderedFrame),r=n-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&(this.elements[r].prepareFrame(this.renderedFrame-this.layers[r].st),this.elements[r]._mdf&&(this._mdf=!0))}},ICompElement.prototype.renderInnerContent=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)(this.completeLayers||this.elements[t])&&this.elements[t].renderFrame()},ICompElement.prototype.setElements=function(t){this.elements=t},ICompElement.prototype.getElements=function(){return this.elements},ICompElement.prototype.destroyElements=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy()},ICompElement.prototype.destroy=function(){this.destroyElements(),this.destroyBaseElement()},extendPrototype([SVGRendererBase,ICompElement,SVGBaseElement],SVGCompElement),SVGCompElement.prototype.createComp=function(t){return new SVGCompElement(t,this.globalData,this)},extendPrototype([SVGRendererBase],SVGRenderer),SVGRenderer.prototype.createComp=function(t){return new SVGCompElement(t,this.globalData,this)},CVContextData.prototype.duplicate=function(){var t=2*this._length,e=this.savedOp;this.savedOp=createTypedArray("float32",t),this.savedOp.set(e);var r=0;for(r=this._length;r<t;r+=1)this.saved[r]=createTypedArray("float32",16);this._length=t},CVContextData.prototype.reset=function(){this.cArrPos=0,this.cTr.reset(),this.cO=1},ShapeTransformManager.prototype={addTransformSequence:function(t){var e,r=t.length,n="_";for(e=0;e<r;e+=1)n+=t[e].transform.key+"_";var i=this.sequences[n];return i||(i={transforms:[].concat(t),finalTransform:new Matrix,_mdf:!1},this.sequences[n]=i,this.sequenceList.push(i)),i},processSequence:function(t,e){for(var r,n=0,i=t.transforms.length,a=e;n<i&&!e;){if(t.transforms[n].transform.mProps._mdf){a=!0;break}n+=1}if(a)for(t.finalTransform.reset(),n=i-1;n>=0;n-=1)r=t.transforms[n].transform.mProps.v.props,t.finalTransform.transform(r[0],r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10],r[11],r[12],r[13],r[14],r[15]);t._mdf=a},processSequences:function(t){var e,r=this.sequenceList.length;for(e=0;e<r;e+=1)this.processSequence(this.sequenceList[e],t)},getNewKey:function(){return this.transform_key_count+=1,"_"+this.transform_key_count}},CVEffects.prototype.renderFrame=function(){},CVMaskElement.prototype.renderFrame=function(){if(this.hasMasks){var t,e,r,n,i=this.element.finalTransform.mat,a=this.element.canvasContext,s=this.masksProperties.length;for(a.beginPath(),t=0;t<s;t+=1)if("n"!==this.masksProperties[t].mode){var o;this.masksProperties[t].inv&&(a.moveTo(0,0),a.lineTo(this.element.globalData.compSize.w,0),a.lineTo(this.element.globalData.compSize.w,this.element.globalData.compSize.h),a.lineTo(0,this.element.globalData.compSize.h),a.lineTo(0,0)),n=this.viewData[t].v,e=i.applyToPointArray(n.v[0][0],n.v[0][1],0),a.moveTo(e[0],e[1]);var l=n._length;for(o=1;o<l;o+=1)r=i.applyToTriplePoints(n.o[o-1],n.i[o],n.v[o]),a.bezierCurveTo(r[0],r[1],r[2],r[3],r[4],r[5]);r=i.applyToTriplePoints(n.o[o-1],n.i[0],n.v[0]),a.bezierCurveTo(r[0],r[1],r[2],r[3],r[4],r[5])}this.element.globalData.renderer.save(!0),a.clip()}},CVMaskElement.prototype.getMaskProperty=MaskElement.prototype.getMaskProperty,CVMaskElement.prototype.destroy=function(){this.element=null},CVBaseElement.prototype={createElements:function(){},initRendererElement:function(){},createContainerElements:function(){this.canvasContext=this.globalData.canvasContext,this.renderableEffectsManager=new CVEffects(this)},createContent:function(){},setBlendMode:function(){var t=this.globalData;if(t.blendMode!==this.data.bm){t.blendMode=this.data.bm;var e=getBlendMode(this.data.bm);t.canvasContext.globalCompositeOperation=e}},createRenderableComponents:function(){this.maskManager=new CVMaskElement(this.data,this)},hideElement:function(){this.hidden||this.isInRange&&!this.isTransparent||(this.hidden=!0)},showElement:function(){this.isInRange&&!this.isTransparent&&(this.hidden=!1,this._isFirstFrame=!0,this.maskManager._isFirstFrame=!0)},renderFrame:function(){if(!this.hidden&&!this.data.hd){this.renderTransform(),this.renderRenderable(),this.setBlendMode();var t=0===this.data.ty;this.globalData.renderer.save(t),this.globalData.renderer.ctxTransform(this.finalTransform.mat.props),this.globalData.renderer.ctxOpacity(this.finalTransform.mProp.o.v),this.renderInnerContent(),this.globalData.renderer.restore(t),this.maskManager.hasMasks&&this.globalData.renderer.restore(!0),this._isFirstFrame&&(this._isFirstFrame=!1)}},destroy:function(){this.canvasContext=null,this.data=null,this.globalData=null,this.maskManager.destroy()},mHelper:new Matrix},CVBaseElement.prototype.hide=CVBaseElement.prototype.hideElement,CVBaseElement.prototype.show=CVBaseElement.prototype.showElement,CVShapeData.prototype.setAsAnimated=SVGShapeData.prototype.setAsAnimated,extendPrototype([BaseElement,TransformElement,CVBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableElement],CVShapeElement),CVShapeElement.prototype.initElement=RenderableDOMElement.prototype.initElement,CVShapeElement.prototype.transformHelper={opacity:1,_opMdf:!1},CVShapeElement.prototype.dashResetter=[],CVShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[])},CVShapeElement.prototype.createStyleElement=function(t,e){var r={data:t,type:t.ty,preTransforms:this.transformsManager.addTransformSequence(e),transforms:[],elements:[],closed:!0===t.hd},n={};if("fl"===t.ty||"st"===t.ty?(n.c=PropertyFactory.getProp(this,t.c,1,255,this),n.c.k||(r.co="rgb("+bmFloor(n.c.v[0])+","+bmFloor(n.c.v[1])+","+bmFloor(n.c.v[2])+")")):"gf"!==t.ty&&"gs"!==t.ty||(n.s=PropertyFactory.getProp(this,t.s,1,null,this),n.e=PropertyFactory.getProp(this,t.e,1,null,this),n.h=PropertyFactory.getProp(this,t.h||{k:0},0,.01,this),n.a=PropertyFactory.getProp(this,t.a||{k:0},0,degToRads,this),n.g=new GradientProperty(this,t.g,this)),n.o=PropertyFactory.getProp(this,t.o,0,.01,this),"st"===t.ty||"gs"===t.ty){if(r.lc=lineCapEnum[t.lc||2],r.lj=lineJoinEnum[t.lj||2],1==t.lj&&(r.ml=t.ml),n.w=PropertyFactory.getProp(this,t.w,0,null,this),n.w.k||(r.wi=n.w.v),t.d){var i=new DashProperty(this,t.d,"canvas",this);n.d=i,n.d.k||(r.da=n.d.dashArray,r.do=n.d.dashoffset[0])}}else r.r=2===t.r?"evenodd":"nonzero";return this.stylesList.push(r),n.style=r,n},CVShapeElement.prototype.createGroupElement=function(){return{it:[],prevViewData:[]}},CVShapeElement.prototype.createTransformElement=function(t){return{transform:{opacity:1,_opMdf:!1,key:this.transformsManager.getNewKey(),op:PropertyFactory.getProp(this,t.o,0,.01,this),mProps:TransformPropertyFactory.getTransformProperty(this,t,this)}}},CVShapeElement.prototype.createShapeElement=function(t){var e=new CVShapeData(this,t,this.stylesList,this.transformsManager);return this.shapes.push(e),this.addShapeToModifiers(e),e},CVShapeElement.prototype.reloadShapes=function(){var t;this._isFirstFrame=!0;var e=this.itemsData.length;for(t=0;t<e;t+=1)this.prevViewData[t]=this.itemsData[t];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[]),e=this.dynamicProperties.length,t=0;t<e;t+=1)this.dynamicProperties[t].getValue();this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame)},CVShapeElement.prototype.addTransformToStyleList=function(t){var e,r=this.stylesList.length;for(e=0;e<r;e+=1)this.stylesList[e].closed||this.stylesList[e].transforms.push(t)},CVShapeElement.prototype.removeTransformFromStyleList=function(){var t,e=this.stylesList.length;for(t=0;t<e;t+=1)this.stylesList[t].closed||this.stylesList[t].transforms.pop()},CVShapeElement.prototype.closeStyles=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e].closed=!0},CVShapeElement.prototype.searchShapes=function(t,e,r,n,i){var a,s,o,l,h,u,c=t.length-1,p=[],f=[],d=[].concat(i);for(a=c;a>=0;a-=1){if((l=this.searchProcessedElement(t[a]))?e[a]=r[l-1]:t[a]._shouldRender=n,"fl"===t[a].ty||"st"===t[a].ty||"gf"===t[a].ty||"gs"===t[a].ty)l?e[a].style.closed=!1:e[a]=this.createStyleElement(t[a],d),p.push(e[a].style);else if("gr"===t[a].ty){if(l)for(o=e[a].it.length,s=0;s<o;s+=1)e[a].prevViewData[s]=e[a].it[s];else e[a]=this.createGroupElement(t[a]);this.searchShapes(t[a].it,e[a].it,e[a].prevViewData,n,d)}else"tr"===t[a].ty?(l||(u=this.createTransformElement(t[a]),e[a]=u),d.push(e[a]),this.addTransformToStyleList(e[a])):"sh"===t[a].ty||"rc"===t[a].ty||"el"===t[a].ty||"sr"===t[a].ty?l||(e[a]=this.createShapeElement(t[a])):"tm"===t[a].ty||"rd"===t[a].ty||"pb"===t[a].ty?(l?(h=e[a]).closed=!1:((h=ShapeModifiers.getModifier(t[a].ty)).init(this,t[a]),e[a]=h,this.shapeModifiers.push(h)),f.push(h)):"rp"===t[a].ty&&(l?(h=e[a]).closed=!0:(h=ShapeModifiers.getModifier(t[a].ty),e[a]=h,h.init(this,t,a,e),this.shapeModifiers.push(h),n=!1),f.push(h));this.addProcessedElement(t[a],a+1)}for(this.removeTransformFromStyleList(),this.closeStyles(p),c=f.length,a=0;a<c;a+=1)f[a].closed=!0},CVShapeElement.prototype.renderInnerContent=function(){this.transformHelper.opacity=1,this.transformHelper._opMdf=!1,this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame),this.renderShape(this.transformHelper,this.shapesData,this.itemsData,!0)},CVShapeElement.prototype.renderShapeTransform=function(t,e){(t._opMdf||e.op._mdf||this._isFirstFrame)&&(e.opacity=t.opacity,e.opacity*=e.op.v,e._opMdf=!0)},CVShapeElement.prototype.drawLayer=function(){var t,e,r,n,i,a,s,o,l,h=this.stylesList.length,u=this.globalData.renderer,c=this.globalData.canvasContext;for(t=0;t<h;t+=1)if(("st"!==(o=(l=this.stylesList[t]).type)&&"gs"!==o||0!==l.wi)&&l.data._shouldRender&&0!==l.coOp&&0!==this.globalData.currentGlobalAlpha){for(u.save(),a=l.elements,"st"===o||"gs"===o?(c.strokeStyle="st"===o?l.co:l.grd,c.lineWidth=l.wi,c.lineCap=l.lc,c.lineJoin=l.lj,c.miterLimit=l.ml||0):c.fillStyle="fl"===o?l.co:l.grd,u.ctxOpacity(l.coOp),"st"!==o&&"gs"!==o&&c.beginPath(),u.ctxTransform(l.preTransforms.finalTransform.props),r=a.length,e=0;e<r;e+=1){for("st"!==o&&"gs"!==o||(c.beginPath(),l.da&&(c.setLineDash(l.da),c.lineDashOffset=l.do)),i=(s=a[e].trNodes).length,n=0;n<i;n+=1)"m"===s[n].t?c.moveTo(s[n].p[0],s[n].p[1]):"c"===s[n].t?c.bezierCurveTo(s[n].pts[0],s[n].pts[1],s[n].pts[2],s[n].pts[3],s[n].pts[4],s[n].pts[5]):c.closePath();"st"!==o&&"gs"!==o||(c.stroke(),l.da&&c.setLineDash(this.dashResetter))}"st"!==o&&"gs"!==o&&c.fill(l.r),u.restore()}},CVShapeElement.prototype.renderShape=function(t,e,r,n){var i,a;for(a=t,i=e.length-1;i>=0;i-=1)"tr"===e[i].ty?(a=r[i].transform,this.renderShapeTransform(t,a)):"sh"===e[i].ty||"el"===e[i].ty||"rc"===e[i].ty||"sr"===e[i].ty?this.renderPath(e[i],r[i]):"fl"===e[i].ty?this.renderFill(e[i],r[i],a):"st"===e[i].ty?this.renderStroke(e[i],r[i],a):"gf"===e[i].ty||"gs"===e[i].ty?this.renderGradientFill(e[i],r[i],a):"gr"===e[i].ty?this.renderShape(a,e[i].it,r[i].it):e[i].ty;n&&this.drawLayer()},CVShapeElement.prototype.renderStyledShape=function(t,e){if(this._isFirstFrame||e._mdf||t.transforms._mdf){var r,n,i,a=t.trNodes,s=e.paths,o=s._length;a.length=0;var l=t.transforms.finalTransform;for(i=0;i<o;i+=1){var h=s.shapes[i];if(h&&h.v){for(n=h._length,r=1;r<n;r+=1)1===r&&a.push({t:"m",p:l.applyToPointArray(h.v[0][0],h.v[0][1],0)}),a.push({t:"c",pts:l.applyToTriplePoints(h.o[r-1],h.i[r],h.v[r])});1===n&&a.push({t:"m",p:l.applyToPointArray(h.v[0][0],h.v[0][1],0)}),h.c&&n&&(a.push({t:"c",pts:l.applyToTriplePoints(h.o[r-1],h.i[0],h.v[0])}),a.push({t:"z"}))}}t.trNodes=a}},CVShapeElement.prototype.renderPath=function(t,e){if(!0!==t.hd&&t._shouldRender){var r,n=e.styledShapes.length;for(r=0;r<n;r+=1)this.renderStyledShape(e.styledShapes[r],e.sh)}},CVShapeElement.prototype.renderFill=function(t,e,r){var n=e.style;(e.c._mdf||this._isFirstFrame)&&(n.co="rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r._opMdf||this._isFirstFrame)&&(n.coOp=e.o.v*r.opacity)},CVShapeElement.prototype.renderGradientFill=function(t,e,r){var n,i=e.style;if(!i.grd||e.g._mdf||e.s._mdf||e.e._mdf||1!==t.t&&(e.h._mdf||e.a._mdf)){var a,s=this.globalData.canvasContext,o=e.s.v,l=e.e.v;if(1===t.t)n=s.createLinearGradient(o[0],o[1],l[0],l[1]);else{var h=Math.sqrt(Math.pow(o[0]-l[0],2)+Math.pow(o[1]-l[1],2)),u=Math.atan2(l[1]-o[1],l[0]-o[0]),c=e.h.v;c>=1?c=.99:c<=-1&&(c=-.99);var p=h*c,f=Math.cos(u+e.a.v)*p+o[0],d=Math.sin(u+e.a.v)*p+o[1];n=s.createRadialGradient(f,d,0,o[0],o[1],h)}var m=t.g.p,g=e.g.c,y=1;for(a=0;a<m;a+=1)e.g._hasOpacity&&e.g._collapsable&&(y=e.g.o[2*a+1]),n.addColorStop(g[4*a]/100,"rgba("+g[4*a+1]+","+g[4*a+2]+","+g[4*a+3]+","+y+")");i.grd=n}i.coOp=e.o.v*r.opacity},CVShapeElement.prototype.renderStroke=function(t,e,r){var n=e.style,i=e.d;i&&(i._mdf||this._isFirstFrame)&&(n.da=i.dashArray,n.do=i.dashoffset[0]),(e.c._mdf||this._isFirstFrame)&&(n.co="rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r._opMdf||this._isFirstFrame)&&(n.coOp=e.o.v*r.opacity),(e.w._mdf||this._isFirstFrame)&&(n.wi=e.w.v)},CVShapeElement.prototype.destroy=function(){this.shapesData=null,this.globalData=null,this.canvasContext=null,this.stylesList.length=0,this.itemsData.length=0},extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement,ITextElement],CVTextElement),CVTextElement.prototype.tHelper=createTag("canvas").getContext("2d"),CVTextElement.prototype.buildNewText=function(){var t=this.textProperty.currentData;this.renderedLetters=createSizedArray(t.l?t.l.length:0);var e=!1;t.fc?(e=!0,this.values.fill=this.buildColor(t.fc)):this.values.fill="rgba(0,0,0,0)",this.fill=e;var r=!1;t.sc&&(r=!0,this.values.stroke=this.buildColor(t.sc),this.values.sWidth=t.sw);var n,i,a,s,o,l,h,u,c,p,f,d,m=this.globalData.fontManager.getFontByName(t.f),g=t.l,y=this.mHelper;this.stroke=r,this.values.fValue=t.finalSize+"px "+this.globalData.fontManager.getFontByName(t.f).fFamily,i=t.finalText.length;var v=this.data.singleShape,b=.001*t.tr*t.finalSize,w=0,x=0,_=!0,k=0;for(n=0;n<i;n+=1){s=(a=this.globalData.fontManager.getCharData(t.finalText[n],m.fStyle,this.globalData.fontManager.getFontByName(t.f).fFamily))&&a.data||{},y.reset(),v&&g[n].n&&(w=-b,x+=t.yOffset,x+=_?1:0,_=!1),c=(h=s.shapes?s.shapes[0].it:[]).length,y.scale(t.finalSize/100,t.finalSize/100),v&&this.applyTextPropertiesToMatrix(t,y,g[n].line,w,x),f=createSizedArray(c-1);var S=0;for(u=0;u<c;u+=1)if("sh"===h[u].ty){for(l=h[u].ks.k.i.length,p=h[u].ks.k,d=[],o=1;o<l;o+=1)1===o&&d.push(y.applyToX(p.v[0][0],p.v[0][1],0),y.applyToY(p.v[0][0],p.v[0][1],0)),d.push(y.applyToX(p.o[o-1][0],p.o[o-1][1],0),y.applyToY(p.o[o-1][0],p.o[o-1][1],0),y.applyToX(p.i[o][0],p.i[o][1],0),y.applyToY(p.i[o][0],p.i[o][1],0),y.applyToX(p.v[o][0],p.v[o][1],0),y.applyToY(p.v[o][0],p.v[o][1],0));d.push(y.applyToX(p.o[o-1][0],p.o[o-1][1],0),y.applyToY(p.o[o-1][0],p.o[o-1][1],0),y.applyToX(p.i[0][0],p.i[0][1],0),y.applyToY(p.i[0][0],p.i[0][1],0),y.applyToX(p.v[0][0],p.v[0][1],0),y.applyToY(p.v[0][0],p.v[0][1],0)),f[S]=d,S+=1}v&&(w+=g[n].l,w+=b),this.textSpans[k]?this.textSpans[k].elem=f:this.textSpans[k]={elem:f},k+=1}},CVTextElement.prototype.renderInnerContent=function(){var t,e,r,n,i,a,s=this.canvasContext;s.font=this.values.fValue,s.lineCap="butt",s.lineJoin="miter",s.miterLimit=4,this.data.singleShape||this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag);var o,l=this.textAnimator.renderedLetters,h=this.textProperty.currentData.l;e=h.length;var u,c,p=null,f=null,d=null;for(t=0;t<e;t+=1)if(!h[t].n){if((o=l[t])&&(this.globalData.renderer.save(),this.globalData.renderer.ctxTransform(o.p),this.globalData.renderer.ctxOpacity(o.o)),this.fill){for(o&&o.fc?p!==o.fc&&(p=o.fc,s.fillStyle=o.fc):p!==this.values.fill&&(p=this.values.fill,s.fillStyle=this.values.fill),n=(u=this.textSpans[t].elem).length,this.globalData.canvasContext.beginPath(),r=0;r<n;r+=1)for(a=(c=u[r]).length,this.globalData.canvasContext.moveTo(c[0],c[1]),i=2;i<a;i+=6)this.globalData.canvasContext.bezierCurveTo(c[i],c[i+1],c[i+2],c[i+3],c[i+4],c[i+5]);this.globalData.canvasContext.closePath(),this.globalData.canvasContext.fill()}if(this.stroke){for(o&&o.sw?d!==o.sw&&(d=o.sw,s.lineWidth=o.sw):d!==this.values.sWidth&&(d=this.values.sWidth,s.lineWidth=this.values.sWidth),o&&o.sc?f!==o.sc&&(f=o.sc,s.strokeStyle=o.sc):f!==this.values.stroke&&(f=this.values.stroke,s.strokeStyle=this.values.stroke),n=(u=this.textSpans[t].elem).length,this.globalData.canvasContext.beginPath(),r=0;r<n;r+=1)for(a=(c=u[r]).length,this.globalData.canvasContext.moveTo(c[0],c[1]),i=2;i<a;i+=6)this.globalData.canvasContext.bezierCurveTo(c[i],c[i+1],c[i+2],c[i+3],c[i+4],c[i+5]);this.globalData.canvasContext.closePath(),this.globalData.canvasContext.stroke()}o&&this.globalData.renderer.restore()}},extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVImageElement),CVImageElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVImageElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVImageElement.prototype.createContent=function(){if(this.img.width&&(this.assetData.w!==this.img.width||this.assetData.h!==this.img.height)){var t=createTag("canvas");t.width=this.assetData.w,t.height=this.assetData.h;var e,r,n=t.getContext("2d"),i=this.img.width,a=this.img.height,s=i/a,o=this.assetData.w/this.assetData.h,l=this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio;s>o&&"xMidYMid slice"===l||s<o&&"xMidYMid slice"!==l?e=(r=a)*o:r=(e=i)/o,n.drawImage(this.img,(i-e)/2,(a-r)/2,e,r,0,0,this.assetData.w,this.assetData.h),this.img=t}},CVImageElement.prototype.renderInnerContent=function(){this.canvasContext.drawImage(this.img,0,0)},CVImageElement.prototype.destroy=function(){this.img=null},extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVSolidElement),CVSolidElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVSolidElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVSolidElement.prototype.renderInnerContent=function(){var t=this.canvasContext;t.fillStyle=this.data.sc,t.fillRect(0,0,this.data.sw,this.data.sh)},extendPrototype([BaseRenderer],CanvasRendererBase),CanvasRendererBase.prototype.createShape=function(t){return new CVShapeElement(t,this.globalData,this)},CanvasRendererBase.prototype.createText=function(t){return new CVTextElement(t,this.globalData,this)},CanvasRendererBase.prototype.createImage=function(t){return new CVImageElement(t,this.globalData,this)},CanvasRendererBase.prototype.createSolid=function(t){return new CVSolidElement(t,this.globalData,this)},CanvasRendererBase.prototype.createNull=SVGRenderer.prototype.createNull,CanvasRendererBase.prototype.ctxTransform=function(t){if(1!==t[0]||0!==t[1]||0!==t[4]||1!==t[5]||0!==t[12]||0!==t[13])if(this.renderConfig.clearCanvas){this.transformMat.cloneFromProps(t);var e=this.contextData.cTr.props;this.transformMat.transform(e[0],e[1],e[2],e[3],e[4],e[5],e[6],e[7],e[8],e[9],e[10],e[11],e[12],e[13],e[14],e[15]),this.contextData.cTr.cloneFromProps(this.transformMat.props);var r=this.contextData.cTr.props;this.canvasContext.setTransform(r[0],r[1],r[4],r[5],r[12],r[13])}else this.canvasContext.transform(t[0],t[1],t[4],t[5],t[12],t[13])},CanvasRendererBase.prototype.ctxOpacity=function(t){if(!this.renderConfig.clearCanvas)return this.canvasContext.globalAlpha*=t<0?0:t,void(this.globalData.currentGlobalAlpha=this.contextData.cO);this.contextData.cO*=t<0?0:t,this.globalData.currentGlobalAlpha!==this.contextData.cO&&(this.canvasContext.globalAlpha=this.contextData.cO,this.globalData.currentGlobalAlpha=this.contextData.cO)},CanvasRendererBase.prototype.reset=function(){this.renderConfig.clearCanvas?this.contextData.reset():this.canvasContext.restore()},CanvasRendererBase.prototype.save=function(t){if(this.renderConfig.clearCanvas){t&&this.canvasContext.save();var e,r=this.contextData.cTr.props;this.contextData._length<=this.contextData.cArrPos&&this.contextData.duplicate();var n=this.contextData.saved[this.contextData.cArrPos];for(e=0;e<16;e+=1)n[e]=r[e];this.contextData.savedOp[this.contextData.cArrPos]=this.contextData.cO,this.contextData.cArrPos+=1}else this.canvasContext.save()},CanvasRendererBase.prototype.restore=function(t){if(this.renderConfig.clearCanvas){t&&(this.canvasContext.restore(),this.globalData.blendMode="source-over"),this.contextData.cArrPos-=1;var e,r=this.contextData.saved[this.contextData.cArrPos],n=this.contextData.cTr.props;for(e=0;e<16;e+=1)n[e]=r[e];this.canvasContext.setTransform(r[0],r[1],r[4],r[5],r[12],r[13]),r=this.contextData.savedOp[this.contextData.cArrPos],this.contextData.cO=r,this.globalData.currentGlobalAlpha!==r&&(this.canvasContext.globalAlpha=r,this.globalData.currentGlobalAlpha=r)}else this.canvasContext.restore()},CanvasRendererBase.prototype.configAnimation=function(t){if(this.animationItem.wrapper){this.animationItem.container=createTag("canvas");var e=this.animationItem.container.style;e.width="100%",e.height="100%";var r="0px 0px 0px";e.transformOrigin=r,e.mozTransformOrigin=r,e.webkitTransformOrigin=r,e["-webkit-transform"]=r,e.contentVisibility=this.renderConfig.contentVisibility,this.animationItem.wrapper.appendChild(this.animationItem.container),this.canvasContext=this.animationItem.container.getContext("2d"),this.renderConfig.className&&this.animationItem.container.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.animationItem.container.setAttribute("id",this.renderConfig.id)}else this.canvasContext=this.renderConfig.context;this.data=t,this.layers=t.layers,this.transformCanvas={w:t.w,h:t.h,sx:0,sy:0,tx:0,ty:0},this.setupGlobalData(t,document.body),this.globalData.canvasContext=this.canvasContext,this.globalData.renderer=this,this.globalData.isDashed=!1,this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.globalData.transformCanvas=this.transformCanvas,this.elements=createSizedArray(t.layers.length),this.updateContainerSize()},CanvasRendererBase.prototype.updateContainerSize=function(){var t,e,r,n;if(this.reset(),this.animationItem.wrapper&&this.animationItem.container?(t=this.animationItem.wrapper.offsetWidth,e=this.animationItem.wrapper.offsetHeight,this.animationItem.container.setAttribute("width",t*this.renderConfig.dpr),this.animationItem.container.setAttribute("height",e*this.renderConfig.dpr)):(t=this.canvasContext.canvas.width*this.renderConfig.dpr,e=this.canvasContext.canvas.height*this.renderConfig.dpr),-1!==this.renderConfig.preserveAspectRatio.indexOf("meet")||-1!==this.renderConfig.preserveAspectRatio.indexOf("slice")){var i=this.renderConfig.preserveAspectRatio.split(" "),a=i[1]||"meet",s=i[0]||"xMidYMid",o=s.substr(0,4),l=s.substr(4);r=t/e,(n=this.transformCanvas.w/this.transformCanvas.h)>r&&"meet"===a||n<r&&"slice"===a?(this.transformCanvas.sx=t/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=t/(this.transformCanvas.w/this.renderConfig.dpr)):(this.transformCanvas.sx=e/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.sy=e/(this.transformCanvas.h/this.renderConfig.dpr)),this.transformCanvas.tx="xMid"===o&&(n<r&&"meet"===a||n>r&&"slice"===a)?(t-this.transformCanvas.w*(e/this.transformCanvas.h))/2*this.renderConfig.dpr:"xMax"===o&&(n<r&&"meet"===a||n>r&&"slice"===a)?(t-this.transformCanvas.w*(e/this.transformCanvas.h))*this.renderConfig.dpr:0,this.transformCanvas.ty="YMid"===l&&(n>r&&"meet"===a||n<r&&"slice"===a)?(e-this.transformCanvas.h*(t/this.transformCanvas.w))/2*this.renderConfig.dpr:"YMax"===l&&(n>r&&"meet"===a||n<r&&"slice"===a)?(e-this.transformCanvas.h*(t/this.transformCanvas.w))*this.renderConfig.dpr:0}else"none"===this.renderConfig.preserveAspectRatio?(this.transformCanvas.sx=t/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=e/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.tx=0,this.transformCanvas.ty=0):(this.transformCanvas.sx=this.renderConfig.dpr,this.transformCanvas.sy=this.renderConfig.dpr,this.transformCanvas.tx=0,this.transformCanvas.ty=0);this.transformCanvas.props=[this.transformCanvas.sx,0,0,0,0,this.transformCanvas.sy,0,0,0,0,1,0,this.transformCanvas.tx,this.transformCanvas.ty,0,1],this.ctxTransform(this.transformCanvas.props),this.canvasContext.beginPath(),this.canvasContext.rect(0,0,this.transformCanvas.w,this.transformCanvas.h),this.canvasContext.closePath(),this.canvasContext.clip(),this.renderFrame(this.renderedFrame,!0)},CanvasRendererBase.prototype.destroy=function(){var t;for(this.renderConfig.clearCanvas&&this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),t=(this.layers?this.layers.length:0)-1;t>=0;t-=1)this.elements[t]&&this.elements[t].destroy();this.elements.length=0,this.globalData.canvasContext=null,this.animationItem.container=null,this.destroyed=!0},CanvasRendererBase.prototype.renderFrame=function(t,e){if((this.renderedFrame!==t||!0!==this.renderConfig.clearCanvas||e)&&!this.destroyed&&-1!==t){var r;this.renderedFrame=t,this.globalData.frameNum=t-this.animationItem._isFirstFrame,this.globalData.frameId+=1,this.globalData._mdf=!this.renderConfig.clearCanvas||e,this.globalData.projectInterface.currentFrame=t;var n=this.layers.length;for(this.completeLayers||this.checkLayers(t),r=0;r<n;r+=1)(this.completeLayers||this.elements[r])&&this.elements[r].prepareFrame(t-this.layers[r].st);if(this.globalData._mdf){for(!0===this.renderConfig.clearCanvas?this.canvasContext.clearRect(0,0,this.transformCanvas.w,this.transformCanvas.h):this.save(),r=n-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&this.elements[r].renderFrame();!0!==this.renderConfig.clearCanvas&&this.restore()}}},CanvasRendererBase.prototype.buildItem=function(t){var e=this.elements;if(!e[t]&&99!==this.layers[t].ty){var r=this.createItem(this.layers[t],this,this.globalData);e[t]=r,r.initExpressions()}},CanvasRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;)this.pendingElements.pop().checkParenting()},CanvasRendererBase.prototype.hide=function(){this.animationItem.container.style.display="none"},CanvasRendererBase.prototype.show=function(){this.animationItem.container.style.display="block"},extendPrototype([CanvasRendererBase,ICompElement,CVBaseElement],CVCompElement),CVCompElement.prototype.renderInnerContent=function(){var t,e=this.canvasContext;for(e.beginPath(),e.moveTo(0,0),e.lineTo(this.data.w,0),e.lineTo(this.data.w,this.data.h),e.lineTo(0,this.data.h),e.lineTo(0,0),e.clip(),t=this.layers.length-1;t>=0;t-=1)(this.completeLayers||this.elements[t])&&this.elements[t].renderFrame()},CVCompElement.prototype.destroy=function(){var t;for(t=this.layers.length-1;t>=0;t-=1)this.elements[t]&&this.elements[t].destroy();this.layers=null,this.elements=null},CVCompElement.prototype.createComp=function(t){return new CVCompElement(t,this.globalData,this)},extendPrototype([CanvasRendererBase],CanvasRenderer),CanvasRenderer.prototype.createComp=function(t){return new CVCompElement(t,this.globalData,this)},HBaseElement.prototype={checkBlendMode:function(){},initRendererElement:function(){this.baseElement=createTag(this.data.tg||"div"),this.data.hasMask?(this.svgElement=createNS("svg"),this.layerElement=createNS("g"),this.maskedElement=this.layerElement,this.svgElement.appendChild(this.layerElement),this.baseElement.appendChild(this.svgElement)):this.layerElement=this.baseElement,styleDiv(this.baseElement)},createContainerElements:function(){this.renderableEffectsManager=new CVEffects(this),this.transformedElement=this.baseElement,this.maskedElement=this.layerElement,this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),0!==this.data.bm&&this.setBlendMode()},renderElement:function(){var t=this.transformedElement?this.transformedElement.style:{};if(this.finalTransform._matMdf){var e=this.finalTransform.mat.toCSS();t.transform=e,t.webkitTransform=e}this.finalTransform._opMdf&&(t.opacity=this.finalTransform.mProp.o.v)},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},destroy:function(){this.layerElement=null,this.transformedElement=null,this.matteElement&&(this.matteElement=null),this.maskManager&&(this.maskManager.destroy(),this.maskManager=null)},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData)},addEffects:function(){},setMatte:function(){}},HBaseElement.prototype.getBaseElement=SVGBaseElement.prototype.getBaseElement,HBaseElement.prototype.destroyBaseElement=HBaseElement.prototype.destroy,HBaseElement.prototype.buildElementParenting=BaseRenderer.prototype.buildElementParenting,extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],HSolidElement),HSolidElement.prototype.createContent=function(){var t;this.data.hasMask?((t=createNS("rect")).setAttribute("width",this.data.sw),t.setAttribute("height",this.data.sh),t.setAttribute("fill",this.data.sc),this.svgElement.setAttribute("width",this.data.sw),this.svgElement.setAttribute("height",this.data.sh)):((t=createTag("div")).style.width=this.data.sw+"px",t.style.height=this.data.sh+"px",t.style.backgroundColor=this.data.sc),this.layerElement.appendChild(t)},extendPrototype([BaseElement,TransformElement,HSolidElement,SVGShapeElement,HBaseElement,HierarchyElement,FrameElement,RenderableElement],HShapeElement),HShapeElement.prototype._renderShapeFrame=HShapeElement.prototype.renderInnerContent,HShapeElement.prototype.createContent=function(){var t;if(this.baseElement.style.fontSize=0,this.data.hasMask)this.layerElement.appendChild(this.shapesContainer),t=this.svgElement;else{t=createNS("svg");var e=this.comp.data?this.comp.data:this.globalData.compSize;t.setAttribute("width",e.w),t.setAttribute("height",e.h),t.appendChild(this.shapesContainer),this.layerElement.appendChild(t)}this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.shapesContainer,0,[],!0),this.filterUniqueShapes(),this.shapeCont=t},HShapeElement.prototype.getTransformedPoint=function(t,e){var r,n=t.length;for(r=0;r<n;r+=1)e=t[r].mProps.v.applyToPointArray(e[0],e[1],0);return e},HShapeElement.prototype.calculateShapeBoundingBox=function(t,e){var r,n,i,a,s,o=t.sh.v,l=t.transformers,h=o._length;if(!(h<=1)){for(r=0;r<h-1;r+=1)n=this.getTransformedPoint(l,o.v[r]),i=this.getTransformedPoint(l,o.o[r]),a=this.getTransformedPoint(l,o.i[r+1]),s=this.getTransformedPoint(l,o.v[r+1]),this.checkBounds(n,i,a,s,e);o.c&&(n=this.getTransformedPoint(l,o.v[r]),i=this.getTransformedPoint(l,o.o[r]),a=this.getTransformedPoint(l,o.i[0]),s=this.getTransformedPoint(l,o.v[0]),this.checkBounds(n,i,a,s,e))}},HShapeElement.prototype.checkBounds=function(t,e,r,n,i){this.getBoundsOfCurve(t,e,r,n);var a=this.shapeBoundingBox;i.x=bmMin(a.left,i.x),i.xMax=bmMax(a.right,i.xMax),i.y=bmMin(a.top,i.y),i.yMax=bmMax(a.bottom,i.yMax)},HShapeElement.prototype.shapeBoundingBox={left:0,right:0,top:0,bottom:0},HShapeElement.prototype.tempBoundingBox={x:0,xMax:0,y:0,yMax:0,width:0,height:0},HShapeElement.prototype.getBoundsOfCurve=function(t,e,r,n){for(var i,a,s,o,l,h,u,c=[[t[0],n[0]],[t[1],n[1]]],p=0;p<2;++p)a=6*t[p]-12*e[p]+6*r[p],i=-3*t[p]+9*e[p]-9*r[p]+3*n[p],s=3*e[p]-3*t[p],a|=0,s|=0,0==(i|=0)&&0===a||(0===i?(o=-s/a)>0&&o<1&&c[p].push(this.calculateF(o,t,e,r,n,p)):(l=a*a-4*s*i)>=0&&((h=(-a+bmSqrt(l))/(2*i))>0&&h<1&&c[p].push(this.calculateF(h,t,e,r,n,p)),(u=(-a-bmSqrt(l))/(2*i))>0&&u<1&&c[p].push(this.calculateF(u,t,e,r,n,p))));this.shapeBoundingBox.left=bmMin.apply(null,c[0]),this.shapeBoundingBox.top=bmMin.apply(null,c[1]),this.shapeBoundingBox.right=bmMax.apply(null,c[0]),this.shapeBoundingBox.bottom=bmMax.apply(null,c[1])},HShapeElement.prototype.calculateF=function(t,e,r,n,i,a){return bmPow(1-t,3)*e[a]+3*bmPow(1-t,2)*t*r[a]+3*(1-t)*bmPow(t,2)*n[a]+bmPow(t,3)*i[a]},HShapeElement.prototype.calculateBoundingBox=function(t,e){var r,n=t.length;for(r=0;r<n;r+=1)t[r]&&t[r].sh?this.calculateShapeBoundingBox(t[r],e):t[r]&&t[r].it?this.calculateBoundingBox(t[r].it,e):t[r]&&t[r].style&&t[r].w&&this.expandStrokeBoundingBox(t[r].w,e)},HShapeElement.prototype.expandStrokeBoundingBox=function(t,e){var r=0;if(t.keyframes){for(var n=0;n<t.keyframes.length;n+=1){var i=t.keyframes[n].s;i>r&&(r=i)}r*=t.mult}else r=t.v*t.mult;e.x-=r,e.xMax+=r,e.y-=r,e.yMax+=r},HShapeElement.prototype.currentBoxContains=function(t){return this.currentBBox.x<=t.x&&this.currentBBox.y<=t.y&&this.currentBBox.width+this.currentBBox.x>=t.x+t.width&&this.currentBBox.height+this.currentBBox.y>=t.y+t.height},HShapeElement.prototype.renderInnerContent=function(){if(this._renderShapeFrame(),!this.hidden&&(this._isFirstFrame||this._mdf)){var t=this.tempBoundingBox,e=999999;if(t.x=e,t.xMax=-e,t.y=e,t.yMax=-e,this.calculateBoundingBox(this.itemsData,t),t.width=t.xMax<t.x?0:t.xMax-t.x,t.height=t.yMax<t.y?0:t.yMax-t.y,this.currentBoxContains(t))return;var r=!1;if(this.currentBBox.w!==t.width&&(this.currentBBox.w=t.width,this.shapeCont.setAttribute("width",t.width),r=!0),this.currentBBox.h!==t.height&&(this.currentBBox.h=t.height,this.shapeCont.setAttribute("height",t.height),r=!0),r||this.currentBBox.x!==t.x||this.currentBBox.y!==t.y){this.currentBBox.w=t.width,this.currentBBox.h=t.height,this.currentBBox.x=t.x,this.currentBBox.y=t.y,this.shapeCont.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h);var n=this.shapeCont.style,i="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";n.transform=i,n.webkitTransform=i}}},extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],HTextElement),HTextElement.prototype.createContent=function(){if(this.isMasked=this.checkMasks(),this.isMasked){this.renderType="svg",this.compW=this.comp.data.w,this.compH=this.comp.data.h,this.svgElement.setAttribute("width",this.compW),this.svgElement.setAttribute("height",this.compH);var t=createNS("g");this.maskedElement.appendChild(t),this.innerElem=t}else this.renderType="html",this.innerElem=this.layerElement;this.checkParenting()},HTextElement.prototype.buildNewText=function(){var t=this.textProperty.currentData;this.renderedLetters=createSizedArray(t.l?t.l.length:0);var e=this.innerElem.style,r=t.fc?this.buildColor(t.fc):"rgba(0,0,0,0)";e.fill=r,e.color=r,t.sc&&(e.stroke=this.buildColor(t.sc),e.strokeWidth=t.sw+"px");var n,i,a=this.globalData.fontManager.getFontByName(t.f);if(!this.globalData.fontManager.chars)if(e.fontSize=t.finalSize+"px",e.lineHeight=t.finalSize+"px",a.fClass)this.innerElem.className=a.fClass;else{e.fontFamily=a.fFamily;var s=t.fWeight,o=t.fStyle;e.fontStyle=o,e.fontWeight=s}var l,h,u,c=t.l;i=c.length;var p,f=this.mHelper,d="",m=0;for(n=0;n<i;n+=1){if(this.globalData.fontManager.chars?(this.textPaths[m]?l=this.textPaths[m]:((l=createNS("path")).setAttribute("stroke-linecap",lineCapEnum[1]),l.setAttribute("stroke-linejoin",lineJoinEnum[2]),l.setAttribute("stroke-miterlimit","4")),this.isMasked||(this.textSpans[m]?u=(h=this.textSpans[m]).children[0]:((h=createTag("div")).style.lineHeight=0,(u=createNS("svg")).appendChild(l),styleDiv(h)))):this.isMasked?l=this.textPaths[m]?this.textPaths[m]:createNS("text"):this.textSpans[m]?(h=this.textSpans[m],l=this.textPaths[m]):(styleDiv(h=createTag("span")),styleDiv(l=createTag("span")),h.appendChild(l)),this.globalData.fontManager.chars){var g,y=this.globalData.fontManager.getCharData(t.finalText[n],a.fStyle,this.globalData.fontManager.getFontByName(t.f).fFamily);if(g=y?y.data:null,f.reset(),g&&g.shapes&&g.shapes.length&&(p=g.shapes[0].it,f.scale(t.finalSize/100,t.finalSize/100),d=this.createPathShape(f,p),l.setAttribute("d",d)),this.isMasked)this.innerElem.appendChild(l);else{if(this.innerElem.appendChild(h),g&&g.shapes){document.body.appendChild(u);var v=u.getBBox();u.setAttribute("width",v.width+2),u.setAttribute("height",v.height+2),u.setAttribute("viewBox",v.x-1+" "+(v.y-1)+" "+(v.width+2)+" "+(v.height+2));var b=u.style,w="translate("+(v.x-1)+"px,"+(v.y-1)+"px)";b.transform=w,b.webkitTransform=w,c[n].yOffset=v.y-1}else u.setAttribute("width",1),u.setAttribute("height",1);h.appendChild(u)}}else if(l.textContent=c[n].val,l.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),this.isMasked)this.innerElem.appendChild(l);else{this.innerElem.appendChild(h);var x=l.style,_="translate3d(0,"+-t.finalSize/1.2+"px,0)";x.transform=_,x.webkitTransform=_}this.isMasked?this.textSpans[m]=l:this.textSpans[m]=h,this.textSpans[m].style.display="block",this.textPaths[m]=l,m+=1}for(;m<this.textSpans.length;)this.textSpans[m].style.display="none",m+=1},HTextElement.prototype.renderInnerContent=function(){var t;if(this.data.singleShape){if(!this._isFirstFrame&&!this.lettersChangedFlag)return;if(this.isMasked&&this.finalTransform._matMdf){this.svgElement.setAttribute("viewBox",-this.finalTransform.mProp.p.v[0]+" "+-this.finalTransform.mProp.p.v[1]+" "+this.compW+" "+this.compH),t=this.svgElement.style;var e="translate("+-this.finalTransform.mProp.p.v[0]+"px,"+-this.finalTransform.mProp.p.v[1]+"px)";t.transform=e,t.webkitTransform=e}}if(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),this.lettersChangedFlag||this.textAnimator.lettersChangedFlag){var r,n,i,a,s,o=0,l=this.textAnimator.renderedLetters,h=this.textProperty.currentData.l;for(n=h.length,r=0;r<n;r+=1)h[r].n?o+=1:(a=this.textSpans[r],s=this.textPaths[r],i=l[o],o+=1,i._mdf.m&&(this.isMasked?a.setAttribute("transform",i.m):(a.style.webkitTransform=i.m,a.style.transform=i.m)),a.style.opacity=i.o,i.sw&&i._mdf.sw&&s.setAttribute("stroke-width",i.sw),i.sc&&i._mdf.sc&&s.setAttribute("stroke",i.sc),i.fc&&i._mdf.fc&&(s.setAttribute("fill",i.fc),s.style.color=i.fc));if(this.innerElem.getBBox&&!this.hidden&&(this._isFirstFrame||this._mdf)){var u=this.innerElem.getBBox();if(this.currentBBox.w!==u.width&&(this.currentBBox.w=u.width,this.svgElement.setAttribute("width",u.width)),this.currentBBox.h!==u.height&&(this.currentBBox.h=u.height,this.svgElement.setAttribute("height",u.height)),this.currentBBox.w!==u.width+2||this.currentBBox.h!==u.height+2||this.currentBBox.x!==u.x-1||this.currentBBox.y!==u.y-1){this.currentBBox.w=u.width+2,this.currentBBox.h=u.height+2,this.currentBBox.x=u.x-1,this.currentBBox.y=u.y-1,this.svgElement.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h),t=this.svgElement.style;var c="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";t.transform=c,t.webkitTransform=c}}}},extendPrototype([BaseElement,FrameElement,HierarchyElement],HCameraElement),HCameraElement.prototype.setup=function(){var t,e,r,n,i=this.comp.threeDElements.length;for(t=0;t<i;t+=1)if("3d"===(e=this.comp.threeDElements[t]).type){r=e.perspectiveElem.style,n=e.container.style;var a=this.pe.v+"px",s="0px 0px 0px",o="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";r.perspective=a,r.webkitPerspective=a,n.transformOrigin=s,n.mozTransformOrigin=s,n.webkitTransformOrigin=s,r.transform=o,r.webkitTransform=o}},HCameraElement.prototype.createElements=function(){},HCameraElement.prototype.hide=function(){},HCameraElement.prototype.renderFrame=function(){var t,e,r=this._isFirstFrame;if(this.hierarchy)for(e=this.hierarchy.length,t=0;t<e;t+=1)r=this.hierarchy[t].finalTransform.mProp._mdf||r;if(r||this.pe._mdf||this.p&&this.p._mdf||this.px&&(this.px._mdf||this.py._mdf||this.pz._mdf)||this.rx._mdf||this.ry._mdf||this.rz._mdf||this.or._mdf||this.a&&this.a._mdf){if(this.mat.reset(),this.hierarchy)for(t=e=this.hierarchy.length-1;t>=0;t-=1){var n=this.hierarchy[t].finalTransform.mProp;this.mat.translate(-n.p.v[0],-n.p.v[1],n.p.v[2]),this.mat.rotateX(-n.or.v[0]).rotateY(-n.or.v[1]).rotateZ(n.or.v[2]),this.mat.rotateX(-n.rx.v).rotateY(-n.ry.v).rotateZ(n.rz.v),this.mat.scale(1/n.s.v[0],1/n.s.v[1],1/n.s.v[2]),this.mat.translate(n.a.v[0],n.a.v[1],n.a.v[2])}if(this.p?this.mat.translate(-this.p.v[0],-this.p.v[1],this.p.v[2]):this.mat.translate(-this.px.v,-this.py.v,this.pz.v),this.a){var i;i=this.p?[this.p.v[0]-this.a.v[0],this.p.v[1]-this.a.v[1],this.p.v[2]-this.a.v[2]]:[this.px.v-this.a.v[0],this.py.v-this.a.v[1],this.pz.v-this.a.v[2]];var a=Math.sqrt(Math.pow(i[0],2)+Math.pow(i[1],2)+Math.pow(i[2],2)),s=[i[0]/a,i[1]/a,i[2]/a],o=Math.sqrt(s[2]*s[2]+s[0]*s[0]),l=Math.atan2(s[1],o),h=Math.atan2(s[0],-s[2]);this.mat.rotateY(h).rotateX(-l)}this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v),this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]),this.mat.translate(this.globalData.compSize.w/2,this.globalData.compSize.h/2,0),this.mat.translate(0,0,this.pe.v);var u=!this._prevMat.equals(this.mat);if((u||this.pe._mdf)&&this.comp.threeDElements){var c,p,f;for(e=this.comp.threeDElements.length,t=0;t<e;t+=1)if("3d"===(c=this.comp.threeDElements[t]).type){if(u){var d=this.mat.toCSS();(f=c.container.style).transform=d,f.webkitTransform=d}this.pe._mdf&&((p=c.perspectiveElem.style).perspective=this.pe.v+"px",p.webkitPerspective=this.pe.v+"px")}this.mat.clone(this._prevMat)}}this._isFirstFrame=!1},HCameraElement.prototype.prepareFrame=function(t){this.prepareProperties(t,!0)},HCameraElement.prototype.destroy=function(){},HCameraElement.prototype.getBaseElement=function(){return null},extendPrototype([BaseElement,TransformElement,HBaseElement,HSolidElement,HierarchyElement,FrameElement,RenderableElement],HImageElement),HImageElement.prototype.createContent=function(){var t=this.globalData.getAssetsPath(this.assetData),e=new Image;this.data.hasMask?(this.imageElem=createNS("image"),this.imageElem.setAttribute("width",this.assetData.w+"px"),this.imageElem.setAttribute("height",this.assetData.h+"px"),this.imageElem.setAttributeNS("http://www.w3.org/1999/xlink","href",t),this.layerElement.appendChild(this.imageElem),this.baseElement.setAttribute("width",this.assetData.w),this.baseElement.setAttribute("height",this.assetData.h)):this.layerElement.appendChild(e),e.crossOrigin="anonymous",e.src=t,this.data.ln&&this.baseElement.setAttribute("id",this.data.ln)},extendPrototype([BaseRenderer],HybridRendererBase),HybridRendererBase.prototype.buildItem=SVGRenderer.prototype.buildItem,HybridRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;)this.pendingElements.pop().checkParenting()},HybridRendererBase.prototype.appendElementInPos=function(t,e){var r=t.getBaseElement();if(r){var n=this.layers[e];if(n.ddd&&this.supports3d)this.addTo3dContainer(r,e);else if(this.threeDElements)this.addTo3dContainer(r,e);else{for(var i,a,s=0;s<e;)this.elements[s]&&!0!==this.elements[s]&&this.elements[s].getBaseElement&&(a=this.elements[s],i=(this.layers[s].ddd?this.getThreeDContainerByPos(s):a.getBaseElement())||i),s+=1;i?n.ddd&&this.supports3d||this.layerElement.insertBefore(r,i):n.ddd&&this.supports3d||this.layerElement.appendChild(r)}}},HybridRendererBase.prototype.createShape=function(t){return this.supports3d?new HShapeElement(t,this.globalData,this):new SVGShapeElement(t,this.globalData,this)},HybridRendererBase.prototype.createText=function(t){return this.supports3d?new HTextElement(t,this.globalData,this):new SVGTextLottieElement(t,this.globalData,this)},HybridRendererBase.prototype.createCamera=function(t){return this.camera=new HCameraElement(t,this.globalData,this),this.camera},HybridRendererBase.prototype.createImage=function(t){return this.supports3d?new HImageElement(t,this.globalData,this):new IImageElement(t,this.globalData,this)},HybridRendererBase.prototype.createSolid=function(t){return this.supports3d?new HSolidElement(t,this.globalData,this):new ISolidElement(t,this.globalData,this)},HybridRendererBase.prototype.createNull=SVGRenderer.prototype.createNull,HybridRendererBase.prototype.getThreeDContainerByPos=function(t){for(var e=0,r=this.threeDElements.length;e<r;){if(this.threeDElements[e].startPos<=t&&this.threeDElements[e].endPos>=t)return this.threeDElements[e].perspectiveElem;e+=1}return null},HybridRendererBase.prototype.createThreeDContainer=function(t,e){var r,n,i=createTag("div");styleDiv(i);var a=createTag("div");if(styleDiv(a),"3d"===e){(r=i.style).width=this.globalData.compSize.w+"px",r.height=this.globalData.compSize.h+"px";var s="50% 50%";r.webkitTransformOrigin=s,r.mozTransformOrigin=s,r.transformOrigin=s;var o="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";(n=a.style).transform=o,n.webkitTransform=o}i.appendChild(a);var l={container:a,perspectiveElem:i,startPos:t,endPos:t,type:e};return this.threeDElements.push(l),l},HybridRendererBase.prototype.build3dContainers=function(){var t,e,r=this.layers.length,n="";for(t=0;t<r;t+=1)this.layers[t].ddd&&3!==this.layers[t].ty?("3d"!==n&&(n="3d",e=this.createThreeDContainer(t,"3d")),e.endPos=Math.max(e.endPos,t)):("2d"!==n&&(n="2d",e=this.createThreeDContainer(t,"2d")),e.endPos=Math.max(e.endPos,t));for(t=(r=this.threeDElements.length)-1;t>=0;t-=1)this.resizerElem.appendChild(this.threeDElements[t].perspectiveElem)},HybridRendererBase.prototype.addTo3dContainer=function(t,e){for(var r=0,n=this.threeDElements.length;r<n;){if(e<=this.threeDElements[r].endPos){for(var i,a=this.threeDElements[r].startPos;a<e;)this.elements[a]&&this.elements[a].getBaseElement&&(i=this.elements[a].getBaseElement()),a+=1;i?this.threeDElements[r].container.insertBefore(t,i):this.threeDElements[r].container.appendChild(t);break}r+=1}},HybridRendererBase.prototype.configAnimation=function(t){var e=createTag("div"),r=this.animationItem.wrapper,n=e.style;n.width=t.w+"px",n.height=t.h+"px",this.resizerElem=e,styleDiv(e),n.transformStyle="flat",n.mozTransformStyle="flat",n.webkitTransformStyle="flat",this.renderConfig.className&&e.setAttribute("class",this.renderConfig.className),r.appendChild(e),n.overflow="hidden";var i=createNS("svg");i.setAttribute("width","1"),i.setAttribute("height","1"),styleDiv(i),this.resizerElem.appendChild(i);var a=createNS("defs");i.appendChild(a),this.data=t,this.setupGlobalData(t,i),this.globalData.defs=a,this.layers=t.layers,this.layerElement=this.resizerElem,this.build3dContainers(),this.updateContainerSize()},HybridRendererBase.prototype.destroy=function(){var t;this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.animationItem.container=null,this.globalData.defs=null;var e=this.layers?this.layers.length:0;for(t=0;t<e;t+=1)this.elements[t].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},HybridRendererBase.prototype.updateContainerSize=function(){var t,e,r,n,i=this.animationItem.wrapper.offsetWidth,a=this.animationItem.wrapper.offsetHeight,s=i/a;this.globalData.compSize.w/this.globalData.compSize.h>s?(t=i/this.globalData.compSize.w,e=i/this.globalData.compSize.w,r=0,n=(a-this.globalData.compSize.h*(i/this.globalData.compSize.w))/2):(t=a/this.globalData.compSize.h,e=a/this.globalData.compSize.h,r=(i-this.globalData.compSize.w*(a/this.globalData.compSize.h))/2,n=0);var o=this.resizerElem.style;o.webkitTransform="matrix3d("+t+",0,0,0,0,"+e+",0,0,0,0,1,0,"+r+","+n+",0,1)",o.transform=o.webkitTransform},HybridRendererBase.prototype.renderFrame=SVGRenderer.prototype.renderFrame,HybridRendererBase.prototype.hide=function(){this.resizerElem.style.display="none"},HybridRendererBase.prototype.show=function(){this.resizerElem.style.display="block"},HybridRendererBase.prototype.initItems=function(){if(this.buildAllItems(),this.camera)this.camera.setup();else{var t,e=this.globalData.compSize.w,r=this.globalData.compSize.h,n=this.threeDElements.length;for(t=0;t<n;t+=1){var i=this.threeDElements[t].perspectiveElem.style;i.webkitPerspective=Math.sqrt(Math.pow(e,2)+Math.pow(r,2))+"px",i.perspective=i.webkitPerspective}}},HybridRendererBase.prototype.searchExtraCompositions=function(t){var e,r=t.length,n=createTag("div");for(e=0;e<r;e+=1)if(t[e].xt){var i=this.createComp(t[e],n,this.globalData.comp,null);i.initExpressions(),this.globalData.projectInterface.registerComposition(i)}},extendPrototype([HybridRendererBase,ICompElement,HBaseElement],HCompElement),HCompElement.prototype._createBaseContainerElements=HCompElement.prototype.createContainerElements,HCompElement.prototype.createContainerElements=function(){this._createBaseContainerElements(),this.data.hasMask?(this.svgElement.setAttribute("width",this.data.w),this.svgElement.setAttribute("height",this.data.h),this.transformedElement=this.baseElement):this.transformedElement=this.layerElement},HCompElement.prototype.addTo3dContainer=function(t,e){for(var r,n=0;n<e;)this.elements[n]&&this.elements[n].getBaseElement&&(r=this.elements[n].getBaseElement()),n+=1;r?this.layerElement.insertBefore(t,r):this.layerElement.appendChild(t)},HCompElement.prototype.createComp=function(t){return this.supports3d?new HCompElement(t,this.globalData,this):new SVGCompElement(t,this.globalData,this)},extendPrototype([HybridRendererBase],HybridRenderer),HybridRenderer.prototype.createComp=function(t){return this.supports3d?new HCompElement(t,this.globalData,this):new SVGCompElement(t,this.globalData,this)};var Expressions={initExpressions:function(t){var e=0,r=[];t.renderer.compInterface=CompExpressionInterface(t.renderer),t.renderer.globalData.projectInterface.registerComposition(t.renderer),t.renderer.globalData.pushExpression=function(){e+=1},t.renderer.globalData.popExpression=function(){0==(e-=1)&&function(){var t,e=r.length;for(t=0;t<e;t+=1)r[t].release();r.length=0}()},t.renderer.globalData.registerExpressionProperty=function(t){-1===r.indexOf(t)&&r.push(t)}}};function _typeof$1(t){return _typeof$1="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$1(t)}function seedRandom(t,e){var r=this,n=256,i=e.pow(n,6),a=e.pow(2,52),s=2*a,o=255;function l(t){var e,r=t.length,i=this,a=0,s=i.i=i.j=0,l=i.S=[];for(r||(t=[r++]);a<n;)l[a]=a++;for(a=0;a<n;a++)l[a]=l[s=o&s+t[a%r]+(e=l[a])],l[s]=e;i.g=function(t){for(var e,r=0,a=i.i,s=i.j,l=i.S;t--;)e=l[a=o&a+1],r=r*n+l[o&(l[a]=l[s=o&s+e])+(l[s]=e)];return i.i=a,i.j=s,r}}function h(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function u(t,e){var r,n=[],i=_typeof$1(t);if(e&&"object"==i)for(r in t)try{n.push(u(t[r],e-1))}catch(t){}return n.length?n:"string"==i?t:t+"\0"}function c(t,e){for(var r,n=t+"",i=0;i<n.length;)e[o&i]=o&(r^=19*e[o&i])+n.charCodeAt(i++);return p(e)}function p(t){return String.fromCharCode.apply(0,t)}e.seedrandom=function(o,f,d){var m=[],g=c(u((f=!0===f?{entropy:!0}:f||{}).entropy?[o,p(t)]:null===o?function(){try{var e=new Uint8Array(n);return(r.crypto||r.msCrypto).getRandomValues(e),p(e)}catch(e){var i=r.navigator,a=i&&i.plugins;return[+new Date,r,a,r.screen,p(t)]}}():o,3),m),y=new l(m),v=function(){for(var t=y.g(6),e=i,r=0;t<a;)t=(t+r)*n,e*=n,r=y.g(1);for(;t>=s;)t/=2,e/=2,r>>>=1;return(t+r)/e};return v.int32=function(){return 0|y.g(4)},v.quick=function(){return y.g(4)/4294967296},v.double=v,c(p(y.S),t),(f.pass||d||function(t,r,n,i){return i&&(i.S&&h(i,y),t.state=function(){return h(y,{})}),n?(e.random=t,r):t})(v,g,"global"in f?f.global:this==e,f.state)},c(e.random(),t)}function initialize$2(t){seedRandom([],t)}var propTypes={SHAPE:"shape"};function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}var ExpressionManager=function(){var ob={},Math=BMMath,window=null,document=null,XMLHttpRequest=null,fetch=null,frames=null;function $bm_isInstanceOfArray(t){return t.constructor===Array||t.constructor===Float32Array}function isNumerable(t,e){return"number"===t||"boolean"===t||"string"===t||e instanceof Number}function $bm_neg(t){var e=_typeof(t);if("number"===e||"boolean"===e||t instanceof Number)return-t;if($bm_isInstanceOfArray(t)){var r,n=t.length,i=[];for(r=0;r<n;r+=1)i[r]=-t[r];return i}return t.propType?t.v:-t}initialize$2(BMMath);var easeInBez=BezierFactory.getBezierEasing(.333,0,.833,.833,"easeIn").get,easeOutBez=BezierFactory.getBezierEasing(.167,.167,.667,1,"easeOut").get,easeInOutBez=BezierFactory.getBezierEasing(.33,0,.667,1,"easeInOut").get;function sum(t,e){var r=_typeof(t),n=_typeof(e);if("string"===r||"string"===n)return t+e;if(isNumerable(r,t)&&isNumerable(n,e))return t+e;if($bm_isInstanceOfArray(t)&&isNumerable(n,e))return(t=t.slice(0))[0]+=e,t;if(isNumerable(r,t)&&$bm_isInstanceOfArray(e))return(e=e.slice(0))[0]=t+e[0],e;if($bm_isInstanceOfArray(t)&&$bm_isInstanceOfArray(e)){for(var i=0,a=t.length,s=e.length,o=[];i<a||i<s;)("number"==typeof t[i]||t[i]instanceof Number)&&("number"==typeof e[i]||e[i]instanceof Number)?o[i]=t[i]+e[i]:o[i]=void 0===e[i]?t[i]:t[i]||e[i],i+=1;return o}return 0}var add=sum;function sub(t,e){var r=_typeof(t),n=_typeof(e);if(isNumerable(r,t)&&isNumerable(n,e))return"string"===r&&(t=parseInt(t,10)),"string"===n&&(e=parseInt(e,10)),t-e;if($bm_isInstanceOfArray(t)&&isNumerable(n,e))return(t=t.slice(0))[0]-=e,t;if(isNumerable(r,t)&&$bm_isInstanceOfArray(e))return(e=e.slice(0))[0]=t-e[0],e;if($bm_isInstanceOfArray(t)&&$bm_isInstanceOfArray(e)){for(var i=0,a=t.length,s=e.length,o=[];i<a||i<s;)("number"==typeof t[i]||t[i]instanceof Number)&&("number"==typeof e[i]||e[i]instanceof Number)?o[i]=t[i]-e[i]:o[i]=void 0===e[i]?t[i]:t[i]||e[i],i+=1;return o}return 0}function mul(t,e){var r,n,i,a=_typeof(t),s=_typeof(e);if(isNumerable(a,t)&&isNumerable(s,e))return t*e;if($bm_isInstanceOfArray(t)&&isNumerable(s,e)){for(i=t.length,r=createTypedArray("float32",i),n=0;n<i;n+=1)r[n]=t[n]*e;return r}if(isNumerable(a,t)&&$bm_isInstanceOfArray(e)){for(i=e.length,r=createTypedArray("float32",i),n=0;n<i;n+=1)r[n]=t*e[n];return r}return 0}function div(t,e){var r,n,i,a=_typeof(t),s=_typeof(e);if(isNumerable(a,t)&&isNumerable(s,e))return t/e;if($bm_isInstanceOfArray(t)&&isNumerable(s,e)){for(i=t.length,r=createTypedArray("float32",i),n=0;n<i;n+=1)r[n]=t[n]/e;return r}if(isNumerable(a,t)&&$bm_isInstanceOfArray(e)){for(i=e.length,r=createTypedArray("float32",i),n=0;n<i;n+=1)r[n]=t/e[n];return r}return 0}function mod(t,e){return"string"==typeof t&&(t=parseInt(t,10)),"string"==typeof e&&(e=parseInt(e,10)),t%e}var $bm_sum=sum,$bm_sub=sub,$bm_mul=mul,$bm_div=div,$bm_mod=mod;function clamp(t,e,r){if(e>r){var n=r;r=e,e=n}return Math.min(Math.max(t,e),r)}function radiansToDegrees(t){return t/degToRads}var radians_to_degrees=radiansToDegrees;function degreesToRadians(t){return t*degToRads}var degrees_to_radians=radiansToDegrees,helperLengthArray=[0,0,0,0,0,0];function length(t,e){if("number"==typeof t||t instanceof Number)return e=e||0,Math.abs(t-e);var r;e||(e=helperLengthArray);var n=Math.min(t.length,e.length),i=0;for(r=0;r<n;r+=1)i+=Math.pow(e[r]-t[r],2);return Math.sqrt(i)}function normalize(t){return div(t,length(t))}function rgbToHsl(t){var e,r,n=t[0],i=t[1],a=t[2],s=Math.max(n,i,a),o=Math.min(n,i,a),l=(s+o)/2;if(s===o)e=0,r=0;else{var h=s-o;switch(r=l>.5?h/(2-s-o):h/(s+o),s){case n:e=(i-a)/h+(i<a?6:0);break;case i:e=(a-n)/h+2;break;case a:e=(n-i)/h+4}e/=6}return[e,r,l,t[3]]}function hue2rgb(t,e,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?t+6*(e-t)*r:r<.5?e:r<2/3?t+(e-t)*(2/3-r)*6:t}function hslToRgb(t){var e,r,n,i=t[0],a=t[1],s=t[2];if(0===a)e=s,n=s,r=s;else{var o=s<.5?s*(1+a):s+a-s*a,l=2*s-o;e=hue2rgb(l,o,i+1/3),r=hue2rgb(l,o,i),n=hue2rgb(l,o,i-1/3)}return[e,r,n,t[3]]}function linear(t,e,r,n,i){if(void 0!==n&&void 0!==i||(n=e,i=r,e=0,r=1),r<e){var a=r;r=e,e=a}if(t<=e)return n;if(t>=r)return i;var s,o=r===e?0:(t-e)/(r-e);if(!n.length)return n+(i-n)*o;var l=n.length,h=createTypedArray("float32",l);for(s=0;s<l;s+=1)h[s]=n[s]+(i[s]-n[s])*o;return h}function random(t,e){if(void 0===e&&(void 0===t?(t=0,e=1):(e=t,t=void 0)),e.length){var r,n=e.length;t||(t=createTypedArray("float32",n));var i=createTypedArray("float32",n),a=BMMath.random();for(r=0;r<n;r+=1)i[r]=t[r]+a*(e[r]-t[r]);return i}return void 0===t&&(t=0),t+BMMath.random()*(e-t)}function createPath(t,e,r,n){var i,a=t.length,s=shapePool.newElement();s.setPathData(!!n,a);var o,l,h=[0,0];for(i=0;i<a;i+=1)o=e&&e[i]?e[i]:h,l=r&&r[i]?r[i]:h,s.setTripleAt(t[i][0],t[i][1],l[0]+t[i][0],l[1]+t[i][1],o[0]+t[i][0],o[1]+t[i][1],i,!0);return s}function initiateExpression(elem,data,property){var val=data.x,needsVelocity=/velocity(?![\w\d])/.test(val),_needsRandom=-1!==val.indexOf("random"),elemType=elem.data.ty,transform,$bm_transform,content,effect,thisProperty=property;thisProperty.valueAtTime=thisProperty.getValueAtTime,Object.defineProperty(thisProperty,"value",{get:function(){return thisProperty.v}}),elem.comp.frameDuration=1/elem.comp.globalData.frameRate,elem.comp.displayStartTime=0;var inPoint=elem.data.ip/elem.comp.globalData.frameRate,outPoint=elem.data.op/elem.comp.globalData.frameRate,width=elem.data.sw?elem.data.sw:0,height=elem.data.sh?elem.data.sh:0,name=elem.data.nm,loopIn,loop_in,loopOut,loop_out,smooth,toWorld,fromWorld,fromComp,toComp,fromCompToSurface,position,rotation,anchorPoint,scale,thisLayer,thisComp,mask,valueAtTime,velocityAtTime,scoped_bm_rt,expression_function=eval("[function _expression_function(){"+val+";scoped_bm_rt=$bm_rt}]")[0],numKeys=property.kf?data.k.length:0,active=!this.data||!0!==this.data.hd,wiggle=function(t,e){var r,n,i=this.pv.length?this.pv.length:1,a=createTypedArray("float32",i),s=Math.floor(5*time);for(r=0,n=0;r<s;){for(n=0;n<i;n+=1)a[n]+=-e+2*e*BMMath.random();r+=1}var o=5*time,l=o-Math.floor(o),h=createTypedArray("float32",i);if(i>1){for(n=0;n<i;n+=1)h[n]=this.pv[n]+a[n]+(-e+2*e*BMMath.random())*l;return h}return this.pv+a[0]+(-e+2*e*BMMath.random())*l}.bind(this);function loopInDuration(t,e){return loopIn(t,e,!0)}function loopOutDuration(t,e){return loopOut(t,e,!0)}thisProperty.loopIn&&(loopIn=thisProperty.loopIn.bind(thisProperty),loop_in=loopIn),thisProperty.loopOut&&(loopOut=thisProperty.loopOut.bind(thisProperty),loop_out=loopOut),thisProperty.smooth&&(smooth=thisProperty.smooth.bind(thisProperty)),this.getValueAtTime&&(valueAtTime=this.getValueAtTime.bind(this)),this.getVelocityAtTime&&(velocityAtTime=this.getVelocityAtTime.bind(this));var comp=elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface),time,velocity,value,text,textIndex,textTotal,selectorValue;function lookAt(t,e){var r=[e[0]-t[0],e[1]-t[1],e[2]-t[2]],n=Math.atan2(r[0],Math.sqrt(r[1]*r[1]+r[2]*r[2]))/degToRads;return[-Math.atan2(r[1],r[2])/degToRads,n,0]}function easeOut(t,e,r,n,i){return applyEase(easeOutBez,t,e,r,n,i)}function easeIn(t,e,r,n,i){return applyEase(easeInBez,t,e,r,n,i)}function ease(t,e,r,n,i){return applyEase(easeInOutBez,t,e,r,n,i)}function applyEase(t,e,r,n,i,a){void 0===i?(i=r,a=n):e=(e-r)/(n-r),e>1?e=1:e<0&&(e=0);var s=t(e);if($bm_isInstanceOfArray(i)){var o,l=i.length,h=createTypedArray("float32",l);for(o=0;o<l;o+=1)h[o]=(a[o]-i[o])*s+i[o];return h}return(a-i)*s+i}function nearestKey(t){var e,r,n,i=data.k.length;if(data.k.length&&"number"!=typeof data.k[0])if(r=-1,(t*=elem.comp.globalData.frameRate)<data.k[0].t)r=1,n=data.k[0].t;else{for(e=0;e<i-1;e+=1){if(t===data.k[e].t){r=e+1,n=data.k[e].t;break}if(t>data.k[e].t&&t<data.k[e+1].t){t-data.k[e].t>data.k[e+1].t-t?(r=e+2,n=data.k[e+1].t):(r=e+1,n=data.k[e].t);break}}-1===r&&(r=e+1,n=data.k[e].t)}else r=0,n=0;var a={};return a.index=r,a.time=n/elem.comp.globalData.frameRate,a}function key(t){var e,r,n;if(!data.k.length||"number"==typeof data.k[0])throw new Error("The property has no keyframe at index "+t);t-=1,e={time:data.k[t].t/elem.comp.globalData.frameRate,value:[]};var i=Object.prototype.hasOwnProperty.call(data.k[t],"s")?data.k[t].s:data.k[t-1].e;for(n=i.length,r=0;r<n;r+=1)e[r]=i[r],e.value[r]=i[r];return e}function framesToTime(t,e){return e||(e=elem.comp.globalData.frameRate),t/e}function timeToFrames(t,e){return t||0===t||(t=time),e||(e=elem.comp.globalData.frameRate),t*e}function seedRandom(t){BMMath.seedrandom(randSeed+t)}function sourceRectAtTime(){return elem.sourceRectAtTime()}function substring(t,e){return"string"==typeof value?void 0===e?value.substring(t):value.substring(t,e):""}function substr(t,e){return"string"==typeof value?void 0===e?value.substr(t):value.substr(t,e):""}function posterizeTime(t){time=0===t?0:Math.floor(time*t)/t,value=valueAtTime(time)}var index=elem.data.ind,hasParent=!(!elem.hierarchy||!elem.hierarchy.length),parent,randSeed=Math.floor(1e6*Math.random()),globalData=elem.globalData;function executeExpression(t){return value=t,this.frameExpressionId===elem.globalData.frameId&&"textSelector"!==this.propType?value:("textSelector"===this.propType&&(textIndex=this.textIndex,textTotal=this.textTotal,selectorValue=this.selectorValue),thisLayer||(text=elem.layerInterface.text,thisLayer=elem.layerInterface,thisComp=elem.comp.compInterface,toWorld=thisLayer.toWorld.bind(thisLayer),fromWorld=thisLayer.fromWorld.bind(thisLayer),fromComp=thisLayer.fromComp.bind(thisLayer),toComp=thisLayer.toComp.bind(thisLayer),mask=thisLayer.mask?thisLayer.mask.bind(thisLayer):null,fromCompToSurface=fromComp),transform||(transform=elem.layerInterface("ADBE Transform Group"),$bm_transform=transform,transform&&(anchorPoint=transform.anchorPoint)),4!==elemType||content||(content=thisLayer("ADBE Root Vectors Group")),effect||(effect=thisLayer(4)),(hasParent=!(!elem.hierarchy||!elem.hierarchy.length))&&!parent&&(parent=elem.hierarchy[0].layerInterface),time=this.comp.renderedFrame/this.comp.globalData.frameRate,_needsRandom&&seedRandom(randSeed+time),needsVelocity&&(velocity=velocityAtTime(time)),expression_function(),this.frameExpressionId=elem.globalData.frameId,scoped_bm_rt=scoped_bm_rt.propType===propTypes.SHAPE?scoped_bm_rt.v:scoped_bm_rt)}return executeExpression.__preventDeadCodeRemoval=[$bm_transform,anchorPoint,time,velocity,inPoint,outPoint,width,height,name,loop_in,loop_out,smooth,toComp,fromCompToSurface,toWorld,fromWorld,mask,position,rotation,scale,thisComp,numKeys,active,wiggle,loopInDuration,loopOutDuration,comp,lookAt,easeOut,easeIn,ease,nearestKey,key,text,textIndex,textTotal,selectorValue,framesToTime,timeToFrames,sourceRectAtTime,substring,substr,posterizeTime,index,globalData],executeExpression}return ob.initiateExpression=initiateExpression,ob.__preventDeadCodeRemoval=[window,document,XMLHttpRequest,fetch,frames,$bm_neg,add,$bm_sum,$bm_sub,$bm_mul,$bm_div,$bm_mod,clamp,radians_to_degrees,degreesToRadians,degrees_to_radians,normalize,rgbToHsl,hslToRgb,linear,random,createPath],ob}(),expressionHelpers={searchExpressions:function(t,e,r){e.x&&(r.k=!0,r.x=!0,r.initiateExpression=ExpressionManager.initiateExpression,r.effectsSequence.push(r.initiateExpression(t,e,r).bind(r)))},getSpeedAtTime:function(t){var e=this.getValueAtTime(t),r=this.getValueAtTime(t+-.01),n=0;if(e.length){var i;for(i=0;i<e.length;i+=1)n+=Math.pow(r[i]-e[i],2);n=100*Math.sqrt(n)}else n=0;return n},getVelocityAtTime:function(t){if(void 0!==this.vel)return this.vel;var e,r,n=-.001,i=this.getValueAtTime(t),a=this.getValueAtTime(t+n);if(i.length)for(e=createTypedArray("float32",i.length),r=0;r<i.length;r+=1)e[r]=(a[r]-i[r])/n;else e=(a-i)/n;return e},getValueAtTime:function(t){return t*=this.elem.globalData.frameRate,(t-=this.offsetTime)!==this._cachingAtTime.lastFrame&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastFrame<t?this._cachingAtTime.lastIndex:0,this._cachingAtTime.value=this.interpolateValue(t,this._cachingAtTime),this._cachingAtTime.lastFrame=t),this._cachingAtTime.value},getStaticValueAtTime:function(){return this.pv},setGroupProperty:function(t){this.propertyGroup=t}};function addPropertyDecorator(){function t(t,e,r){if(!this.k||!this.keyframes)return this.pv;t=t?t.toLowerCase():"";var n,i,a,s,o,l=this.comp.renderedFrame,h=this.keyframes,u=h[h.length-1].t;if(l<=u)return this.pv;if(r?i=u-(n=e?Math.abs(u-this.elem.comp.globalData.frameRate*e):Math.max(0,u-this.elem.data.ip)):((!e||e>h.length-1)&&(e=h.length-1),n=u-(i=h[h.length-1-e].t)),"pingpong"===t){if(Math.floor((l-i)/n)%2!=0)return this.getValueAtTime((n-(l-i)%n+i)/this.comp.globalData.frameRate,0)}else{if("offset"===t){var c=this.getValueAtTime(i/this.comp.globalData.frameRate,0),p=this.getValueAtTime(u/this.comp.globalData.frameRate,0),f=this.getValueAtTime(((l-i)%n+i)/this.comp.globalData.frameRate,0),d=Math.floor((l-i)/n);if(this.pv.length){for(s=(o=new Array(c.length)).length,a=0;a<s;a+=1)o[a]=(p[a]-c[a])*d+f[a];return o}return(p-c)*d+f}if("continue"===t){var m=this.getValueAtTime(u/this.comp.globalData.frameRate,0),g=this.getValueAtTime((u-.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(s=(o=new Array(m.length)).length,a=0;a<s;a+=1)o[a]=m[a]+(m[a]-g[a])*((l-u)/this.comp.globalData.frameRate)/5e-4;return o}return m+(l-u)/.001*(m-g)}}return this.getValueAtTime(((l-i)%n+i)/this.comp.globalData.frameRate,0)}function e(t,e,r){if(!this.k)return this.pv;t=t?t.toLowerCase():"";var n,i,a,s,o,l=this.comp.renderedFrame,h=this.keyframes,u=h[0].t;if(l>=u)return this.pv;if(r?i=u+(n=e?Math.abs(this.elem.comp.globalData.frameRate*e):Math.max(0,this.elem.data.op-u)):((!e||e>h.length-1)&&(e=h.length-1),n=(i=h[e].t)-u),"pingpong"===t){if(Math.floor((u-l)/n)%2==0)return this.getValueAtTime(((u-l)%n+u)/this.comp.globalData.frameRate,0)}else{if("offset"===t){var c=this.getValueAtTime(u/this.comp.globalData.frameRate,0),p=this.getValueAtTime(i/this.comp.globalData.frameRate,0),f=this.getValueAtTime((n-(u-l)%n+u)/this.comp.globalData.frameRate,0),d=Math.floor((u-l)/n)+1;if(this.pv.length){for(s=(o=new Array(c.length)).length,a=0;a<s;a+=1)o[a]=f[a]-(p[a]-c[a])*d;return o}return f-(p-c)*d}if("continue"===t){var m=this.getValueAtTime(u/this.comp.globalData.frameRate,0),g=this.getValueAtTime((u+.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(s=(o=new Array(m.length)).length,a=0;a<s;a+=1)o[a]=m[a]+(m[a]-g[a])*(u-l)/.001;return o}return m+(m-g)*(u-l)/.001}}return this.getValueAtTime((n-((u-l)%n+u))/this.comp.globalData.frameRate,0)}function r(t,e){if(!this.k)return this.pv;if(t=.5*(t||.4),(e=Math.floor(e||5))<=1)return this.pv;var r,n,i=this.comp.renderedFrame/this.comp.globalData.frameRate,a=i-t,s=e>1?(i+t-a)/(e-1):1,o=0,l=0;for(r=this.pv.length?createTypedArray("float32",this.pv.length):0;o<e;){if(n=this.getValueAtTime(a+o*s),this.pv.length)for(l=0;l<this.pv.length;l+=1)r[l]+=n[l];else r+=n;o+=1}if(this.pv.length)for(l=0;l<this.pv.length;l+=1)r[l]/=e;else r/=e;return r}function n(t){this._transformCachingAtTime||(this._transformCachingAtTime={v:new Matrix});var e=this._transformCachingAtTime.v;if(e.cloneFromProps(this.pre.props),this.appliedTransformations<1){var r=this.a.getValueAtTime(t);e.translate(-r[0]*this.a.mult,-r[1]*this.a.mult,r[2]*this.a.mult)}if(this.appliedTransformations<2){var n=this.s.getValueAtTime(t);e.scale(n[0]*this.s.mult,n[1]*this.s.mult,n[2]*this.s.mult)}if(this.sk&&this.appliedTransformations<3){var i=this.sk.getValueAtTime(t),a=this.sa.getValueAtTime(t);e.skewFromAxis(-i*this.sk.mult,a*this.sa.mult)}if(this.r&&this.appliedTransformations<4){var s=this.r.getValueAtTime(t);e.rotate(-s*this.r.mult)}else if(!this.r&&this.appliedTransformations<4){var o=this.rz.getValueAtTime(t),l=this.ry.getValueAtTime(t),h=this.rx.getValueAtTime(t),u=this.or.getValueAtTime(t);e.rotateZ(-o*this.rz.mult).rotateY(l*this.ry.mult).rotateX(h*this.rx.mult).rotateZ(-u[2]*this.or.mult).rotateY(u[1]*this.or.mult).rotateX(u[0]*this.or.mult)}if(this.data.p&&this.data.p.s){var c=this.px.getValueAtTime(t),p=this.py.getValueAtTime(t);if(this.data.p.z){var f=this.pz.getValueAtTime(t);e.translate(c*this.px.mult,p*this.py.mult,-f*this.pz.mult)}else e.translate(c*this.px.mult,p*this.py.mult,0)}else{var d=this.p.getValueAtTime(t);e.translate(d[0]*this.p.mult,d[1]*this.p.mult,-d[2]*this.p.mult)}return e}function i(){return this.v.clone(new Matrix)}var a=TransformPropertyFactory.getTransformProperty;TransformPropertyFactory.getTransformProperty=function(t,e,r){var s=a(t,e,r);return s.dynamicProperties.length?s.getValueAtTime=n.bind(s):s.getValueAtTime=i.bind(s),s.setGroupProperty=expressionHelpers.setGroupProperty,s};var s=PropertyFactory.getProp;PropertyFactory.getProp=function(n,i,a,o,l){var h=s(n,i,a,o,l);h.kf?h.getValueAtTime=expressionHelpers.getValueAtTime.bind(h):h.getValueAtTime=expressionHelpers.getStaticValueAtTime.bind(h),h.setGroupProperty=expressionHelpers.setGroupProperty,h.loopOut=t,h.loopIn=e,h.smooth=r,h.getVelocityAtTime=expressionHelpers.getVelocityAtTime.bind(h),h.getSpeedAtTime=expressionHelpers.getSpeedAtTime.bind(h),h.numKeys=1===i.a?i.k.length:0,h.propertyIndex=i.ix;var u=0;return 0!==a&&(u=createTypedArray("float32",1===i.a?i.k[0].s.length:i.k.length)),h._cachingAtTime={lastFrame:initialDefaultFrame,lastIndex:0,value:u},expressionHelpers.searchExpressions(n,i,h),h.k&&l.addDynamicProperty(h),h};var o=ShapePropertyFactory.getConstructorFunction(),l=ShapePropertyFactory.getKeyframedConstructorFunction();function h(){}h.prototype={vertices:function(t,e){this.k&&this.getValue();var r,n=this.v;void 0!==e&&(n=this.getValueAtTime(e,0));var i=n._length,a=n[t],s=n.v,o=createSizedArray(i);for(r=0;r<i;r+=1)o[r]="i"===t||"o"===t?[a[r][0]-s[r][0],a[r][1]-s[r][1]]:[a[r][0],a[r][1]];return o},points:function(t){return this.vertices("v",t)},inTangents:function(t){return this.vertices("i",t)},outTangents:function(t){return this.vertices("o",t)},isClosed:function(){return this.v.c},pointOnPath:function(t,e){var r=this.v;void 0!==e&&(r=this.getValueAtTime(e,0)),this._segmentsLength||(this._segmentsLength=bez.getSegmentsLength(r));for(var n,i=this._segmentsLength,a=i.lengths,s=i.totalLength*t,o=0,l=a.length,h=0;o<l;){if(h+a[o].addedLength>s){var u=o,c=r.c&&o===l-1?0:o+1,p=(s-h)/a[o].addedLength;n=bez.getPointInSegment(r.v[u],r.v[c],r.o[u],r.i[c],p,a[o]);break}h+=a[o].addedLength,o+=1}return n||(n=r.c?[r.v[0][0],r.v[0][1]]:[r.v[r._length-1][0],r.v[r._length-1][1]]),n},vectorOnPath:function(t,e,r){1==t?t=this.v.c:0==t&&(t=.999);var n=this.pointOnPath(t,e),i=this.pointOnPath(t+.001,e),a=i[0]-n[0],s=i[1]-n[1],o=Math.sqrt(Math.pow(a,2)+Math.pow(s,2));return 0===o?[0,0]:"tangent"===r?[a/o,s/o]:[-s/o,a/o]},tangentOnPath:function(t,e){return this.vectorOnPath(t,e,"tangent")},normalOnPath:function(t,e){return this.vectorOnPath(t,e,"normal")},setGroupProperty:expressionHelpers.setGroupProperty,getValueAtTime:expressionHelpers.getStaticValueAtTime},extendPrototype([h],o),extendPrototype([h],l),l.prototype.getValueAtTime=function(t){return this._cachingAtTime||(this._cachingAtTime={shapeValue:shapePool.clone(this.pv),lastIndex:0,lastTime:initialDefaultFrame}),t*=this.elem.globalData.frameRate,(t-=this.offsetTime)!==this._cachingAtTime.lastTime&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastTime<t?this._caching.lastIndex:0,this._cachingAtTime.lastTime=t,this.interpolateShape(t,this._cachingAtTime.shapeValue,this._cachingAtTime)),this._cachingAtTime.shapeValue},l.prototype.initiateExpression=ExpressionManager.initiateExpression;var u=ShapePropertyFactory.getShapeProp;ShapePropertyFactory.getShapeProp=function(t,e,r,n,i){var a=u(t,e,r,n,i);return a.propertyIndex=e.ix,a.lock=!1,3===r?expressionHelpers.searchExpressions(t,e.pt,a):4===r&&expressionHelpers.searchExpressions(t,e.ks,a),a.k&&t.addDynamicProperty(a),a}}function initialize$1(){addPropertyDecorator()}function addDecorator(){TextProperty.prototype.getExpressionValue=function(t,e){var r=this.calculateExpression(e);if(t.t!==r){var n={};return this.copyData(n,t),n.t=r.toString(),n.__complete=!1,n}return t},TextProperty.prototype.searchProperty=function(){var t=this.searchKeyframes(),e=this.searchExpressions();return this.kf=t||e,this.kf},TextProperty.prototype.searchExpressions=function(){return this.data.d.x?(this.calculateExpression=ExpressionManager.initiateExpression.bind(this)(this.elem,this.data.d,this),this.addEffect(this.getExpressionValue.bind(this)),!0):null}}function initialize(){addDecorator()}function SVGComposableEffect(){}function SVGTintFilter(t,e,r,n,i){this.filterManager=e;var a=createNS("feColorMatrix");a.setAttribute("type","matrix"),a.setAttribute("color-interpolation-filters","linearRGB"),a.setAttribute("values","0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0"),a.setAttribute("result",n+"_tint_1"),t.appendChild(a),(a=createNS("feColorMatrix")).setAttribute("type","matrix"),a.setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),a.setAttribute("result",n+"_tint_2"),t.appendChild(a),this.matrixFilter=a;var s=this.createMergeNode(n,[i,n+"_tint_1",n+"_tint_2"]);t.appendChild(s)}function SVGFillFilter(t,e,r,n){this.filterManager=e;var i=createNS("feColorMatrix");i.setAttribute("type","matrix"),i.setAttribute("color-interpolation-filters","sRGB"),i.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),i.setAttribute("result",n),t.appendChild(i),this.matrixFilter=i}function SVGStrokeEffect(t,e,r){this.initialized=!1,this.filterManager=e,this.elem=r,this.paths=[]}function SVGTritoneFilter(t,e,r,n){this.filterManager=e;var i=createNS("feColorMatrix");i.setAttribute("type","matrix"),i.setAttribute("color-interpolation-filters","linearRGB"),i.setAttribute("values","0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0"),t.appendChild(i);var a=createNS("feComponentTransfer");a.setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("result",n),this.matrixFilter=a;var s=createNS("feFuncR");s.setAttribute("type","table"),a.appendChild(s),this.feFuncR=s;var o=createNS("feFuncG");o.setAttribute("type","table"),a.appendChild(o),this.feFuncG=o;var l=createNS("feFuncB");l.setAttribute("type","table"),a.appendChild(l),this.feFuncB=l,t.appendChild(a)}function SVGProLevelsFilter(t,e,r,n){this.filterManager=e;var i=this.filterManager.effectElements,a=createNS("feComponentTransfer");(i[10].p.k||0!==i[10].p.v||i[11].p.k||1!==i[11].p.v||i[12].p.k||1!==i[12].p.v||i[13].p.k||0!==i[13].p.v||i[14].p.k||1!==i[14].p.v)&&(this.feFuncR=this.createFeFunc("feFuncR",a)),(i[17].p.k||0!==i[17].p.v||i[18].p.k||1!==i[18].p.v||i[19].p.k||1!==i[19].p.v||i[20].p.k||0!==i[20].p.v||i[21].p.k||1!==i[21].p.v)&&(this.feFuncG=this.createFeFunc("feFuncG",a)),(i[24].p.k||0!==i[24].p.v||i[25].p.k||1!==i[25].p.v||i[26].p.k||1!==i[26].p.v||i[27].p.k||0!==i[27].p.v||i[28].p.k||1!==i[28].p.v)&&(this.feFuncB=this.createFeFunc("feFuncB",a)),(i[31].p.k||0!==i[31].p.v||i[32].p.k||1!==i[32].p.v||i[33].p.k||1!==i[33].p.v||i[34].p.k||0!==i[34].p.v||i[35].p.k||1!==i[35].p.v)&&(this.feFuncA=this.createFeFunc("feFuncA",a)),(this.feFuncR||this.feFuncG||this.feFuncB||this.feFuncA)&&(a.setAttribute("color-interpolation-filters","sRGB"),t.appendChild(a)),(i[3].p.k||0!==i[3].p.v||i[4].p.k||1!==i[4].p.v||i[5].p.k||1!==i[5].p.v||i[6].p.k||0!==i[6].p.v||i[7].p.k||1!==i[7].p.v)&&((a=createNS("feComponentTransfer")).setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("result",n),t.appendChild(a),this.feFuncRComposed=this.createFeFunc("feFuncR",a),this.feFuncGComposed=this.createFeFunc("feFuncG",a),this.feFuncBComposed=this.createFeFunc("feFuncB",a))}function SVGDropShadowEffect(t,e,r,n,i){var a=e.container.globalData.renderConfig.filterSize,s=e.data.fs||a;t.setAttribute("x",s.x||a.x),t.setAttribute("y",s.y||a.y),t.setAttribute("width",s.width||a.width),t.setAttribute("height",s.height||a.height),this.filterManager=e;var o=createNS("feGaussianBlur");o.setAttribute("in","SourceAlpha"),o.setAttribute("result",n+"_drop_shadow_1"),o.setAttribute("stdDeviation","0"),this.feGaussianBlur=o,t.appendChild(o);var l=createNS("feOffset");l.setAttribute("dx","25"),l.setAttribute("dy","0"),l.setAttribute("in",n+"_drop_shadow_1"),l.setAttribute("result",n+"_drop_shadow_2"),this.feOffset=l,t.appendChild(l);var h=createNS("feFlood");h.setAttribute("flood-color","#00ff00"),h.setAttribute("flood-opacity","1"),h.setAttribute("result",n+"_drop_shadow_3"),this.feFlood=h,t.appendChild(h);var u=createNS("feComposite");u.setAttribute("in",n+"_drop_shadow_3"),u.setAttribute("in2",n+"_drop_shadow_2"),u.setAttribute("operator","in"),u.setAttribute("result",n+"_drop_shadow_4"),t.appendChild(u);var c=this.createMergeNode(n,[n+"_drop_shadow_4",i]);t.appendChild(c)}SVGComposableEffect.prototype={createMergeNode:function(t,e){var r,n,i=createNS("feMerge");for(i.setAttribute("result",t),n=0;n<e.length;n+=1)(r=createNS("feMergeNode")).setAttribute("in",e[n]),i.appendChild(r),i.appendChild(r);return i}},extendPrototype([SVGComposableEffect],SVGTintFilter),SVGTintFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,n=this.filterManager.effectElements[2].p.v/100;this.matrixFilter.setAttribute("values",r[0]-e[0]+" 0 0 0 "+e[0]+" "+(r[1]-e[1])+" 0 0 0 "+e[1]+" "+(r[2]-e[2])+" 0 0 0 "+e[2]+" 0 0 0 "+n+" 0")}},SVGFillFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[2].p.v,r=this.filterManager.effectElements[6].p.v;this.matrixFilter.setAttribute("values","0 0 0 0 "+e[0]+" 0 0 0 0 "+e[1]+" 0 0 0 0 "+e[2]+" 0 0 0 "+r+" 0")}},SVGStrokeEffect.prototype.initialize=function(){var t,e,r,n,i=this.elem.layerElement.children||this.elem.layerElement.childNodes;for(1===this.filterManager.effectElements[1].p.v?(n=this.elem.maskManager.masksProperties.length,r=0):n=1+(r=this.filterManager.effectElements[0].p.v-1),(e=createNS("g")).setAttribute("fill","none"),e.setAttribute("stroke-linecap","round"),e.setAttribute("stroke-dashoffset",1);r<n;r+=1)t=createNS("path"),e.appendChild(t),this.paths.push({p:t,m:r});if(3===this.filterManager.effectElements[10].p.v){var a=createNS("mask"),s=createElementID();a.setAttribute("id",s),a.setAttribute("mask-type","alpha"),a.appendChild(e),this.elem.globalData.defs.appendChild(a);var o=createNS("g");for(o.setAttribute("mask","url("+getLocationHref()+"#"+s+")");i[0];)o.appendChild(i[0]);this.elem.layerElement.appendChild(o),this.masker=a,e.setAttribute("stroke","#fff")}else if(1===this.filterManager.effectElements[10].p.v||2===this.filterManager.effectElements[10].p.v){if(2===this.filterManager.effectElements[10].p.v)for(i=this.elem.layerElement.children||this.elem.layerElement.childNodes;i.length;)this.elem.layerElement.removeChild(i[0]);this.elem.layerElement.appendChild(e),this.elem.layerElement.removeAttribute("mask"),e.setAttribute("stroke","#fff")}this.initialized=!0,this.pathMasker=e},SVGStrokeEffect.prototype.renderFrame=function(t){var e;this.initialized||this.initialize();var r,n,i=this.paths.length;for(e=0;e<i;e+=1)if(-1!==this.paths[e].m&&(r=this.elem.maskManager.viewData[this.paths[e].m],n=this.paths[e].p,(t||this.filterManager._mdf||r.prop._mdf)&&n.setAttribute("d",r.lastPath),t||this.filterManager.effectElements[9].p._mdf||this.filterManager.effectElements[4].p._mdf||this.filterManager.effectElements[7].p._mdf||this.filterManager.effectElements[8].p._mdf||r.prop._mdf)){var a;if(0!==this.filterManager.effectElements[7].p.v||100!==this.filterManager.effectElements[8].p.v){var s=.01*Math.min(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v),o=.01*Math.max(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v),l=n.getTotalLength();a="0 0 0 "+l*s+" ";var h,u=l*(o-s),c=1+2*this.filterManager.effectElements[4].p.v*this.filterManager.effectElements[9].p.v*.01,p=Math.floor(u/c);for(h=0;h<p;h+=1)a+="1 "+2*this.filterManager.effectElements[4].p.v*this.filterManager.effectElements[9].p.v*.01+" ";a+="0 "+10*l+" 0 0"}else a="1 "+2*this.filterManager.effectElements[4].p.v*this.filterManager.effectElements[9].p.v*.01;n.setAttribute("stroke-dasharray",a)}if((t||this.filterManager.effectElements[4].p._mdf)&&this.pathMasker.setAttribute("stroke-width",2*this.filterManager.effectElements[4].p.v),(t||this.filterManager.effectElements[6].p._mdf)&&this.pathMasker.setAttribute("opacity",this.filterManager.effectElements[6].p.v),(1===this.filterManager.effectElements[10].p.v||2===this.filterManager.effectElements[10].p.v)&&(t||this.filterManager.effectElements[3].p._mdf)){var f=this.filterManager.effectElements[3].p.v;this.pathMasker.setAttribute("stroke","rgb("+bmFloor(255*f[0])+","+bmFloor(255*f[1])+","+bmFloor(255*f[2])+")")}},SVGTritoneFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,n=this.filterManager.effectElements[2].p.v,i=n[0]+" "+r[0]+" "+e[0],a=n[1]+" "+r[1]+" "+e[1],s=n[2]+" "+r[2]+" "+e[2];this.feFuncR.setAttribute("tableValues",i),this.feFuncG.setAttribute("tableValues",a),this.feFuncB.setAttribute("tableValues",s)}},SVGProLevelsFilter.prototype.createFeFunc=function(t,e){var r=createNS(t);return r.setAttribute("type","table"),e.appendChild(r),r},SVGProLevelsFilter.prototype.getTableValue=function(t,e,r,n,i){for(var a,s,o=0,l=Math.min(t,e),h=Math.max(t,e),u=Array.call(null,{length:256}),c=0,p=i-n,f=e-t;o<=256;)s=(a=o/256)<=l?f<0?i:n:a>=h?f<0?n:i:n+p*Math.pow((a-t)/f,1/r),u[c]=s,c+=1,o+=256/255;return u.join(" ")},SVGProLevelsFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e,r=this.filterManager.effectElements;this.feFuncRComposed&&(t||r[3].p._mdf||r[4].p._mdf||r[5].p._mdf||r[6].p._mdf||r[7].p._mdf)&&(e=this.getTableValue(r[3].p.v,r[4].p.v,r[5].p.v,r[6].p.v,r[7].p.v),this.feFuncRComposed.setAttribute("tableValues",e),this.feFuncGComposed.setAttribute("tableValues",e),this.feFuncBComposed.setAttribute("tableValues",e)),this.feFuncR&&(t||r[10].p._mdf||r[11].p._mdf||r[12].p._mdf||r[13].p._mdf||r[14].p._mdf)&&(e=this.getTableValue(r[10].p.v,r[11].p.v,r[12].p.v,r[13].p.v,r[14].p.v),this.feFuncR.setAttribute("tableValues",e)),this.feFuncG&&(t||r[17].p._mdf||r[18].p._mdf||r[19].p._mdf||r[20].p._mdf||r[21].p._mdf)&&(e=this.getTableValue(r[17].p.v,r[18].p.v,r[19].p.v,r[20].p.v,r[21].p.v),this.feFuncG.setAttribute("tableValues",e)),this.feFuncB&&(t||r[24].p._mdf||r[25].p._mdf||r[26].p._mdf||r[27].p._mdf||r[28].p._mdf)&&(e=this.getTableValue(r[24].p.v,r[25].p.v,r[26].p.v,r[27].p.v,r[28].p.v),this.feFuncB.setAttribute("tableValues",e)),this.feFuncA&&(t||r[31].p._mdf||r[32].p._mdf||r[33].p._mdf||r[34].p._mdf||r[35].p._mdf)&&(e=this.getTableValue(r[31].p.v,r[32].p.v,r[33].p.v,r[34].p.v,r[35].p.v),this.feFuncA.setAttribute("tableValues",e))}},extendPrototype([SVGComposableEffect],SVGDropShadowEffect),SVGDropShadowEffect.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){if((t||this.filterManager.effectElements[4].p._mdf)&&this.feGaussianBlur.setAttribute("stdDeviation",this.filterManager.effectElements[4].p.v/4),t||this.filterManager.effectElements[0].p._mdf){var e=this.filterManager.effectElements[0].p.v;this.feFlood.setAttribute("flood-color",rgbToHex(Math.round(255*e[0]),Math.round(255*e[1]),Math.round(255*e[2])))}if((t||this.filterManager.effectElements[1].p._mdf)&&this.feFlood.setAttribute("flood-opacity",this.filterManager.effectElements[1].p.v/255),t||this.filterManager.effectElements[2].p._mdf||this.filterManager.effectElements[3].p._mdf){var r=this.filterManager.effectElements[3].p.v,n=(this.filterManager.effectElements[2].p.v-90)*degToRads,i=r*Math.cos(n),a=r*Math.sin(n);this.feOffset.setAttribute("dx",i),this.feOffset.setAttribute("dy",a)}}};var _svgMatteSymbols=[];function SVGMatte3Effect(t,e,r){this.initialized=!1,this.filterManager=e,this.filterElem=t,this.elem=r,r.matteElement=createNS("g"),r.matteElement.appendChild(r.layerElement),r.matteElement.appendChild(r.transformedElement),r.baseElement=r.matteElement}function SVGGaussianBlurEffect(t,e,r,n){t.setAttribute("x","-100%"),t.setAttribute("y","-100%"),t.setAttribute("width","300%"),t.setAttribute("height","300%"),this.filterManager=e;var i=createNS("feGaussianBlur");i.setAttribute("result",n),t.appendChild(i),this.feGaussianBlur=i}return SVGMatte3Effect.prototype.findSymbol=function(t){for(var e=0,r=_svgMatteSymbols.length;e<r;){if(_svgMatteSymbols[e]===t)return _svgMatteSymbols[e];e+=1}return null},SVGMatte3Effect.prototype.replaceInParent=function(t,e){var r=t.layerElement.parentNode;if(r){for(var n,i=r.children,a=0,s=i.length;a<s&&i[a]!==t.layerElement;)a+=1;a<=s-2&&(n=i[a+1]);var o=createNS("use");o.setAttribute("href","#"+e),n?r.insertBefore(o,n):r.appendChild(o)}},SVGMatte3Effect.prototype.setElementAsMask=function(t,e){if(!this.findSymbol(e)){var r=createElementID(),n=createNS("mask");n.setAttribute("id",e.layerId),n.setAttribute("mask-type","alpha"),_svgMatteSymbols.push(e);var i=t.globalData.defs;i.appendChild(n);var a=createNS("symbol");a.setAttribute("id",r),this.replaceInParent(e,r),a.appendChild(e.layerElement),i.appendChild(a);var s=createNS("use");s.setAttribute("href","#"+r),n.appendChild(s),e.data.hd=!1,e.show()}t.setMatte(e.layerId)},SVGMatte3Effect.prototype.initialize=function(){for(var t=this.filterManager.effectElements[0].p.v,e=this.elem.comp.elements,r=0,n=e.length;r<n;)e[r]&&e[r].data.ind===t&&this.setElementAsMask(this.elem,e[r]),r+=1;this.initialized=!0},SVGMatte3Effect.prototype.renderFrame=function(){this.initialized||this.initialize()},SVGGaussianBlurEffect.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=.3*this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,n=3==r?0:e,i=2==r?0:e;this.feGaussianBlur.setAttribute("stdDeviation",n+" "+i);var a=1==this.filterManager.effectElements[2].p.v?"wrap":"duplicate";this.feGaussianBlur.setAttribute("edgeMode",a)}},registerRenderer("canvas",CanvasRenderer),registerRenderer("html",HybridRenderer),registerRenderer("svg",SVGRenderer),ShapeModifiers.registerModifier("tm",TrimModifier),ShapeModifiers.registerModifier("pb",PuckerAndBloatModifier),ShapeModifiers.registerModifier("rp",RepeaterModifier),ShapeModifiers.registerModifier("rd",RoundCornersModifier),setExpressionsPlugin(Expressions),initialize$1(),initialize(),registerEffect(20,SVGTintFilter,!0),registerEffect(21,SVGFillFilter,!0),registerEffect(22,SVGStrokeEffect,!1),registerEffect(23,SVGTritoneFilter,!0),registerEffect(24,SVGProLevelsFilter,!0),registerEffect(25,SVGDropShadowEffect,!0),registerEffect(28,SVGMatte3Effect,!1),registerEffect(29,SVGGaussianBlurEffect,!0),lottie},module.exports=factory())},6192:(t,e)=>{var r,n,i=function(){var t=function(t,e){var r=t,n=s[e],i=null,a=0,l=null,g=[],y={},b=function(t,e){i=function(t){for(var e=new Array(t),r=0;r<t;r+=1){e[r]=new Array(t);for(var n=0;n<t;n+=1)e[r][n]=null}return e}(a=4*r+17),w(0,0),w(a-7,0),w(0,a-7),_(),x(),S(t,e),r>=7&&k(t),null==l&&(l=C(r,n,g)),E(l,e)},w=function(t,e){for(var r=-1;r<=7;r+=1)if(!(t+r<=-1||a<=t+r))for(var n=-1;n<=7;n+=1)e+n<=-1||a<=e+n||(i[t+r][e+n]=0<=r&&r<=6&&(0==n||6==n)||0<=n&&n<=6&&(0==r||6==r)||2<=r&&r<=4&&2<=n&&n<=4)},x=function(){for(var t=8;t<a-8;t+=1)null==i[t][6]&&(i[t][6]=t%2==0);for(var e=8;e<a-8;e+=1)null==i[6][e]&&(i[6][e]=e%2==0)},_=function(){for(var t=o.getPatternPosition(r),e=0;e<t.length;e+=1)for(var n=0;n<t.length;n+=1){var a=t[e],s=t[n];if(null==i[a][s])for(var l=-2;l<=2;l+=1)for(var h=-2;h<=2;h+=1)i[a+l][s+h]=-2==l||2==l||-2==h||2==h||0==l&&0==h}},k=function(t){for(var e=o.getBCHTypeNumber(r),n=0;n<18;n+=1){var s=!t&&1==(e>>n&1);i[Math.floor(n/3)][n%3+a-8-3]=s}for(n=0;n<18;n+=1)s=!t&&1==(e>>n&1),i[n%3+a-8-3][Math.floor(n/3)]=s},S=function(t,e){for(var r=n<<3|e,s=o.getBCHTypeInfo(r),l=0;l<15;l+=1){var h=!t&&1==(s>>l&1);l<6?i[l][8]=h:l<8?i[l+1][8]=h:i[a-15+l][8]=h}for(l=0;l<15;l+=1)h=!t&&1==(s>>l&1),l<8?i[8][a-l-1]=h:l<9?i[8][15-l-1+1]=h:i[8][15-l-1]=h;i[a-8][8]=!t},E=function(t,e){for(var r=-1,n=a-1,s=7,l=0,h=o.getMaskFunction(e),u=a-1;u>0;u-=2)for(6==u&&(u-=1);;){for(var c=0;c<2;c+=1)if(null==i[n][u-c]){var p=!1;l<t.length&&(p=1==(t[l]>>>s&1)),h(n,u-c)&&(p=!p),i[n][u-c]=p,-1==(s-=1)&&(l+=1,s=7)}if((n+=r)<0||a<=n){n-=r,r=-r;break}}},C=function(t,e,r){for(var n=u.getRSBlocks(t,e),i=c(),a=0;a<r.length;a+=1){var s=r[a];i.put(s.getMode(),4),i.put(s.getLength(),o.getLengthInBits(s.getMode(),t)),s.write(i)}var l=0;for(a=0;a<n.length;a+=1)l+=n[a].dataCount;if(i.getLengthInBits()>8*l)throw"code length overflow. ("+i.getLengthInBits()+">"+8*l+")";for(i.getLengthInBits()+4<=8*l&&i.put(0,4);i.getLengthInBits()%8!=0;)i.putBit(!1);for(;!(i.getLengthInBits()>=8*l||(i.put(236,8),i.getLengthInBits()>=8*l));)i.put(17,8);return function(t,e){for(var r=0,n=0,i=0,a=new Array(e.length),s=new Array(e.length),l=0;l<e.length;l+=1){var u=e[l].dataCount,c=e[l].totalCount-u;n=Math.max(n,u),i=Math.max(i,c),a[l]=new Array(u);for(var p=0;p<a[l].length;p+=1)a[l][p]=255&t.getBuffer()[p+r];r+=u;var f=o.getErrorCorrectPolynomial(c),d=h(a[l],f.getLength()-1).mod(f);for(s[l]=new Array(f.getLength()-1),p=0;p<s[l].length;p+=1){var m=p+d.getLength()-s[l].length;s[l][p]=m>=0?d.getAt(m):0}}var g=0;for(p=0;p<e.length;p+=1)g+=e[p].totalCount;var y=new Array(g),v=0;for(p=0;p<n;p+=1)for(l=0;l<e.length;l+=1)p<a[l].length&&(y[v]=a[l][p],v+=1);for(p=0;p<i;p+=1)for(l=0;l<e.length;l+=1)p<s[l].length&&(y[v]=s[l][p],v+=1);return y}(i,n)};y.addData=function(t,e){var r=null;switch(e=e||"Byte"){case"Numeric":r=p(t);break;case"Alphanumeric":r=f(t);break;case"Byte":r=d(t);break;case"Kanji":r=m(t);break;default:throw"mode:"+e}g.push(r),l=null},y.isDark=function(t,e){if(t<0||a<=t||e<0||a<=e)throw t+","+e;return i[t][e]},y.getModuleCount=function(){return a},y.make=function(){if(r<1){for(var t=1;t<40;t++){for(var e=u.getRSBlocks(t,n),i=c(),a=0;a<g.length;a++){var s=g[a];i.put(s.getMode(),4),i.put(s.getLength(),o.getLengthInBits(s.getMode(),t)),s.write(i)}var l=0;for(a=0;a<e.length;a++)l+=e[a].dataCount;if(i.getLengthInBits()<=8*l)break}r=t}b(!1,function(){for(var t=0,e=0,r=0;r<8;r+=1){b(!0,r);var n=o.getLostPoint(y);(0==r||t>n)&&(t=n,e=r)}return e}())},y.createTableTag=function(t,e){t=t||2;var r="";r+='<table style="',r+=" border-width: 0px; border-style: none;",r+=" border-collapse: collapse;",r+=" padding: 0px; margin: "+(e=void 0===e?4*t:e)+"px;",r+='">',r+="<tbody>";for(var n=0;n<y.getModuleCount();n+=1){r+="<tr>";for(var i=0;i<y.getModuleCount();i+=1)r+='<td style="',r+=" border-width: 0px; border-style: none;",r+=" border-collapse: collapse;",r+=" padding: 0px; margin: 0px;",r+=" width: "+t+"px;",r+=" height: "+t+"px;",r+=" background-color: ",r+=y.isDark(n,i)?"#000000":"#ffffff",r+=";",r+='"/>';r+="</tr>"}return(r+="</tbody>")+"</table>"},y.createSvgTag=function(t,e,r,n){var i={};"object"==typeof arguments[0]&&(t=(i=arguments[0]).cellSize,e=i.margin,r=i.alt,n=i.title),t=t||2,e=void 0===e?4*t:e,(r="string"==typeof r?{text:r}:r||{}).text=r.text||null,r.id=r.text?r.id||"qrcode-description":null,(n="string"==typeof n?{text:n}:n||{}).text=n.text||null,n.id=n.text?n.id||"qrcode-title":null;var a,s,o,l,h=y.getModuleCount()*t+2*e,u="";for(l="l"+t+",0 0,"+t+" -"+t+",0 0,-"+t+"z ",u+='<svg version="1.1" xmlns="http://www.w3.org/2000/svg"',u+=i.scalable?"":' width="'+h+'px" height="'+h+'px"',u+=' viewBox="0 0 '+h+" "+h+'" ',u+=' preserveAspectRatio="xMinYMin meet"',u+=n.text||r.text?' role="img" aria-labelledby="'+M([n.id,r.id].join(" ").trim())+'"':"",u+=">",u+=n.text?'<title id="'+M(n.id)+'">'+M(n.text)+"</title>":"",u+=r.text?'<description id="'+M(r.id)+'">'+M(r.text)+"</description>":"",u+='<rect width="100%" height="100%" fill="white" cx="0" cy="0"/>',u+='<path d="',s=0;s<y.getModuleCount();s+=1)for(o=s*t+e,a=0;a<y.getModuleCount();a+=1)y.isDark(s,a)&&(u+="M"+(a*t+e)+","+o+l);return(u+='" stroke="transparent" fill="black"/>')+"</svg>"},y.createDataURL=function(t,e){t=t||2,e=void 0===e?4*t:e;var r=y.getModuleCount()*t+2*e,n=e,i=r-e;return v(r,r,(function(e,r){if(n<=e&&e<i&&n<=r&&r<i){var a=Math.floor((e-n)/t),s=Math.floor((r-n)/t);return y.isDark(s,a)?0:1}return 1}))},y.createImgTag=function(t,e,r){t=t||2,e=void 0===e?4*t:e;var n=y.getModuleCount()*t+2*e,i="";return i+="<img",i+=' src="',i+=y.createDataURL(t,e),i+='"',i+=' width="',i+=n,i+='"',i+=' height="',i+=n,i+='"',r&&(i+=' alt="',i+=M(r),i+='"'),i+"/>"};var M=function(t){for(var e="",r=0;r<t.length;r+=1){var n=t.charAt(r);switch(n){case"<":e+="&lt;";break;case">":e+="&gt;";break;case"&":e+="&amp;";break;case'"':e+="&quot;";break;default:e+=n}}return e};return y.createASCII=function(t,e){if((t=t||1)<2)return function(t){t=void 0===t?2:t;var e,r,n,i,a,s=1*y.getModuleCount()+2*t,o=t,l=s-t,h={"██":"█","█ ":"▀"," █":"▄","  ":" "},u={"██":"▀","█ ":"▀"," █":" ","  ":" "},c="";for(e=0;e<s;e+=2){for(n=Math.floor((e-o)/1),i=Math.floor((e+1-o)/1),r=0;r<s;r+=1)a="█",o<=r&&r<l&&o<=e&&e<l&&y.isDark(n,Math.floor((r-o)/1))&&(a=" "),o<=r&&r<l&&o<=e+1&&e+1<l&&y.isDark(i,Math.floor((r-o)/1))?a+=" ":a+="█",c+=t<1&&e+1>=l?u[a]:h[a];c+="\n"}return s%2&&t>0?c.substring(0,c.length-s-1)+Array(s+1).join("▀"):c.substring(0,c.length-1)}(e);t-=1,e=void 0===e?2*t:e;var r,n,i,a,s=y.getModuleCount()*t+2*e,o=e,l=s-e,h=Array(t+1).join("██"),u=Array(t+1).join("  "),c="",p="";for(r=0;r<s;r+=1){for(i=Math.floor((r-o)/t),p="",n=0;n<s;n+=1)a=1,o<=n&&n<l&&o<=r&&r<l&&y.isDark(i,Math.floor((n-o)/t))&&(a=0),p+=a?h:u;for(i=0;i<t;i+=1)c+=p+"\n"}return c.substring(0,c.length-1)},y.renderTo2dContext=function(t,e){e=e||2;for(var r=y.getModuleCount(),n=0;n<r;n++)for(var i=0;i<r;i++)t.fillStyle=y.isDark(n,i)?"black":"white",t.fillRect(n*e,i*e,e,e)},y};t.stringToBytes=(t.stringToBytesFuncs={default:function(t){for(var e=[],r=0;r<t.length;r+=1){var n=t.charCodeAt(r);e.push(255&n)}return e}}).default,t.createStringToBytes=function(t,e){var r=function(){for(var r=y(t),n=function(){var t=r.read();if(-1==t)throw"eof";return t},i=0,a={};;){var s=r.read();if(-1==s)break;var o=n(),l=n()<<8|n();a[String.fromCharCode(s<<8|o)]=l,i+=1}if(i!=e)throw i+" != "+e;return a}(),n="?".charCodeAt(0);return function(t){for(var e=[],i=0;i<t.length;i+=1){var a=t.charCodeAt(i);if(a<128)e.push(a);else{var s=r[t.charAt(i)];"number"==typeof s?(255&s)==s?e.push(s):(e.push(s>>>8),e.push(255&s)):e.push(n)}}return e}};var e,r,n,i,a,s={L:1,M:0,Q:3,H:2},o=(e=[[],[6,18],[6,22],[6,26],[6,30],[6,34],[6,22,38],[6,24,42],[6,26,46],[6,28,50],[6,30,54],[6,32,58],[6,34,62],[6,26,46,66],[6,26,48,70],[6,26,50,74],[6,30,54,78],[6,30,56,82],[6,30,58,86],[6,34,62,90],[6,28,50,72,94],[6,26,50,74,98],[6,30,54,78,102],[6,28,54,80,106],[6,32,58,84,110],[6,30,58,86,114],[6,34,62,90,118],[6,26,50,74,98,122],[6,30,54,78,102,126],[6,26,52,78,104,130],[6,30,56,82,108,134],[6,34,60,86,112,138],[6,30,58,86,114,142],[6,34,62,90,118,146],[6,30,54,78,102,126,150],[6,24,50,76,102,128,154],[6,28,54,80,106,132,158],[6,32,58,84,110,136,162],[6,26,54,82,110,138,166],[6,30,58,86,114,142,170]],r=1335,n=7973,a=function(t){for(var e=0;0!=t;)e+=1,t>>>=1;return e},(i={}).getBCHTypeInfo=function(t){for(var e=t<<10;a(e)-a(r)>=0;)e^=r<<a(e)-a(r);return 21522^(t<<10|e)},i.getBCHTypeNumber=function(t){for(var e=t<<12;a(e)-a(n)>=0;)e^=n<<a(e)-a(n);return t<<12|e},i.getPatternPosition=function(t){return e[t-1]},i.getMaskFunction=function(t){switch(t){case 0:return function(t,e){return(t+e)%2==0};case 1:return function(t,e){return t%2==0};case 2:return function(t,e){return e%3==0};case 3:return function(t,e){return(t+e)%3==0};case 4:return function(t,e){return(Math.floor(t/2)+Math.floor(e/3))%2==0};case 5:return function(t,e){return t*e%2+t*e%3==0};case 6:return function(t,e){return(t*e%2+t*e%3)%2==0};case 7:return function(t,e){return(t*e%3+(t+e)%2)%2==0};default:throw"bad maskPattern:"+t}},i.getErrorCorrectPolynomial=function(t){for(var e=h([1],0),r=0;r<t;r+=1)e=e.multiply(h([1,l.gexp(r)],0));return e},i.getLengthInBits=function(t,e){if(1<=e&&e<10)switch(t){case 1:return 10;case 2:return 9;case 4:case 8:return 8;default:throw"mode:"+t}else if(e<27)switch(t){case 1:return 12;case 2:return 11;case 4:return 16;case 8:return 10;default:throw"mode:"+t}else{if(!(e<41))throw"type:"+e;switch(t){case 1:return 14;case 2:return 13;case 4:return 16;case 8:return 12;default:throw"mode:"+t}}},i.getLostPoint=function(t){for(var e=t.getModuleCount(),r=0,n=0;n<e;n+=1)for(var i=0;i<e;i+=1){for(var a=0,s=t.isDark(n,i),o=-1;o<=1;o+=1)if(!(n+o<0||e<=n+o))for(var l=-1;l<=1;l+=1)i+l<0||e<=i+l||0==o&&0==l||s==t.isDark(n+o,i+l)&&(a+=1);a>5&&(r+=3+a-5)}for(n=0;n<e-1;n+=1)for(i=0;i<e-1;i+=1){var h=0;t.isDark(n,i)&&(h+=1),t.isDark(n+1,i)&&(h+=1),t.isDark(n,i+1)&&(h+=1),t.isDark(n+1,i+1)&&(h+=1),0!=h&&4!=h||(r+=3)}for(n=0;n<e;n+=1)for(i=0;i<e-6;i+=1)t.isDark(n,i)&&!t.isDark(n,i+1)&&t.isDark(n,i+2)&&t.isDark(n,i+3)&&t.isDark(n,i+4)&&!t.isDark(n,i+5)&&t.isDark(n,i+6)&&(r+=40);for(i=0;i<e;i+=1)for(n=0;n<e-6;n+=1)t.isDark(n,i)&&!t.isDark(n+1,i)&&t.isDark(n+2,i)&&t.isDark(n+3,i)&&t.isDark(n+4,i)&&!t.isDark(n+5,i)&&t.isDark(n+6,i)&&(r+=40);var u=0;for(i=0;i<e;i+=1)for(n=0;n<e;n+=1)t.isDark(n,i)&&(u+=1);return r+Math.abs(100*u/e/e-50)/5*10},i),l=function(){for(var t=new Array(256),e=new Array(256),r=0;r<8;r+=1)t[r]=1<<r;for(r=8;r<256;r+=1)t[r]=t[r-4]^t[r-5]^t[r-6]^t[r-8];for(r=0;r<255;r+=1)e[t[r]]=r;return{glog:function(t){if(t<1)throw"glog("+t+")";return e[t]},gexp:function(e){for(;e<0;)e+=255;for(;e>=256;)e-=255;return t[e]}}}();function h(t,e){if(void 0===t.length)throw t.length+"/"+e;var r=function(){for(var r=0;r<t.length&&0==t[r];)r+=1;for(var n=new Array(t.length-r+e),i=0;i<t.length-r;i+=1)n[i]=t[i+r];return n}(),n={getAt:function(t){return r[t]},getLength:function(){return r.length},multiply:function(t){for(var e=new Array(n.getLength()+t.getLength()-1),r=0;r<n.getLength();r+=1)for(var i=0;i<t.getLength();i+=1)e[r+i]^=l.gexp(l.glog(n.getAt(r))+l.glog(t.getAt(i)));return h(e,0)},mod:function(t){if(n.getLength()-t.getLength()<0)return n;for(var e=l.glog(n.getAt(0))-l.glog(t.getAt(0)),r=new Array(n.getLength()),i=0;i<n.getLength();i+=1)r[i]=n.getAt(i);for(i=0;i<t.getLength();i+=1)r[i]^=l.gexp(l.glog(t.getAt(i))+e);return h(r,0).mod(t)}};return n}var u=function(){var t=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16],[4,101,81],[1,80,50,4,81,51],[4,50,22,4,51,23],[3,36,12,8,37,13],[2,116,92,2,117,93],[6,58,36,2,59,37],[4,46,20,6,47,21],[7,42,14,4,43,15],[4,133,107],[8,59,37,1,60,38],[8,44,20,4,45,21],[12,33,11,4,34,12],[3,145,115,1,146,116],[4,64,40,5,65,41],[11,36,16,5,37,17],[11,36,12,5,37,13],[5,109,87,1,110,88],[5,65,41,5,66,42],[5,54,24,7,55,25],[11,36,12,7,37,13],[5,122,98,1,123,99],[7,73,45,3,74,46],[15,43,19,2,44,20],[3,45,15,13,46,16],[1,135,107,5,136,108],[10,74,46,1,75,47],[1,50,22,15,51,23],[2,42,14,17,43,15],[5,150,120,1,151,121],[9,69,43,4,70,44],[17,50,22,1,51,23],[2,42,14,19,43,15],[3,141,113,4,142,114],[3,70,44,11,71,45],[17,47,21,4,48,22],[9,39,13,16,40,14],[3,135,107,5,136,108],[3,67,41,13,68,42],[15,54,24,5,55,25],[15,43,15,10,44,16],[4,144,116,4,145,117],[17,68,42],[17,50,22,6,51,23],[19,46,16,6,47,17],[2,139,111,7,140,112],[17,74,46],[7,54,24,16,55,25],[34,37,13],[4,151,121,5,152,122],[4,75,47,14,76,48],[11,54,24,14,55,25],[16,45,15,14,46,16],[6,147,117,4,148,118],[6,73,45,14,74,46],[11,54,24,16,55,25],[30,46,16,2,47,17],[8,132,106,4,133,107],[8,75,47,13,76,48],[7,54,24,22,55,25],[22,45,15,13,46,16],[10,142,114,2,143,115],[19,74,46,4,75,47],[28,50,22,6,51,23],[33,46,16,4,47,17],[8,152,122,4,153,123],[22,73,45,3,74,46],[8,53,23,26,54,24],[12,45,15,28,46,16],[3,147,117,10,148,118],[3,73,45,23,74,46],[4,54,24,31,55,25],[11,45,15,31,46,16],[7,146,116,7,147,117],[21,73,45,7,74,46],[1,53,23,37,54,24],[19,45,15,26,46,16],[5,145,115,10,146,116],[19,75,47,10,76,48],[15,54,24,25,55,25],[23,45,15,25,46,16],[13,145,115,3,146,116],[2,74,46,29,75,47],[42,54,24,1,55,25],[23,45,15,28,46,16],[17,145,115],[10,74,46,23,75,47],[10,54,24,35,55,25],[19,45,15,35,46,16],[17,145,115,1,146,116],[14,74,46,21,75,47],[29,54,24,19,55,25],[11,45,15,46,46,16],[13,145,115,6,146,116],[14,74,46,23,75,47],[44,54,24,7,55,25],[59,46,16,1,47,17],[12,151,121,7,152,122],[12,75,47,26,76,48],[39,54,24,14,55,25],[22,45,15,41,46,16],[6,151,121,14,152,122],[6,75,47,34,76,48],[46,54,24,10,55,25],[2,45,15,64,46,16],[17,152,122,4,153,123],[29,74,46,14,75,47],[49,54,24,10,55,25],[24,45,15,46,46,16],[4,152,122,18,153,123],[13,74,46,32,75,47],[48,54,24,14,55,25],[42,45,15,32,46,16],[20,147,117,4,148,118],[40,75,47,7,76,48],[43,54,24,22,55,25],[10,45,15,67,46,16],[19,148,118,6,149,119],[18,75,47,31,76,48],[34,54,24,34,55,25],[20,45,15,61,46,16]],e=function(t,e){var r={};return r.totalCount=t,r.dataCount=e,r},r={getRSBlocks:function(r,n){var i=function(e,r){switch(r){case s.L:return t[4*(e-1)+0];case s.M:return t[4*(e-1)+1];case s.Q:return t[4*(e-1)+2];case s.H:return t[4*(e-1)+3];default:return}}(r,n);if(void 0===i)throw"bad rs block @ typeNumber:"+r+"/errorCorrectionLevel:"+n;for(var a=i.length/3,o=[],l=0;l<a;l+=1)for(var h=i[3*l+0],u=i[3*l+1],c=i[3*l+2],p=0;p<h;p+=1)o.push(e(u,c));return o}};return r}(),c=function(){var t=[],e=0,r={getBuffer:function(){return t},getAt:function(e){var r=Math.floor(e/8);return 1==(t[r]>>>7-e%8&1)},put:function(t,e){for(var n=0;n<e;n+=1)r.putBit(1==(t>>>e-n-1&1))},getLengthInBits:function(){return e},putBit:function(r){var n=Math.floor(e/8);t.length<=n&&t.push(0),r&&(t[n]|=128>>>e%8),e+=1}};return r},p=function(t){var e=t,r={getMode:function(){return 1},getLength:function(t){return e.length},write:function(t){for(var r=e,i=0;i+2<r.length;)t.put(n(r.substring(i,i+3)),10),i+=3;i<r.length&&(r.length-i==1?t.put(n(r.substring(i,i+1)),4):r.length-i==2&&t.put(n(r.substring(i,i+2)),7))}},n=function(t){for(var e=0,r=0;r<t.length;r+=1)e=10*e+i(t.charAt(r));return e},i=function(t){if("0"<=t&&t<="9")return t.charCodeAt(0)-"0".charCodeAt(0);throw"illegal char :"+t};return r},f=function(t){var e=t,r={getMode:function(){return 2},getLength:function(t){return e.length},write:function(t){for(var r=e,i=0;i+1<r.length;)t.put(45*n(r.charAt(i))+n(r.charAt(i+1)),11),i+=2;i<r.length&&t.put(n(r.charAt(i)),6)}},n=function(t){if("0"<=t&&t<="9")return t.charCodeAt(0)-"0".charCodeAt(0);if("A"<=t&&t<="Z")return t.charCodeAt(0)-"A".charCodeAt(0)+10;switch(t){case" ":return 36;case"$":return 37;case"%":return 38;case"*":return 39;case"+":return 40;case"-":return 41;case".":return 42;case"/":return 43;case":":return 44;default:throw"illegal char :"+t}};return r},d=function(e){var r=t.stringToBytes(e);return{getMode:function(){return 4},getLength:function(t){return r.length},write:function(t){for(var e=0;e<r.length;e+=1)t.put(r[e],8)}}},m=function(e){var r=t.stringToBytesFuncs.SJIS;if(!r)throw"sjis not supported.";!function(t,e){var n=r("友");if(2!=n.length||38726!=(n[0]<<8|n[1]))throw"sjis not supported."}();var n=r(e),i={getMode:function(){return 8},getLength:function(t){return~~(n.length/2)},write:function(t){for(var e=n,r=0;r+1<e.length;){var i=(255&e[r])<<8|255&e[r+1];if(33088<=i&&i<=40956)i-=33088;else{if(!(57408<=i&&i<=60351))throw"illegal char at "+(r+1)+"/"+i;i-=49472}i=192*(i>>>8&255)+(255&i),t.put(i,13),r+=2}if(r<e.length)throw"illegal char at "+(r+1)}};return i},g=function(){var t=[],e={writeByte:function(e){t.push(255&e)},writeShort:function(t){e.writeByte(t),e.writeByte(t>>>8)},writeBytes:function(t,r,n){r=r||0,n=n||t.length;for(var i=0;i<n;i+=1)e.writeByte(t[i+r])},writeString:function(t){for(var r=0;r<t.length;r+=1)e.writeByte(t.charCodeAt(r))},toByteArray:function(){return t},toString:function(){var e="";e+="[";for(var r=0;r<t.length;r+=1)r>0&&(e+=","),e+=t[r];return e+"]"}};return e},y=function(t){var e=t,r=0,n=0,i=0,a={read:function(){for(;i<8;){if(r>=e.length){if(0==i)return-1;throw"unexpected end of file./"+i}var t=e.charAt(r);if(r+=1,"="==t)return i=0,-1;t.match(/^\s$/)||(n=n<<6|s(t.charCodeAt(0)),i+=6)}var a=n>>>i-8&255;return i-=8,a}},s=function(t){if(65<=t&&t<=90)return t-65;if(97<=t&&t<=122)return t-97+26;if(48<=t&&t<=57)return t-48+52;if(43==t)return 62;if(47==t)return 63;throw"c:"+t};return a},v=function(t,e,r){for(var n=function(t,e){var r=t,n=e,i=new Array(t*e),a={setPixel:function(t,e,n){i[e*r+t]=n},write:function(t){t.writeString("GIF87a"),t.writeShort(r),t.writeShort(n),t.writeByte(128),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(255),t.writeByte(255),t.writeByte(255),t.writeString(","),t.writeShort(0),t.writeShort(0),t.writeShort(r),t.writeShort(n),t.writeByte(0);var e=s(2);t.writeByte(2);for(var i=0;e.length-i>255;)t.writeByte(255),t.writeBytes(e,i,255),i+=255;t.writeByte(e.length-i),t.writeBytes(e,i,e.length-i),t.writeByte(0),t.writeString(";")}},s=function(t){for(var e=1<<t,r=1+(1<<t),n=t+1,a=o(),s=0;s<e;s+=1)a.add(String.fromCharCode(s));a.add(String.fromCharCode(e)),a.add(String.fromCharCode(r));var l,h,u,c=g(),p=(l=c,h=0,u=0,{write:function(t,e){if(t>>>e!=0)throw"length over";for(;h+e>=8;)l.writeByte(255&(t<<h|u)),e-=8-h,t>>>=8-h,u=0,h=0;u|=t<<h,h+=e},flush:function(){h>0&&l.writeByte(u)}});p.write(e,n);var f=0,d=String.fromCharCode(i[f]);for(f+=1;f<i.length;){var m=String.fromCharCode(i[f]);f+=1,a.contains(d+m)?d+=m:(p.write(a.indexOf(d),n),a.size()<4095&&(a.size()==1<<n&&(n+=1),a.add(d+m)),d=m)}return p.write(a.indexOf(d),n),p.write(r,n),p.flush(),c.toByteArray()},o=function(){var t={},e=0,r={add:function(n){if(r.contains(n))throw"dup key:"+n;t[n]=e,e+=1},size:function(){return e},indexOf:function(e){return t[e]},contains:function(e){return void 0!==t[e]}};return r};return a}(t,e),i=0;i<e;i+=1)for(var a=0;a<t;a+=1)n.setPixel(a,i,r(a,i));var s=g();n.write(s);for(var o=function(){var t=0,e=0,r=0,n="",i={},a=function(t){n+=String.fromCharCode(s(63&t))},s=function(t){if(t<0);else{if(t<26)return 65+t;if(t<52)return t-26+97;if(t<62)return t-52+48;if(62==t)return 43;if(63==t)return 47}throw"n:"+t};return i.writeByte=function(n){for(t=t<<8|255&n,e+=8,r+=1;e>=6;)a(t>>>e-6),e-=6},i.flush=function(){if(e>0&&(a(t<<6-e),t=0,e=0),r%3!=0)for(var i=3-r%3,s=0;s<i;s+=1)n+="="},i.toString=function(){return n},i}(),l=s.toByteArray(),h=0;h<l.length;h+=1)o.writeByte(l[h]);return o.flush(),"data:image/gif;base64,"+o};return t}();i.stringToBytesFuncs["UTF-8"]=function(t){return function(t){for(var e=[],r=0;r<t.length;r++){var n=t.charCodeAt(r);n<128?e.push(n):n<2048?e.push(192|n>>6,128|63&n):n<55296||n>=57344?e.push(224|n>>12,128|n>>6&63,128|63&n):(r++,n=65536+((1023&n)<<10|1023&t.charCodeAt(r)),e.push(240|n>>18,128|n>>12&63,128|n>>6&63,128|63&n))}return e}(t)},void 0===(n="function"==typeof(r=function(){return i})?r.apply(e,[]):r)||(t.exports=n)},7563:(t,e,r)=>{"use strict";const n=r(610),i=r(4020),a=r(500);function s(t){if("string"!=typeof t||1!==t.length)throw new TypeError("arrayFormatSeparator must be single character string")}function o(t,e){return e.encode?e.strict?n(t):encodeURIComponent(t):t}function l(t,e){return e.decode?i(t):t}function h(t){return Array.isArray(t)?t.sort():"object"==typeof t?h(Object.keys(t)).sort(((t,e)=>Number(t)-Number(e))).map((e=>t[e])):t}function u(t){const e=t.indexOf("#");return-1!==e&&(t=t.slice(0,e)),t}function c(t){const e=(t=u(t)).indexOf("?");return-1===e?"":t.slice(e+1)}function p(t,e){return e.parseNumbers&&!Number.isNaN(Number(t))&&"string"==typeof t&&""!==t.trim()?t=Number(t):!e.parseBooleans||null===t||"true"!==t.toLowerCase()&&"false"!==t.toLowerCase()||(t="true"===t.toLowerCase()),t}function f(t,e){s((e=Object.assign({decode:!0,sort:!0,arrayFormat:"none",arrayFormatSeparator:",",parseNumbers:!1,parseBooleans:!1},e)).arrayFormatSeparator);const r=function(t){let e;switch(t.arrayFormat){case"index":return(t,r,n)=>{e=/\[(\d*)\]$/.exec(t),t=t.replace(/\[\d*\]$/,""),e?(void 0===n[t]&&(n[t]={}),n[t][e[1]]=r):n[t]=r};case"bracket":return(t,r,n)=>{e=/(\[\])$/.exec(t),t=t.replace(/\[\]$/,""),e?void 0!==n[t]?n[t]=[].concat(n[t],r):n[t]=[r]:n[t]=r};case"comma":case"separator":return(e,r,n)=>{const i="string"==typeof r&&r.split("").indexOf(t.arrayFormatSeparator)>-1?r.split(t.arrayFormatSeparator).map((e=>l(e,t))):null===r?r:l(r,t);n[e]=i};default:return(t,e,r)=>{void 0!==r[t]?r[t]=[].concat(r[t],e):r[t]=e}}}(e),n=Object.create(null);if("string"!=typeof t)return n;if(!(t=t.trim().replace(/^[?#&]/,"")))return n;for(const i of t.split("&")){let[t,s]=a(e.decode?i.replace(/\+/g," "):i,"=");s=void 0===s?null:["comma","separator"].includes(e.arrayFormat)?s:l(s,e),r(l(t,e),s,n)}for(const t of Object.keys(n)){const r=n[t];if("object"==typeof r&&null!==r)for(const t of Object.keys(r))r[t]=p(r[t],e);else n[t]=p(r,e)}return!1===e.sort?n:(!0===e.sort?Object.keys(n).sort():Object.keys(n).sort(e.sort)).reduce(((t,e)=>{const r=n[e];return Boolean(r)&&"object"==typeof r&&!Array.isArray(r)?t[e]=h(r):t[e]=r,t}),Object.create(null))}e.extract=c,e.parse=f,e.stringify=(t,e)=>{if(!t)return"";s((e=Object.assign({encode:!0,strict:!0,arrayFormat:"none",arrayFormatSeparator:","},e)).arrayFormatSeparator);const r=r=>e.skipNull&&null==t[r]||e.skipEmptyString&&""===t[r],n=function(t){switch(t.arrayFormat){case"index":return e=>(r,n)=>{const i=r.length;return void 0===n||t.skipNull&&null===n||t.skipEmptyString&&""===n?r:null===n?[...r,[o(e,t),"[",i,"]"].join("")]:[...r,[o(e,t),"[",o(i,t),"]=",o(n,t)].join("")]};case"bracket":return e=>(r,n)=>void 0===n||t.skipNull&&null===n||t.skipEmptyString&&""===n?r:null===n?[...r,[o(e,t),"[]"].join("")]:[...r,[o(e,t),"[]=",o(n,t)].join("")];case"comma":case"separator":return e=>(r,n)=>null==n||0===n.length?r:0===r.length?[[o(e,t),"=",o(n,t)].join("")]:[[r,o(n,t)].join(t.arrayFormatSeparator)];default:return e=>(r,n)=>void 0===n||t.skipNull&&null===n||t.skipEmptyString&&""===n?r:null===n?[...r,o(e,t)]:[...r,[o(e,t),"=",o(n,t)].join("")]}}(e),i={};for(const e of Object.keys(t))r(e)||(i[e]=t[e]);const a=Object.keys(i);return!1!==e.sort&&a.sort(e.sort),a.map((r=>{const i=t[r];return void 0===i?"":null===i?o(r,e):Array.isArray(i)?i.reduce(n(r),[]).join("&"):o(r,e)+"="+o(i,e)})).filter((t=>t.length>0)).join("&")},e.parseUrl=(t,e)=>{e=Object.assign({decode:!0},e);const[r,n]=a(t,"#");return Object.assign({url:r.split("?")[0]||"",query:f(c(t),e)},e&&e.parseFragmentIdentifier&&n?{fragmentIdentifier:l(n,e)}:{})},e.stringifyUrl=(t,r)=>{r=Object.assign({encode:!0,strict:!0},r);const n=u(t.url).split("?")[0]||"",i=e.extract(t.url),a=e.parse(i,{sort:!1}),s=Object.assign(a,t.query);let l=e.stringify(s,r);l&&(l=`?${l}`);let h=function(t){let e="";const r=t.indexOf("#");return-1!==r&&(e=t.slice(r)),e}(t.url);return t.fragmentIdentifier&&(h=`#${o(t.fragmentIdentifier,r)}`),`${n}${l}${h}`}},3101:(t,e,r)=>{"use strict";var n=r(7294),i=r(3840);function a(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=1;r<arguments.length;r++)e+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var s=new Set,o={};function l(t,e){h(t,e),h(t+"Capture",e)}function h(t,e){for(o[t]=e,t=0;t<e.length;t++)s.add(e[t])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),c=Object.prototype.hasOwnProperty,p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f={},d={};function m(t,e,r,n,i,a,s){this.acceptsBooleans=2===e||3===e||4===e,this.attributeName=n,this.attributeNamespace=i,this.mustUseProperty=r,this.propertyName=t,this.type=e,this.sanitizeURL=a,this.removeEmptyString=s}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(t){g[t]=new m(t,0,!1,t,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(t){var e=t[0];g[e]=new m(e,1,!1,t[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(t){g[t]=new m(t,2,!1,t.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(t){g[t]=new m(t,2,!1,t,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(t){g[t]=new m(t,3,!1,t.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(t){g[t]=new m(t,3,!0,t,null,!1,!1)})),["capture","download"].forEach((function(t){g[t]=new m(t,4,!1,t,null,!1,!1)})),["cols","rows","size","span"].forEach((function(t){g[t]=new m(t,6,!1,t,null,!1,!1)})),["rowSpan","start"].forEach((function(t){g[t]=new m(t,5,!1,t.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function v(t){return t[1].toUpperCase()}function b(t,e,r,n){var i=g.hasOwnProperty(e)?g[e]:null;(null!==i?0!==i.type:n||!(2<e.length)||"o"!==e[0]&&"O"!==e[0]||"n"!==e[1]&&"N"!==e[1])&&(function(t,e,r,n){if(null==e||function(t,e,r,n){if(null!==r&&0===r.type)return!1;switch(typeof e){case"function":case"symbol":return!0;case"boolean":return!n&&(null!==r?!r.acceptsBooleans:"data-"!==(t=t.toLowerCase().slice(0,5))&&"aria-"!==t);default:return!1}}(t,e,r,n))return!0;if(n)return!1;if(null!==r)switch(r.type){case 3:return!e;case 4:return!1===e;case 5:return isNaN(e);case 6:return isNaN(e)||1>e}return!1}(e,r,i,n)&&(r=null),n||null===i?function(t){return!!c.call(d,t)||!c.call(f,t)&&(p.test(t)?d[t]=!0:(f[t]=!0,!1))}(e)&&(null===r?t.removeAttribute(e):t.setAttribute(e,""+r)):i.mustUseProperty?t[i.propertyName]=null===r?3!==i.type&&"":r:(e=i.attributeName,n=i.attributeNamespace,null===r?t.removeAttribute(e):(r=3===(i=i.type)||4===i&&!0===r?"":""+r,n?t.setAttributeNS(n,e,r):t.setAttribute(e,r))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(t){var e=t.replace(y,v);g[e]=new m(e,1,!1,t,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(t){var e=t.replace(y,v);g[e]=new m(e,1,!1,t,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(t){var e=t.replace(y,v);g[e]=new m(e,1,!1,t,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(t){g[t]=new m(t,1,!1,t.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(t){g[t]=new m(t,1,!1,t.toLowerCase(),null,!0,!0)}));var w=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=Symbol.for("react.element"),_=Symbol.for("react.portal"),k=Symbol.for("react.fragment"),S=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),C=Symbol.for("react.provider"),M=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),A=Symbol.for("react.suspense"),T=Symbol.for("react.suspense_list"),D=Symbol.for("react.memo"),I=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var F=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var R=Symbol.iterator;function B(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=R&&t[R]||t["@@iterator"])?t:null}var L,N=Object.assign;function O(t){if(void 0===L)try{throw Error()}catch(t){var e=t.stack.trim().match(/\n( *(at )?)/);L=e&&e[1]||""}return"\n"+L+t}var V=!1;function z(t,e){if(!t||V)return"";V=!0;var r=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(e)if(e=function(){throw Error()},Object.defineProperty(e.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(e,[])}catch(t){var n=t}Reflect.construct(t,[],e)}else{try{e.call()}catch(t){n=t}t.call(e.prototype)}else{try{throw Error()}catch(t){n=t}t()}}catch(e){if(e&&n&&"string"==typeof e.stack){for(var i=e.stack.split("\n"),a=n.stack.split("\n"),s=i.length-1,o=a.length-1;1<=s&&0<=o&&i[s]!==a[o];)o--;for(;1<=s&&0<=o;s--,o--)if(i[s]!==a[o]){if(1!==s||1!==o)do{if(s--,0>--o||i[s]!==a[o]){var l="\n"+i[s].replace(" at new "," at ");return t.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",t.displayName)),l}}while(1<=s&&0<=o);break}}}finally{V=!1,Error.prepareStackTrace=r}return(t=t?t.displayName||t.name:"")?O(t):""}function G(t){switch(t.tag){case 5:return O(t.type);case 16:return O("Lazy");case 13:return O("Suspense");case 19:return O("SuspenseList");case 0:case 2:case 15:return z(t.type,!1);case 11:return z(t.type.render,!1);case 1:return z(t.type,!0);default:return""}}function j(t){if(null==t)return null;if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t;switch(t){case k:return"Fragment";case _:return"Portal";case E:return"Profiler";case S:return"StrictMode";case A:return"Suspense";case T:return"SuspenseList"}if("object"==typeof t)switch(t.$$typeof){case M:return(t.displayName||"Context")+".Consumer";case C:return(t._context.displayName||"Context")+".Provider";case P:var e=t.render;return(t=t.displayName)||(t=""!==(t=e.displayName||e.name||"")?"ForwardRef("+t+")":"ForwardRef"),t;case D:return null!==(e=t.displayName||null)?e:j(t.type)||"Memo";case I:e=t._payload,t=t._init;try{return j(t(e))}catch(t){}}return null}function H(t){var e=t.type;switch(t.tag){case 24:return"Cache";case 9:return(e.displayName||"Context")+".Consumer";case 10:return(e._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return t=(t=e.render).displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case 7:return"Fragment";case 5:return e;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return j(e);case 8:return e===S?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e}return null}function q(t){switch(typeof t){case"boolean":case"number":case"string":case"undefined":case"object":return t;default:return""}}function W(t){var e=t.type;return(t=t.nodeName)&&"input"===t.toLowerCase()&&("checkbox"===e||"radio"===e)}function U(t){t._valueTracker||(t._valueTracker=function(t){var e=W(t)?"checked":"value",r=Object.getOwnPropertyDescriptor(t.constructor.prototype,e),n=""+t[e];if(!t.hasOwnProperty(e)&&void 0!==r&&"function"==typeof r.get&&"function"==typeof r.set){var i=r.get,a=r.set;return Object.defineProperty(t,e,{configurable:!0,get:function(){return i.call(this)},set:function(t){n=""+t,a.call(this,t)}}),Object.defineProperty(t,e,{enumerable:r.enumerable}),{getValue:function(){return n},setValue:function(t){n=""+t},stopTracking:function(){t._valueTracker=null,delete t[e]}}}}(t))}function $(t){if(!t)return!1;var e=t._valueTracker;if(!e)return!0;var r=e.getValue(),n="";return t&&(n=W(t)?t.checked?"true":"false":t.value),(t=n)!==r&&(e.setValue(t),!0)}function Z(t){if(void 0===(t=t||("undefined"!=typeof document?document:void 0)))return null;try{return t.activeElement||t.body}catch(e){return t.body}}function Q(t,e){var r=e.checked;return N({},e,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=r?r:t._wrapperState.initialChecked})}function Y(t,e){var r=null==e.defaultValue?"":e.defaultValue,n=null!=e.checked?e.checked:e.defaultChecked;r=q(null!=e.value?e.value:r),t._wrapperState={initialChecked:n,initialValue:r,controlled:"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}}function K(t,e){null!=(e=e.checked)&&b(t,"checked",e,!1)}function J(t,e){K(t,e);var r=q(e.value),n=e.type;if(null!=r)"number"===n?(0===r&&""===t.value||t.value!=r)&&(t.value=""+r):t.value!==""+r&&(t.value=""+r);else if("submit"===n||"reset"===n)return void t.removeAttribute("value");e.hasOwnProperty("value")?tt(t,e.type,r):e.hasOwnProperty("defaultValue")&&tt(t,e.type,q(e.defaultValue)),null==e.checked&&null!=e.defaultChecked&&(t.defaultChecked=!!e.defaultChecked)}function X(t,e,r){if(e.hasOwnProperty("value")||e.hasOwnProperty("defaultValue")){var n=e.type;if(!("submit"!==n&&"reset"!==n||void 0!==e.value&&null!==e.value))return;e=""+t._wrapperState.initialValue,r||e===t.value||(t.value=e),t.defaultValue=e}""!==(r=t.name)&&(t.name=""),t.defaultChecked=!!t._wrapperState.initialChecked,""!==r&&(t.name=r)}function tt(t,e,r){"number"===e&&Z(t.ownerDocument)===t||(null==r?t.defaultValue=""+t._wrapperState.initialValue:t.defaultValue!==""+r&&(t.defaultValue=""+r))}var et=Array.isArray;function rt(t,e,r,n){if(t=t.options,e){e={};for(var i=0;i<r.length;i++)e["$"+r[i]]=!0;for(r=0;r<t.length;r++)i=e.hasOwnProperty("$"+t[r].value),t[r].selected!==i&&(t[r].selected=i),i&&n&&(t[r].defaultSelected=!0)}else{for(r=""+q(r),e=null,i=0;i<t.length;i++){if(t[i].value===r)return t[i].selected=!0,void(n&&(t[i].defaultSelected=!0));null!==e||t[i].disabled||(e=t[i])}null!==e&&(e.selected=!0)}}function nt(t,e){if(null!=e.dangerouslySetInnerHTML)throw Error(a(91));return N({},e,{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue})}function it(t,e){var r=e.value;if(null==r){if(r=e.children,e=e.defaultValue,null!=r){if(null!=e)throw Error(a(92));if(et(r)){if(1<r.length)throw Error(a(93));r=r[0]}e=r}null==e&&(e=""),r=e}t._wrapperState={initialValue:q(r)}}function at(t,e){var r=q(e.value),n=q(e.defaultValue);null!=r&&((r=""+r)!==t.value&&(t.value=r),null==e.defaultValue&&t.defaultValue!==r&&(t.defaultValue=r)),null!=n&&(t.defaultValue=""+n)}function st(t){var e=t.textContent;e===t._wrapperState.initialValue&&""!==e&&null!==e&&(t.value=e)}function ot(t){switch(t){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function lt(t,e){return null==t||"http://www.w3.org/1999/xhtml"===t?ot(e):"http://www.w3.org/2000/svg"===t&&"foreignObject"===e?"http://www.w3.org/1999/xhtml":t}var ht,ut,ct=(ut=function(t,e){if("http://www.w3.org/2000/svg"!==t.namespaceURI||"innerHTML"in t)t.innerHTML=e;else{for((ht=ht||document.createElement("div")).innerHTML="<svg>"+e.valueOf().toString()+"</svg>",e=ht.firstChild;t.firstChild;)t.removeChild(t.firstChild);for(;e.firstChild;)t.appendChild(e.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,e,r,n){MSApp.execUnsafeLocalFunction((function(){return ut(t,e)}))}:ut);function pt(t,e){if(e){var r=t.firstChild;if(r&&r===t.lastChild&&3===r.nodeType)return void(r.nodeValue=e)}t.textContent=e}var ft={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},dt=["Webkit","ms","Moz","O"];function mt(t,e,r){return null==e||"boolean"==typeof e||""===e?"":r||"number"!=typeof e||0===e||ft.hasOwnProperty(t)&&ft[t]?(""+e).trim():e+"px"}function gt(t,e){for(var r in t=t.style,e)if(e.hasOwnProperty(r)){var n=0===r.indexOf("--"),i=mt(r,e[r],n);"float"===r&&(r="cssFloat"),n?t.setProperty(r,i):t[r]=i}}Object.keys(ft).forEach((function(t){dt.forEach((function(e){e=e+t.charAt(0).toUpperCase()+t.substring(1),ft[e]=ft[t]}))}));var yt=N({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function vt(t,e){if(e){if(yt[t]&&(null!=e.children||null!=e.dangerouslySetInnerHTML))throw Error(a(137,t));if(null!=e.dangerouslySetInnerHTML){if(null!=e.children)throw Error(a(60));if("object"!=typeof e.dangerouslySetInnerHTML||!("__html"in e.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=e.style&&"object"!=typeof e.style)throw Error(a(62))}}function bt(t,e){if(-1===t.indexOf("-"))return"string"==typeof e.is;switch(t){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var wt=null;function xt(t){return(t=t.target||t.srcElement||window).correspondingUseElement&&(t=t.correspondingUseElement),3===t.nodeType?t.parentNode:t}var _t=null,kt=null,St=null;function Et(t){if(t=bi(t)){if("function"!=typeof _t)throw Error(a(280));var e=t.stateNode;e&&(e=xi(e),_t(t.stateNode,t.type,e))}}function Ct(t){kt?St?St.push(t):St=[t]:kt=t}function Mt(){if(kt){var t=kt,e=St;if(St=kt=null,Et(t),e)for(t=0;t<e.length;t++)Et(e[t])}}function Pt(t,e){return t(e)}function At(){}var Tt=!1;function Dt(t,e,r){if(Tt)return t(e,r);Tt=!0;try{return Pt(t,e,r)}finally{Tt=!1,(null!==kt||null!==St)&&(At(),Mt())}}function It(t,e){var r=t.stateNode;if(null===r)return null;var n=xi(r);if(null===n)return null;r=n[e];t:switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(n=!n.disabled)||(n=!("button"===(t=t.type)||"input"===t||"select"===t||"textarea"===t)),t=!n;break t;default:t=!1}if(t)return null;if(r&&"function"!=typeof r)throw Error(a(231,e,typeof r));return r}var Ft=!1;if(u)try{var Rt={};Object.defineProperty(Rt,"passive",{get:function(){Ft=!0}}),window.addEventListener("test",Rt,Rt),window.removeEventListener("test",Rt,Rt)}catch(ut){Ft=!1}function Bt(t,e,r,n,i,a,s,o,l){var h=Array.prototype.slice.call(arguments,3);try{e.apply(r,h)}catch(t){this.onError(t)}}var Lt=!1,Nt=null,Ot=!1,Vt=null,zt={onError:function(t){Lt=!0,Nt=t}};function Gt(t,e,r,n,i,a,s,o,l){Lt=!1,Nt=null,Bt.apply(zt,arguments)}function jt(t){var e=t,r=t;if(t.alternate)for(;e.return;)e=e.return;else{t=e;do{0!=(4098&(e=t).flags)&&(r=e.return),t=e.return}while(t)}return 3===e.tag?r:null}function Ht(t){if(13===t.tag){var e=t.memoizedState;if(null===e&&null!==(t=t.alternate)&&(e=t.memoizedState),null!==e)return e.dehydrated}return null}function qt(t){if(jt(t)!==t)throw Error(a(188))}function Wt(t){return null!==(t=function(t){var e=t.alternate;if(!e){if(null===(e=jt(t)))throw Error(a(188));return e!==t?null:t}for(var r=t,n=e;;){var i=r.return;if(null===i)break;var s=i.alternate;if(null===s){if(null!==(n=i.return)){r=n;continue}break}if(i.child===s.child){for(s=i.child;s;){if(s===r)return qt(i),t;if(s===n)return qt(i),e;s=s.sibling}throw Error(a(188))}if(r.return!==n.return)r=i,n=s;else{for(var o=!1,l=i.child;l;){if(l===r){o=!0,r=i,n=s;break}if(l===n){o=!0,n=i,r=s;break}l=l.sibling}if(!o){for(l=s.child;l;){if(l===r){o=!0,r=s,n=i;break}if(l===n){o=!0,n=s,r=i;break}l=l.sibling}if(!o)throw Error(a(189))}}if(r.alternate!==n)throw Error(a(190))}if(3!==r.tag)throw Error(a(188));return r.stateNode.current===r?t:e}(t))?Ut(t):null}function Ut(t){if(5===t.tag||6===t.tag)return t;for(t=t.child;null!==t;){var e=Ut(t);if(null!==e)return e;t=t.sibling}return null}var $t=i.unstable_scheduleCallback,Zt=i.unstable_cancelCallback,Qt=i.unstable_shouldYield,Yt=i.unstable_requestPaint,Kt=i.unstable_now,Jt=i.unstable_getCurrentPriorityLevel,Xt=i.unstable_ImmediatePriority,te=i.unstable_UserBlockingPriority,ee=i.unstable_NormalPriority,re=i.unstable_LowPriority,ne=i.unstable_IdlePriority,ie=null,ae=null,se=Math.clz32?Math.clz32:function(t){return 0==(t>>>=0)?32:31-(oe(t)/le|0)|0},oe=Math.log,le=Math.LN2,he=64,ue=4194304;function ce(t){switch(t&-t){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&t;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&t;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return t}}function pe(t,e){var r=t.pendingLanes;if(0===r)return 0;var n=0,i=t.suspendedLanes,a=t.pingedLanes,s=268435455&r;if(0!==s){var o=s&~i;0!==o?n=ce(o):0!=(a&=s)&&(n=ce(a))}else 0!=(s=r&~i)?n=ce(s):0!==a&&(n=ce(a));if(0===n)return 0;if(0!==e&&e!==n&&0==(e&i)&&((i=n&-n)>=(a=e&-e)||16===i&&0!=(4194240&a)))return e;if(0!=(4&n)&&(n|=16&r),0!==(e=t.entangledLanes))for(t=t.entanglements,e&=n;0<e;)i=1<<(r=31-se(e)),n|=t[r],e&=~i;return n}function fe(t,e){switch(t){case 1:case 2:case 4:return e+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e+5e3;default:return-1}}function de(t){return 0!=(t=-1073741825&t.pendingLanes)?t:1073741824&t?1073741824:0}function me(){var t=he;return 0==(4194240&(he<<=1))&&(he=64),t}function ge(t){for(var e=[],r=0;31>r;r++)e.push(t);return e}function ye(t,e,r){t.pendingLanes|=e,536870912!==e&&(t.suspendedLanes=0,t.pingedLanes=0),(t=t.eventTimes)[e=31-se(e)]=r}function ve(t,e){var r=t.entangledLanes|=e;for(t=t.entanglements;r;){var n=31-se(r),i=1<<n;i&e|t[n]&e&&(t[n]|=e),r&=~i}}var be=0;function we(t){return 1<(t&=-t)?4<t?0!=(268435455&t)?16:536870912:4:1}var xe,_e,ke,Se,Ee,Ce=!1,Me=[],Pe=null,Ae=null,Te=null,De=new Map,Ie=new Map,Fe=[],Re="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Be(t,e){switch(t){case"focusin":case"focusout":Pe=null;break;case"dragenter":case"dragleave":Ae=null;break;case"mouseover":case"mouseout":Te=null;break;case"pointerover":case"pointerout":De.delete(e.pointerId);break;case"gotpointercapture":case"lostpointercapture":Ie.delete(e.pointerId)}}function Le(t,e,r,n,i,a){return null===t||t.nativeEvent!==a?(t={blockedOn:e,domEventName:r,eventSystemFlags:n,nativeEvent:a,targetContainers:[i]},null!==e&&null!==(e=bi(e))&&_e(e),t):(t.eventSystemFlags|=n,e=t.targetContainers,null!==i&&-1===e.indexOf(i)&&e.push(i),t)}function Ne(t){var e=vi(t.target);if(null!==e){var r=jt(e);if(null!==r)if(13===(e=r.tag)){if(null!==(e=Ht(r)))return t.blockedOn=e,void Ee(t.priority,(function(){ke(r)}))}else if(3===e&&r.stateNode.current.memoizedState.isDehydrated)return void(t.blockedOn=3===r.tag?r.stateNode.containerInfo:null)}t.blockedOn=null}function Oe(t){if(null!==t.blockedOn)return!1;for(var e=t.targetContainers;0<e.length;){var r=Qe(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(null!==r)return null!==(e=bi(r))&&_e(e),t.blockedOn=r,!1;var n=new(r=t.nativeEvent).constructor(r.type,r);wt=n,r.target.dispatchEvent(n),wt=null,e.shift()}return!0}function Ve(t,e,r){Oe(t)&&r.delete(e)}function ze(){Ce=!1,null!==Pe&&Oe(Pe)&&(Pe=null),null!==Ae&&Oe(Ae)&&(Ae=null),null!==Te&&Oe(Te)&&(Te=null),De.forEach(Ve),Ie.forEach(Ve)}function Ge(t,e){t.blockedOn===e&&(t.blockedOn=null,Ce||(Ce=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,ze)))}function je(t){function e(e){return Ge(e,t)}if(0<Me.length){Ge(Me[0],t);for(var r=1;r<Me.length;r++){var n=Me[r];n.blockedOn===t&&(n.blockedOn=null)}}for(null!==Pe&&Ge(Pe,t),null!==Ae&&Ge(Ae,t),null!==Te&&Ge(Te,t),De.forEach(e),Ie.forEach(e),r=0;r<Fe.length;r++)(n=Fe[r]).blockedOn===t&&(n.blockedOn=null);for(;0<Fe.length&&null===(r=Fe[0]).blockedOn;)Ne(r),null===r.blockedOn&&Fe.shift()}var He=w.ReactCurrentBatchConfig,qe=!0;function We(t,e,r,n){var i=be,a=He.transition;He.transition=null;try{be=1,$e(t,e,r,n)}finally{be=i,He.transition=a}}function Ue(t,e,r,n){var i=be,a=He.transition;He.transition=null;try{be=4,$e(t,e,r,n)}finally{be=i,He.transition=a}}function $e(t,e,r,n){if(qe){var i=Qe(t,e,r,n);if(null===i)qn(t,e,n,Ze,r),Be(t,n);else if(function(t,e,r,n,i){switch(e){case"focusin":return Pe=Le(Pe,t,e,r,n,i),!0;case"dragenter":return Ae=Le(Ae,t,e,r,n,i),!0;case"mouseover":return Te=Le(Te,t,e,r,n,i),!0;case"pointerover":var a=i.pointerId;return De.set(a,Le(De.get(a)||null,t,e,r,n,i)),!0;case"gotpointercapture":return a=i.pointerId,Ie.set(a,Le(Ie.get(a)||null,t,e,r,n,i)),!0}return!1}(i,t,e,r,n))n.stopPropagation();else if(Be(t,n),4&e&&-1<Re.indexOf(t)){for(;null!==i;){var a=bi(i);if(null!==a&&xe(a),null===(a=Qe(t,e,r,n))&&qn(t,e,n,Ze,r),a===i)break;i=a}null!==i&&n.stopPropagation()}else qn(t,e,n,null,r)}}var Ze=null;function Qe(t,e,r,n){if(Ze=null,null!==(t=vi(t=xt(n))))if(null===(e=jt(t)))t=null;else if(13===(r=e.tag)){if(null!==(t=Ht(e)))return t;t=null}else if(3===r){if(e.stateNode.current.memoizedState.isDehydrated)return 3===e.tag?e.stateNode.containerInfo:null;t=null}else e!==t&&(t=null);return Ze=t,null}function Ye(t){switch(t){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Jt()){case Xt:return 1;case te:return 4;case ee:case re:return 16;case ne:return 536870912;default:return 16}default:return 16}}var Ke=null,Je=null,Xe=null;function tr(){if(Xe)return Xe;var t,e,r=Je,n=r.length,i="value"in Ke?Ke.value:Ke.textContent,a=i.length;for(t=0;t<n&&r[t]===i[t];t++);var s=n-t;for(e=1;e<=s&&r[n-e]===i[a-e];e++);return Xe=i.slice(t,1<e?1-e:void 0)}function er(t){var e=t.keyCode;return"charCode"in t?0===(t=t.charCode)&&13===e&&(t=13):t=e,10===t&&(t=13),32<=t||13===t?t:0}function rr(){return!0}function nr(){return!1}function ir(t){function e(e,r,n,i,a){for(var s in this._reactName=e,this._targetInst=n,this.type=r,this.nativeEvent=i,this.target=a,this.currentTarget=null,t)t.hasOwnProperty(s)&&(e=t[s],this[s]=e?e(i):i[s]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?rr:nr,this.isPropagationStopped=nr,this}return N(e.prototype,{preventDefault:function(){this.defaultPrevented=!0;var t=this.nativeEvent;t&&(t.preventDefault?t.preventDefault():"unknown"!=typeof t.returnValue&&(t.returnValue=!1),this.isDefaultPrevented=rr)},stopPropagation:function(){var t=this.nativeEvent;t&&(t.stopPropagation?t.stopPropagation():"unknown"!=typeof t.cancelBubble&&(t.cancelBubble=!0),this.isPropagationStopped=rr)},persist:function(){},isPersistent:rr}),e}var ar,sr,or,lr={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},hr=ir(lr),ur=N({},lr,{view:0,detail:0}),cr=ir(ur),pr=N({},ur,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Sr,button:0,buttons:0,relatedTarget:function(t){return void 0===t.relatedTarget?t.fromElement===t.srcElement?t.toElement:t.fromElement:t.relatedTarget},movementX:function(t){return"movementX"in t?t.movementX:(t!==or&&(or&&"mousemove"===t.type?(ar=t.screenX-or.screenX,sr=t.screenY-or.screenY):sr=ar=0,or=t),ar)},movementY:function(t){return"movementY"in t?t.movementY:sr}}),fr=ir(pr),dr=ir(N({},pr,{dataTransfer:0})),mr=ir(N({},ur,{relatedTarget:0})),gr=ir(N({},lr,{animationName:0,elapsedTime:0,pseudoElement:0})),yr=N({},lr,{clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}}),vr=ir(yr),br=ir(N({},lr,{data:0})),wr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},_r={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kr(t){var e=this.nativeEvent;return e.getModifierState?e.getModifierState(t):!!(t=_r[t])&&!!e[t]}function Sr(){return kr}var Er=N({},ur,{key:function(t){if(t.key){var e=wr[t.key]||t.key;if("Unidentified"!==e)return e}return"keypress"===t.type?13===(t=er(t))?"Enter":String.fromCharCode(t):"keydown"===t.type||"keyup"===t.type?xr[t.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Sr,charCode:function(t){return"keypress"===t.type?er(t):0},keyCode:function(t){return"keydown"===t.type||"keyup"===t.type?t.keyCode:0},which:function(t){return"keypress"===t.type?er(t):"keydown"===t.type||"keyup"===t.type?t.keyCode:0}}),Cr=ir(Er),Mr=ir(N({},pr,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pr=ir(N({},ur,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Sr})),Ar=ir(N({},lr,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tr=N({},pr,{deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:0,deltaMode:0}),Dr=ir(Tr),Ir=[9,13,27,32],Fr=u&&"CompositionEvent"in window,Rr=null;u&&"documentMode"in document&&(Rr=document.documentMode);var Br=u&&"TextEvent"in window&&!Rr,Lr=u&&(!Fr||Rr&&8<Rr&&11>=Rr),Nr=String.fromCharCode(32),Or=!1;function Vr(t,e){switch(t){case"keyup":return-1!==Ir.indexOf(e.keyCode);case"keydown":return 229!==e.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function zr(t){return"object"==typeof(t=t.detail)&&"data"in t?t.data:null}var Gr=!1,jr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Hr(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return"input"===e?!!jr[t.type]:"textarea"===e}function qr(t,e,r,n){Ct(n),0<(e=Un(e,"onChange")).length&&(r=new hr("onChange","change",null,r,n),t.push({event:r,listeners:e}))}var Wr=null,Ur=null;function $r(t){On(t,0)}function Zr(t){if($(wi(t)))return t}function Qr(t,e){if("change"===t)return e}var Yr=!1;if(u){var Kr;if(u){var Jr="oninput"in document;if(!Jr){var Xr=document.createElement("div");Xr.setAttribute("oninput","return;"),Jr="function"==typeof Xr.oninput}Kr=Jr}else Kr=!1;Yr=Kr&&(!document.documentMode||9<document.documentMode)}function tn(){Wr&&(Wr.detachEvent("onpropertychange",en),Ur=Wr=null)}function en(t){if("value"===t.propertyName&&Zr(Ur)){var e=[];qr(e,Ur,t,xt(t)),Dt($r,e)}}function rn(t,e,r){"focusin"===t?(tn(),Ur=r,(Wr=e).attachEvent("onpropertychange",en)):"focusout"===t&&tn()}function nn(t){if("selectionchange"===t||"keyup"===t||"keydown"===t)return Zr(Ur)}function an(t,e){if("click"===t)return Zr(e)}function sn(t,e){if("input"===t||"change"===t)return Zr(e)}var on="function"==typeof Object.is?Object.is:function(t,e){return t===e&&(0!==t||1/t==1/e)||t!=t&&e!=e};function ln(t,e){if(on(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var r=Object.keys(t),n=Object.keys(e);if(r.length!==n.length)return!1;for(n=0;n<r.length;n++){var i=r[n];if(!c.call(e,i)||!on(t[i],e[i]))return!1}return!0}function hn(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function un(t,e){var r,n=hn(t);for(t=0;n;){if(3===n.nodeType){if(r=t+n.textContent.length,t<=e&&r>=e)return{node:n,offset:e-t};t=r}t:{for(;n;){if(n.nextSibling){n=n.nextSibling;break t}n=n.parentNode}n=void 0}n=hn(n)}}function cn(t,e){return!(!t||!e)&&(t===e||(!t||3!==t.nodeType)&&(e&&3===e.nodeType?cn(t,e.parentNode):"contains"in t?t.contains(e):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(e))))}function pn(){for(var t=window,e=Z();e instanceof t.HTMLIFrameElement;){try{var r="string"==typeof e.contentWindow.location.href}catch(t){r=!1}if(!r)break;e=Z((t=e.contentWindow).document)}return e}function fn(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&("input"===e&&("text"===t.type||"search"===t.type||"tel"===t.type||"url"===t.type||"password"===t.type)||"textarea"===e||"true"===t.contentEditable)}function dn(t){var e=pn(),r=t.focusedElem,n=t.selectionRange;if(e!==r&&r&&r.ownerDocument&&cn(r.ownerDocument.documentElement,r)){if(null!==n&&fn(r))if(e=n.start,void 0===(t=n.end)&&(t=e),"selectionStart"in r)r.selectionStart=e,r.selectionEnd=Math.min(t,r.value.length);else if((t=(e=r.ownerDocument||document)&&e.defaultView||window).getSelection){t=t.getSelection();var i=r.textContent.length,a=Math.min(n.start,i);n=void 0===n.end?a:Math.min(n.end,i),!t.extend&&a>n&&(i=n,n=a,a=i),i=un(r,a);var s=un(r,n);i&&s&&(1!==t.rangeCount||t.anchorNode!==i.node||t.anchorOffset!==i.offset||t.focusNode!==s.node||t.focusOffset!==s.offset)&&((e=e.createRange()).setStart(i.node,i.offset),t.removeAllRanges(),a>n?(t.addRange(e),t.extend(s.node,s.offset)):(e.setEnd(s.node,s.offset),t.addRange(e)))}for(e=[],t=r;t=t.parentNode;)1===t.nodeType&&e.push({element:t,left:t.scrollLeft,top:t.scrollTop});for("function"==typeof r.focus&&r.focus(),r=0;r<e.length;r++)(t=e[r]).element.scrollLeft=t.left,t.element.scrollTop=t.top}}var mn=u&&"documentMode"in document&&11>=document.documentMode,gn=null,yn=null,vn=null,bn=!1;function wn(t,e,r){var n=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;bn||null==gn||gn!==Z(n)||(n="selectionStart"in(n=gn)&&fn(n)?{start:n.selectionStart,end:n.selectionEnd}:{anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},vn&&ln(vn,n)||(vn=n,0<(n=Un(yn,"onSelect")).length&&(e=new hr("onSelect","select",null,e,r),t.push({event:e,listeners:n}),e.target=gn)))}function xn(t,e){var r={};return r[t.toLowerCase()]=e.toLowerCase(),r["Webkit"+t]="webkit"+e,r["Moz"+t]="moz"+e,r}var _n={animationend:xn("Animation","AnimationEnd"),animationiteration:xn("Animation","AnimationIteration"),animationstart:xn("Animation","AnimationStart"),transitionend:xn("Transition","TransitionEnd")},kn={},Sn={};function En(t){if(kn[t])return kn[t];if(!_n[t])return t;var e,r=_n[t];for(e in r)if(r.hasOwnProperty(e)&&e in Sn)return kn[t]=r[e];return t}u&&(Sn=document.createElement("div").style,"AnimationEvent"in window||(delete _n.animationend.animation,delete _n.animationiteration.animation,delete _n.animationstart.animation),"TransitionEvent"in window||delete _n.transitionend.transition);var Cn=En("animationend"),Mn=En("animationiteration"),Pn=En("animationstart"),An=En("transitionend"),Tn=new Map,Dn="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function In(t,e){Tn.set(t,e),l(e,[t])}for(var Fn=0;Fn<Dn.length;Fn++){var Rn=Dn[Fn];In(Rn.toLowerCase(),"on"+(Rn[0].toUpperCase()+Rn.slice(1)))}In(Cn,"onAnimationEnd"),In(Mn,"onAnimationIteration"),In(Pn,"onAnimationStart"),In("dblclick","onDoubleClick"),In("focusin","onFocus"),In("focusout","onBlur"),In(An,"onTransitionEnd"),h("onMouseEnter",["mouseout","mouseover"]),h("onMouseLeave",["mouseout","mouseover"]),h("onPointerEnter",["pointerout","pointerover"]),h("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Bn="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ln=new Set("cancel close invalid load scroll toggle".split(" ").concat(Bn));function Nn(t,e,r){var n=t.type||"unknown-event";t.currentTarget=r,function(t,e,r,n,i,s,o,l,h){if(Gt.apply(this,arguments),Lt){if(!Lt)throw Error(a(198));var u=Nt;Lt=!1,Nt=null,Ot||(Ot=!0,Vt=u)}}(n,e,void 0,t),t.currentTarget=null}function On(t,e){e=0!=(4&e);for(var r=0;r<t.length;r++){var n=t[r],i=n.event;n=n.listeners;t:{var a=void 0;if(e)for(var s=n.length-1;0<=s;s--){var o=n[s],l=o.instance,h=o.currentTarget;if(o=o.listener,l!==a&&i.isPropagationStopped())break t;Nn(i,o,h),a=l}else for(s=0;s<n.length;s++){if(l=(o=n[s]).instance,h=o.currentTarget,o=o.listener,l!==a&&i.isPropagationStopped())break t;Nn(i,o,h),a=l}}}if(Ot)throw t=Vt,Ot=!1,Vt=null,t}function Vn(t,e){var r=e[mi];void 0===r&&(r=e[mi]=new Set);var n=t+"__bubble";r.has(n)||(Hn(e,t,2,!1),r.add(n))}function zn(t,e,r){var n=0;e&&(n|=4),Hn(r,t,n,e)}var Gn="_reactListening"+Math.random().toString(36).slice(2);function jn(t){if(!t[Gn]){t[Gn]=!0,s.forEach((function(e){"selectionchange"!==e&&(Ln.has(e)||zn(e,!1,t),zn(e,!0,t))}));var e=9===t.nodeType?t:t.ownerDocument;null===e||e[Gn]||(e[Gn]=!0,zn("selectionchange",!1,e))}}function Hn(t,e,r,n){switch(Ye(e)){case 1:var i=We;break;case 4:i=Ue;break;default:i=$e}r=i.bind(null,e,r,t),i=void 0,!Ft||"touchstart"!==e&&"touchmove"!==e&&"wheel"!==e||(i=!0),n?void 0!==i?t.addEventListener(e,r,{capture:!0,passive:i}):t.addEventListener(e,r,!0):void 0!==i?t.addEventListener(e,r,{passive:i}):t.addEventListener(e,r,!1)}function qn(t,e,r,n,i){var a=n;if(0==(1&e)&&0==(2&e)&&null!==n)t:for(;;){if(null===n)return;var s=n.tag;if(3===s||4===s){var o=n.stateNode.containerInfo;if(o===i||8===o.nodeType&&o.parentNode===i)break;if(4===s)for(s=n.return;null!==s;){var l=s.tag;if((3===l||4===l)&&((l=s.stateNode.containerInfo)===i||8===l.nodeType&&l.parentNode===i))return;s=s.return}for(;null!==o;){if(null===(s=vi(o)))return;if(5===(l=s.tag)||6===l){n=a=s;continue t}o=o.parentNode}}n=n.return}Dt((function(){var n=a,i=xt(r),s=[];t:{var o=Tn.get(t);if(void 0!==o){var l=hr,h=t;switch(t){case"keypress":if(0===er(r))break t;case"keydown":case"keyup":l=Cr;break;case"focusin":h="focus",l=mr;break;case"focusout":h="blur",l=mr;break;case"beforeblur":case"afterblur":l=mr;break;case"click":if(2===r.button)break t;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=fr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=dr;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Pr;break;case Cn:case Mn:case Pn:l=gr;break;case An:l=Ar;break;case"scroll":l=cr;break;case"wheel":l=Dr;break;case"copy":case"cut":case"paste":l=vr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Mr}var u=0!=(4&e),c=!u&&"scroll"===t,p=u?null!==o?o+"Capture":null:o;u=[];for(var f,d=n;null!==d;){var m=(f=d).stateNode;if(5===f.tag&&null!==m&&(f=m,null!==p&&null!=(m=It(d,p))&&u.push(Wn(d,m,f))),c)break;d=d.return}0<u.length&&(o=new l(o,h,null,r,i),s.push({event:o,listeners:u}))}}if(0==(7&e)){if(l="mouseout"===t||"pointerout"===t,(!(o="mouseover"===t||"pointerover"===t)||r===wt||!(h=r.relatedTarget||r.fromElement)||!vi(h)&&!h[di])&&(l||o)&&(o=i.window===i?i:(o=i.ownerDocument)?o.defaultView||o.parentWindow:window,l?(l=n,null!==(h=(h=r.relatedTarget||r.toElement)?vi(h):null)&&(h!==(c=jt(h))||5!==h.tag&&6!==h.tag)&&(h=null)):(l=null,h=n),l!==h)){if(u=fr,m="onMouseLeave",p="onMouseEnter",d="mouse","pointerout"!==t&&"pointerover"!==t||(u=Mr,m="onPointerLeave",p="onPointerEnter",d="pointer"),c=null==l?o:wi(l),f=null==h?o:wi(h),(o=new u(m,d+"leave",l,r,i)).target=c,o.relatedTarget=f,m=null,vi(i)===n&&((u=new u(p,d+"enter",h,r,i)).target=f,u.relatedTarget=c,m=u),c=m,l&&h)t:{for(p=h,d=0,f=u=l;f;f=$n(f))d++;for(f=0,m=p;m;m=$n(m))f++;for(;0<d-f;)u=$n(u),d--;for(;0<f-d;)p=$n(p),f--;for(;d--;){if(u===p||null!==p&&u===p.alternate)break t;u=$n(u),p=$n(p)}u=null}else u=null;null!==l&&Zn(s,o,l,u,!1),null!==h&&null!==c&&Zn(s,c,h,u,!0)}if("select"===(l=(o=n?wi(n):window).nodeName&&o.nodeName.toLowerCase())||"input"===l&&"file"===o.type)var g=Qr;else if(Hr(o))if(Yr)g=sn;else{g=nn;var y=rn}else(l=o.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(g=an);switch(g&&(g=g(t,n))?qr(s,g,r,i):(y&&y(t,o,n),"focusout"===t&&(y=o._wrapperState)&&y.controlled&&"number"===o.type&&tt(o,"number",o.value)),y=n?wi(n):window,t){case"focusin":(Hr(y)||"true"===y.contentEditable)&&(gn=y,yn=n,vn=null);break;case"focusout":vn=yn=gn=null;break;case"mousedown":bn=!0;break;case"contextmenu":case"mouseup":case"dragend":bn=!1,wn(s,r,i);break;case"selectionchange":if(mn)break;case"keydown":case"keyup":wn(s,r,i)}var v;if(Fr)t:{switch(t){case"compositionstart":var b="onCompositionStart";break t;case"compositionend":b="onCompositionEnd";break t;case"compositionupdate":b="onCompositionUpdate";break t}b=void 0}else Gr?Vr(t,r)&&(b="onCompositionEnd"):"keydown"===t&&229===r.keyCode&&(b="onCompositionStart");b&&(Lr&&"ko"!==r.locale&&(Gr||"onCompositionStart"!==b?"onCompositionEnd"===b&&Gr&&(v=tr()):(Je="value"in(Ke=i)?Ke.value:Ke.textContent,Gr=!0)),0<(y=Un(n,b)).length&&(b=new br(b,t,null,r,i),s.push({event:b,listeners:y}),(v||null!==(v=zr(r)))&&(b.data=v))),(v=Br?function(t,e){switch(t){case"compositionend":return zr(e);case"keypress":return 32!==e.which?null:(Or=!0,Nr);case"textInput":return(t=e.data)===Nr&&Or?null:t;default:return null}}(t,r):function(t,e){if(Gr)return"compositionend"===t||!Fr&&Vr(t,e)?(t=tr(),Xe=Je=Ke=null,Gr=!1,t):null;switch(t){case"paste":default:return null;case"keypress":if(!(e.ctrlKey||e.altKey||e.metaKey)||e.ctrlKey&&e.altKey){if(e.char&&1<e.char.length)return e.char;if(e.which)return String.fromCharCode(e.which)}return null;case"compositionend":return Lr&&"ko"!==e.locale?null:e.data}}(t,r))&&0<(n=Un(n,"onBeforeInput")).length&&(i=new br("onBeforeInput","beforeinput",null,r,i),s.push({event:i,listeners:n}),i.data=v)}On(s,e)}))}function Wn(t,e,r){return{instance:t,listener:e,currentTarget:r}}function Un(t,e){for(var r=e+"Capture",n=[];null!==t;){var i=t,a=i.stateNode;5===i.tag&&null!==a&&(i=a,null!=(a=It(t,r))&&n.unshift(Wn(t,a,i)),null!=(a=It(t,e))&&n.push(Wn(t,a,i))),t=t.return}return n}function $n(t){if(null===t)return null;do{t=t.return}while(t&&5!==t.tag);return t||null}function Zn(t,e,r,n,i){for(var a=e._reactName,s=[];null!==r&&r!==n;){var o=r,l=o.alternate,h=o.stateNode;if(null!==l&&l===n)break;5===o.tag&&null!==h&&(o=h,i?null!=(l=It(r,a))&&s.unshift(Wn(r,l,o)):i||null!=(l=It(r,a))&&s.push(Wn(r,l,o))),r=r.return}0!==s.length&&t.push({event:e,listeners:s})}var Qn=/\r\n?/g,Yn=/\u0000|\uFFFD/g;function Kn(t){return("string"==typeof t?t:""+t).replace(Qn,"\n").replace(Yn,"")}function Jn(t,e,r){if(e=Kn(e),Kn(t)!==e&&r)throw Error(a(425))}function Xn(){}var ti=null,ei=null;function ri(t,e){return"textarea"===t||"noscript"===t||"string"==typeof e.children||"number"==typeof e.children||"object"==typeof e.dangerouslySetInnerHTML&&null!==e.dangerouslySetInnerHTML&&null!=e.dangerouslySetInnerHTML.__html}var ni="function"==typeof setTimeout?setTimeout:void 0,ii="function"==typeof clearTimeout?clearTimeout:void 0,ai="function"==typeof Promise?Promise:void 0,si="function"==typeof queueMicrotask?queueMicrotask:void 0!==ai?function(t){return ai.resolve(null).then(t).catch(oi)}:ni;function oi(t){setTimeout((function(){throw t}))}function li(t,e){var r=e,n=0;do{var i=r.nextSibling;if(t.removeChild(r),i&&8===i.nodeType)if("/$"===(r=i.data)){if(0===n)return t.removeChild(i),void je(e);n--}else"$"!==r&&"$?"!==r&&"$!"!==r||n++;r=i}while(r);je(e)}function hi(t){for(;null!=t;t=t.nextSibling){var e=t.nodeType;if(1===e||3===e)break;if(8===e){if("$"===(e=t.data)||"$!"===e||"$?"===e)break;if("/$"===e)return null}}return t}function ui(t){t=t.previousSibling;for(var e=0;t;){if(8===t.nodeType){var r=t.data;if("$"===r||"$!"===r||"$?"===r){if(0===e)return t;e--}else"/$"===r&&e++}t=t.previousSibling}return null}var ci=Math.random().toString(36).slice(2),pi="__reactFiber$"+ci,fi="__reactProps$"+ci,di="__reactContainer$"+ci,mi="__reactEvents$"+ci,gi="__reactListeners$"+ci,yi="__reactHandles$"+ci;function vi(t){var e=t[pi];if(e)return e;for(var r=t.parentNode;r;){if(e=r[di]||r[pi]){if(r=e.alternate,null!==e.child||null!==r&&null!==r.child)for(t=ui(t);null!==t;){if(r=t[pi])return r;t=ui(t)}return e}r=(t=r).parentNode}return null}function bi(t){return!(t=t[pi]||t[di])||5!==t.tag&&6!==t.tag&&13!==t.tag&&3!==t.tag?null:t}function wi(t){if(5===t.tag||6===t.tag)return t.stateNode;throw Error(a(33))}function xi(t){return t[fi]||null}var _i=[],ki=-1;function Si(t){return{current:t}}function Ei(t){0>ki||(t.current=_i[ki],_i[ki]=null,ki--)}function Ci(t,e){ki++,_i[ki]=t.current,t.current=e}var Mi={},Pi=Si(Mi),Ai=Si(!1),Ti=Mi;function Di(t,e){var r=t.type.contextTypes;if(!r)return Mi;var n=t.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===e)return n.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in r)a[i]=e[i];return n&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=a),a}function Ii(t){return null!=t.childContextTypes}function Fi(){Ei(Ai),Ei(Pi)}function Ri(t,e,r){if(Pi.current!==Mi)throw Error(a(168));Ci(Pi,e),Ci(Ai,r)}function Bi(t,e,r){var n=t.stateNode;if(e=e.childContextTypes,"function"!=typeof n.getChildContext)return r;for(var i in n=n.getChildContext())if(!(i in e))throw Error(a(108,H(t)||"Unknown",i));return N({},r,n)}function Li(t){return t=(t=t.stateNode)&&t.__reactInternalMemoizedMergedChildContext||Mi,Ti=Pi.current,Ci(Pi,t),Ci(Ai,Ai.current),!0}function Ni(t,e,r){var n=t.stateNode;if(!n)throw Error(a(169));r?(t=Bi(t,e,Ti),n.__reactInternalMemoizedMergedChildContext=t,Ei(Ai),Ei(Pi),Ci(Pi,t)):Ei(Ai),Ci(Ai,r)}var Oi=null,Vi=!1,zi=!1;function Gi(t){null===Oi?Oi=[t]:Oi.push(t)}function ji(){if(!zi&&null!==Oi){zi=!0;var t=0,e=be;try{var r=Oi;for(be=1;t<r.length;t++){var n=r[t];do{n=n(!0)}while(null!==n)}Oi=null,Vi=!1}catch(e){throw null!==Oi&&(Oi=Oi.slice(t+1)),$t(Xt,ji),e}finally{be=e,zi=!1}}return null}var Hi=[],qi=0,Wi=null,Ui=0,$i=[],Zi=0,Qi=null,Yi=1,Ki="";function Ji(t,e){Hi[qi++]=Ui,Hi[qi++]=Wi,Wi=t,Ui=e}function Xi(t,e,r){$i[Zi++]=Yi,$i[Zi++]=Ki,$i[Zi++]=Qi,Qi=t;var n=Yi;t=Ki;var i=32-se(n)-1;n&=~(1<<i),r+=1;var a=32-se(e)+i;if(30<a){var s=i-i%5;a=(n&(1<<s)-1).toString(32),n>>=s,i-=s,Yi=1<<32-se(e)+i|r<<i|n,Ki=a+t}else Yi=1<<a|r<<i|n,Ki=t}function ta(t){null!==t.return&&(Ji(t,1),Xi(t,1,0))}function ea(t){for(;t===Wi;)Wi=Hi[--qi],Hi[qi]=null,Ui=Hi[--qi],Hi[qi]=null;for(;t===Qi;)Qi=$i[--Zi],$i[Zi]=null,Ki=$i[--Zi],$i[Zi]=null,Yi=$i[--Zi],$i[Zi]=null}var ra=null,na=null,ia=!1,aa=null;function sa(t,e){var r=Dh(5,null,null,0);r.elementType="DELETED",r.stateNode=e,r.return=t,null===(e=t.deletions)?(t.deletions=[r],t.flags|=16):e.push(r)}function oa(t,e){switch(t.tag){case 5:var r=t.type;return null!==(e=1!==e.nodeType||r.toLowerCase()!==e.nodeName.toLowerCase()?null:e)&&(t.stateNode=e,ra=t,na=hi(e.firstChild),!0);case 6:return null!==(e=""===t.pendingProps||3!==e.nodeType?null:e)&&(t.stateNode=e,ra=t,na=null,!0);case 13:return null!==(e=8!==e.nodeType?null:e)&&(r=null!==Qi?{id:Yi,overflow:Ki}:null,t.memoizedState={dehydrated:e,treeContext:r,retryLane:1073741824},(r=Dh(18,null,null,0)).stateNode=e,r.return=t,t.child=r,ra=t,na=null,!0);default:return!1}}function la(t){return 0!=(1&t.mode)&&0==(128&t.flags)}function ha(t){if(ia){var e=na;if(e){var r=e;if(!oa(t,e)){if(la(t))throw Error(a(418));e=hi(r.nextSibling);var n=ra;e&&oa(t,e)?sa(n,r):(t.flags=-4097&t.flags|2,ia=!1,ra=t)}}else{if(la(t))throw Error(a(418));t.flags=-4097&t.flags|2,ia=!1,ra=t}}}function ua(t){for(t=t.return;null!==t&&5!==t.tag&&3!==t.tag&&13!==t.tag;)t=t.return;ra=t}function ca(t){if(t!==ra)return!1;if(!ia)return ua(t),ia=!0,!1;var e;if((e=3!==t.tag)&&!(e=5!==t.tag)&&(e="head"!==(e=t.type)&&"body"!==e&&!ri(t.type,t.memoizedProps)),e&&(e=na)){if(la(t))throw pa(),Error(a(418));for(;e;)sa(t,e),e=hi(e.nextSibling)}if(ua(t),13===t.tag){if(!(t=null!==(t=t.memoizedState)?t.dehydrated:null))throw Error(a(317));t:{for(t=t.nextSibling,e=0;t;){if(8===t.nodeType){var r=t.data;if("/$"===r){if(0===e){na=hi(t.nextSibling);break t}e--}else"$"!==r&&"$!"!==r&&"$?"!==r||e++}t=t.nextSibling}na=null}}else na=ra?hi(t.stateNode.nextSibling):null;return!0}function pa(){for(var t=na;t;)t=hi(t.nextSibling)}function fa(){na=ra=null,ia=!1}function da(t){null===aa?aa=[t]:aa.push(t)}var ma=w.ReactCurrentBatchConfig;function ga(t,e){if(t&&t.defaultProps){for(var r in e=N({},e),t=t.defaultProps)void 0===e[r]&&(e[r]=t[r]);return e}return e}var ya=Si(null),va=null,ba=null,wa=null;function xa(){wa=ba=va=null}function _a(t){var e=ya.current;Ei(ya),t._currentValue=e}function ka(t,e,r){for(;null!==t;){var n=t.alternate;if((t.childLanes&e)!==e?(t.childLanes|=e,null!==n&&(n.childLanes|=e)):null!==n&&(n.childLanes&e)!==e&&(n.childLanes|=e),t===r)break;t=t.return}}function Sa(t,e){va=t,wa=ba=null,null!==(t=t.dependencies)&&null!==t.firstContext&&(0!=(t.lanes&e)&&(wo=!0),t.firstContext=null)}function Ea(t){var e=t._currentValue;if(wa!==t)if(t={context:t,memoizedValue:e,next:null},null===ba){if(null===va)throw Error(a(308));ba=t,va.dependencies={lanes:0,firstContext:t}}else ba=ba.next=t;return e}var Ca=null;function Ma(t){null===Ca?Ca=[t]:Ca.push(t)}function Pa(t,e,r,n){var i=e.interleaved;return null===i?(r.next=r,Ma(e)):(r.next=i.next,i.next=r),e.interleaved=r,Aa(t,n)}function Aa(t,e){t.lanes|=e;var r=t.alternate;for(null!==r&&(r.lanes|=e),r=t,t=t.return;null!==t;)t.childLanes|=e,null!==(r=t.alternate)&&(r.childLanes|=e),r=t,t=t.return;return 3===r.tag?r.stateNode:null}var Ta=!1;function Da(t){t.updateQueue={baseState:t.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ia(t,e){t=t.updateQueue,e.updateQueue===t&&(e.updateQueue={baseState:t.baseState,firstBaseUpdate:t.firstBaseUpdate,lastBaseUpdate:t.lastBaseUpdate,shared:t.shared,effects:t.effects})}function Fa(t,e){return{eventTime:t,lane:e,tag:0,payload:null,callback:null,next:null}}function Ra(t,e,r){var n=t.updateQueue;if(null===n)return null;if(n=n.shared,0!=(2&Pl)){var i=n.pending;return null===i?e.next=e:(e.next=i.next,i.next=e),n.pending=e,Aa(t,r)}return null===(i=n.interleaved)?(e.next=e,Ma(n)):(e.next=i.next,i.next=e),n.interleaved=e,Aa(t,r)}function Ba(t,e,r){if(null!==(e=e.updateQueue)&&(e=e.shared,0!=(4194240&r))){var n=e.lanes;r|=n&=t.pendingLanes,e.lanes=r,ve(t,r)}}function La(t,e){var r=t.updateQueue,n=t.alternate;if(null!==n&&r===(n=n.updateQueue)){var i=null,a=null;if(null!==(r=r.firstBaseUpdate)){do{var s={eventTime:r.eventTime,lane:r.lane,tag:r.tag,payload:r.payload,callback:r.callback,next:null};null===a?i=a=s:a=a.next=s,r=r.next}while(null!==r);null===a?i=a=e:a=a.next=e}else i=a=e;return r={baseState:n.baseState,firstBaseUpdate:i,lastBaseUpdate:a,shared:n.shared,effects:n.effects},void(t.updateQueue=r)}null===(t=r.lastBaseUpdate)?r.firstBaseUpdate=e:t.next=e,r.lastBaseUpdate=e}function Na(t,e,r,n){var i=t.updateQueue;Ta=!1;var a=i.firstBaseUpdate,s=i.lastBaseUpdate,o=i.shared.pending;if(null!==o){i.shared.pending=null;var l=o,h=l.next;l.next=null,null===s?a=h:s.next=h,s=l;var u=t.alternate;null!==u&&(o=(u=u.updateQueue).lastBaseUpdate)!==s&&(null===o?u.firstBaseUpdate=h:o.next=h,u.lastBaseUpdate=l)}if(null!==a){var c=i.baseState;for(s=0,u=h=l=null,o=a;;){var p=o.lane,f=o.eventTime;if((n&p)===p){null!==u&&(u=u.next={eventTime:f,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});t:{var d=t,m=o;switch(p=e,f=r,m.tag){case 1:if("function"==typeof(d=m.payload)){c=d.call(f,c,p);break t}c=d;break t;case 3:d.flags=-65537&d.flags|128;case 0:if(null==(p="function"==typeof(d=m.payload)?d.call(f,c,p):d))break t;c=N({},c,p);break t;case 2:Ta=!0}}null!==o.callback&&0!==o.lane&&(t.flags|=64,null===(p=i.effects)?i.effects=[o]:p.push(o))}else f={eventTime:f,lane:p,tag:o.tag,payload:o.payload,callback:o.callback,next:null},null===u?(h=u=f,l=c):u=u.next=f,s|=p;if(null===(o=o.next)){if(null===(o=i.shared.pending))break;o=(p=o).next,p.next=null,i.lastBaseUpdate=p,i.shared.pending=null}}if(null===u&&(l=c),i.baseState=l,i.firstBaseUpdate=h,i.lastBaseUpdate=u,null!==(e=i.shared.interleaved)){i=e;do{s|=i.lane,i=i.next}while(i!==e)}else null===a&&(i.shared.lanes=0);Ll|=s,t.lanes=s,t.memoizedState=c}}function Oa(t,e,r){if(t=e.effects,e.effects=null,null!==t)for(e=0;e<t.length;e++){var n=t[e],i=n.callback;if(null!==i){if(n.callback=null,n=r,"function"!=typeof i)throw Error(a(191,i));i.call(n)}}}var Va=(new n.Component).refs;function za(t,e,r,n){r=null==(r=r(n,e=t.memoizedState))?e:N({},e,r),t.memoizedState=r,0===t.lanes&&(t.updateQueue.baseState=r)}var Ga={isMounted:function(t){return!!(t=t._reactInternals)&&jt(t)===t},enqueueSetState:function(t,e,r){t=t._reactInternals;var n=th(),i=eh(t),a=Fa(n,i);a.payload=e,null!=r&&(a.callback=r),null!==(e=Ra(t,a,i))&&(rh(e,t,i,n),Ba(e,t,i))},enqueueReplaceState:function(t,e,r){t=t._reactInternals;var n=th(),i=eh(t),a=Fa(n,i);a.tag=1,a.payload=e,null!=r&&(a.callback=r),null!==(e=Ra(t,a,i))&&(rh(e,t,i,n),Ba(e,t,i))},enqueueForceUpdate:function(t,e){t=t._reactInternals;var r=th(),n=eh(t),i=Fa(r,n);i.tag=2,null!=e&&(i.callback=e),null!==(e=Ra(t,i,n))&&(rh(e,t,n,r),Ba(e,t,n))}};function ja(t,e,r,n,i,a,s){return"function"==typeof(t=t.stateNode).shouldComponentUpdate?t.shouldComponentUpdate(n,a,s):!(e.prototype&&e.prototype.isPureReactComponent&&ln(r,n)&&ln(i,a))}function Ha(t,e,r){var n=!1,i=Mi,a=e.contextType;return"object"==typeof a&&null!==a?a=Ea(a):(i=Ii(e)?Ti:Pi.current,a=(n=null!=(n=e.contextTypes))?Di(t,i):Mi),e=new e(r,a),t.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,e.updater=Ga,t.stateNode=e,e._reactInternals=t,n&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,t.__reactInternalMemoizedMaskedChildContext=a),e}function qa(t,e,r,n){t=e.state,"function"==typeof e.componentWillReceiveProps&&e.componentWillReceiveProps(r,n),"function"==typeof e.UNSAFE_componentWillReceiveProps&&e.UNSAFE_componentWillReceiveProps(r,n),e.state!==t&&Ga.enqueueReplaceState(e,e.state,null)}function Wa(t,e,r,n){var i=t.stateNode;i.props=r,i.state=t.memoizedState,i.refs=Va,Da(t);var a=e.contextType;"object"==typeof a&&null!==a?i.context=Ea(a):(a=Ii(e)?Ti:Pi.current,i.context=Di(t,a)),i.state=t.memoizedState,"function"==typeof(a=e.getDerivedStateFromProps)&&(za(t,e,a,r),i.state=t.memoizedState),"function"==typeof e.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(e=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),e!==i.state&&Ga.enqueueReplaceState(i,i.state,null),Na(t,r,i,n),i.state=t.memoizedState),"function"==typeof i.componentDidMount&&(t.flags|=4194308)}function Ua(t,e,r){if(null!==(t=r.ref)&&"function"!=typeof t&&"object"!=typeof t){if(r._owner){if(r=r._owner){if(1!==r.tag)throw Error(a(309));var n=r.stateNode}if(!n)throw Error(a(147,t));var i=n,s=""+t;return null!==e&&null!==e.ref&&"function"==typeof e.ref&&e.ref._stringRef===s?e.ref:(e=function(t){var e=i.refs;e===Va&&(e=i.refs={}),null===t?delete e[s]:e[s]=t},e._stringRef=s,e)}if("string"!=typeof t)throw Error(a(284));if(!r._owner)throw Error(a(290,t))}return t}function $a(t,e){throw t=Object.prototype.toString.call(e),Error(a(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t))}function Za(t){return(0,t._init)(t._payload)}function Qa(t){function e(e,r){if(t){var n=e.deletions;null===n?(e.deletions=[r],e.flags|=16):n.push(r)}}function r(r,n){if(!t)return null;for(;null!==n;)e(r,n),n=n.sibling;return null}function n(t,e){for(t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function i(t,e){return(t=Fh(t,e)).index=0,t.sibling=null,t}function s(e,r,n){return e.index=n,t?null!==(n=e.alternate)?(n=n.index)<r?(e.flags|=2,r):n:(e.flags|=2,r):(e.flags|=1048576,r)}function o(e){return t&&null===e.alternate&&(e.flags|=2),e}function l(t,e,r,n){return null===e||6!==e.tag?((e=Nh(r,t.mode,n)).return=t,e):((e=i(e,r)).return=t,e)}function h(t,e,r,n){var a=r.type;return a===k?c(t,e,r.props.children,n,r.key):null!==e&&(e.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===I&&Za(a)===e.type)?((n=i(e,r.props)).ref=Ua(t,e,r),n.return=t,n):((n=Rh(r.type,r.key,r.props,null,t.mode,n)).ref=Ua(t,e,r),n.return=t,n)}function u(t,e,r,n){return null===e||4!==e.tag||e.stateNode.containerInfo!==r.containerInfo||e.stateNode.implementation!==r.implementation?((e=Oh(r,t.mode,n)).return=t,e):((e=i(e,r.children||[])).return=t,e)}function c(t,e,r,n,a){return null===e||7!==e.tag?((e=Bh(r,t.mode,n,a)).return=t,e):((e=i(e,r)).return=t,e)}function p(t,e,r){if("string"==typeof e&&""!==e||"number"==typeof e)return(e=Nh(""+e,t.mode,r)).return=t,e;if("object"==typeof e&&null!==e){switch(e.$$typeof){case x:return(r=Rh(e.type,e.key,e.props,null,t.mode,r)).ref=Ua(t,null,e),r.return=t,r;case _:return(e=Oh(e,t.mode,r)).return=t,e;case I:return p(t,(0,e._init)(e._payload),r)}if(et(e)||B(e))return(e=Bh(e,t.mode,r,null)).return=t,e;$a(t,e)}return null}function f(t,e,r,n){var i=null!==e?e.key:null;if("string"==typeof r&&""!==r||"number"==typeof r)return null!==i?null:l(t,e,""+r,n);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return r.key===i?h(t,e,r,n):null;case _:return r.key===i?u(t,e,r,n):null;case I:return f(t,e,(i=r._init)(r._payload),n)}if(et(r)||B(r))return null!==i?null:c(t,e,r,n,null);$a(t,r)}return null}function d(t,e,r,n,i){if("string"==typeof n&&""!==n||"number"==typeof n)return l(e,t=t.get(r)||null,""+n,i);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return h(e,t=t.get(null===n.key?r:n.key)||null,n,i);case _:return u(e,t=t.get(null===n.key?r:n.key)||null,n,i);case I:return d(t,e,r,(0,n._init)(n._payload),i)}if(et(n)||B(n))return c(e,t=t.get(r)||null,n,i,null);$a(e,n)}return null}function m(i,a,o,l){for(var h=null,u=null,c=a,m=a=0,g=null;null!==c&&m<o.length;m++){c.index>m?(g=c,c=null):g=c.sibling;var y=f(i,c,o[m],l);if(null===y){null===c&&(c=g);break}t&&c&&null===y.alternate&&e(i,c),a=s(y,a,m),null===u?h=y:u.sibling=y,u=y,c=g}if(m===o.length)return r(i,c),ia&&Ji(i,m),h;if(null===c){for(;m<o.length;m++)null!==(c=p(i,o[m],l))&&(a=s(c,a,m),null===u?h=c:u.sibling=c,u=c);return ia&&Ji(i,m),h}for(c=n(i,c);m<o.length;m++)null!==(g=d(c,i,m,o[m],l))&&(t&&null!==g.alternate&&c.delete(null===g.key?m:g.key),a=s(g,a,m),null===u?h=g:u.sibling=g,u=g);return t&&c.forEach((function(t){return e(i,t)})),ia&&Ji(i,m),h}function g(i,o,l,h){var u=B(l);if("function"!=typeof u)throw Error(a(150));if(null==(l=u.call(l)))throw Error(a(151));for(var c=u=null,m=o,g=o=0,y=null,v=l.next();null!==m&&!v.done;g++,v=l.next()){m.index>g?(y=m,m=null):y=m.sibling;var b=f(i,m,v.value,h);if(null===b){null===m&&(m=y);break}t&&m&&null===b.alternate&&e(i,m),o=s(b,o,g),null===c?u=b:c.sibling=b,c=b,m=y}if(v.done)return r(i,m),ia&&Ji(i,g),u;if(null===m){for(;!v.done;g++,v=l.next())null!==(v=p(i,v.value,h))&&(o=s(v,o,g),null===c?u=v:c.sibling=v,c=v);return ia&&Ji(i,g),u}for(m=n(i,m);!v.done;g++,v=l.next())null!==(v=d(m,i,g,v.value,h))&&(t&&null!==v.alternate&&m.delete(null===v.key?g:v.key),o=s(v,o,g),null===c?u=v:c.sibling=v,c=v);return t&&m.forEach((function(t){return e(i,t)})),ia&&Ji(i,g),u}return function t(n,a,s,l){if("object"==typeof s&&null!==s&&s.type===k&&null===s.key&&(s=s.props.children),"object"==typeof s&&null!==s){switch(s.$$typeof){case x:t:{for(var h=s.key,u=a;null!==u;){if(u.key===h){if((h=s.type)===k){if(7===u.tag){r(n,u.sibling),(a=i(u,s.props.children)).return=n,n=a;break t}}else if(u.elementType===h||"object"==typeof h&&null!==h&&h.$$typeof===I&&Za(h)===u.type){r(n,u.sibling),(a=i(u,s.props)).ref=Ua(n,u,s),a.return=n,n=a;break t}r(n,u);break}e(n,u),u=u.sibling}s.type===k?((a=Bh(s.props.children,n.mode,l,s.key)).return=n,n=a):((l=Rh(s.type,s.key,s.props,null,n.mode,l)).ref=Ua(n,a,s),l.return=n,n=l)}return o(n);case _:t:{for(u=s.key;null!==a;){if(a.key===u){if(4===a.tag&&a.stateNode.containerInfo===s.containerInfo&&a.stateNode.implementation===s.implementation){r(n,a.sibling),(a=i(a,s.children||[])).return=n,n=a;break t}r(n,a);break}e(n,a),a=a.sibling}(a=Oh(s,n.mode,l)).return=n,n=a}return o(n);case I:return t(n,a,(u=s._init)(s._payload),l)}if(et(s))return m(n,a,s,l);if(B(s))return g(n,a,s,l);$a(n,s)}return"string"==typeof s&&""!==s||"number"==typeof s?(s=""+s,null!==a&&6===a.tag?(r(n,a.sibling),(a=i(a,s)).return=n,n=a):(r(n,a),(a=Nh(s,n.mode,l)).return=n,n=a),o(n)):r(n,a)}}var Ya=Qa(!0),Ka=Qa(!1),Ja={},Xa=Si(Ja),ts=Si(Ja),es=Si(Ja);function rs(t){if(t===Ja)throw Error(a(174));return t}function ns(t,e){switch(Ci(es,e),Ci(ts,t),Ci(Xa,Ja),t=e.nodeType){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:lt(null,"");break;default:e=lt(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}Ei(Xa),Ci(Xa,e)}function is(){Ei(Xa),Ei(ts),Ei(es)}function as(t){rs(es.current);var e=rs(Xa.current),r=lt(e,t.type);e!==r&&(Ci(ts,t),Ci(Xa,r))}function ss(t){ts.current===t&&(Ei(Xa),Ei(ts))}var os=Si(0);function ls(t){for(var e=t;null!==e;){if(13===e.tag){var r=e.memoizedState;if(null!==r&&(null===(r=r.dehydrated)||"$?"===r.data||"$!"===r.data))return e}else if(19===e.tag&&void 0!==e.memoizedProps.revealOrder){if(0!=(128&e.flags))return e}else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}return null}var hs=[];function us(){for(var t=0;t<hs.length;t++)hs[t]._workInProgressVersionPrimary=null;hs.length=0}var cs=w.ReactCurrentDispatcher,ps=w.ReactCurrentBatchConfig,fs=0,ds=null,ms=null,gs=null,ys=!1,vs=!1,bs=0,ws=0;function xs(){throw Error(a(321))}function _s(t,e){if(null===e)return!1;for(var r=0;r<e.length&&r<t.length;r++)if(!on(t[r],e[r]))return!1;return!0}function ks(t,e,r,n,i,s){if(fs=s,ds=e,e.memoizedState=null,e.updateQueue=null,e.lanes=0,cs.current=null===t||null===t.memoizedState?so:oo,t=r(n,i),vs){s=0;do{if(vs=!1,bs=0,25<=s)throw Error(a(301));s+=1,gs=ms=null,e.updateQueue=null,cs.current=lo,t=r(n,i)}while(vs)}if(cs.current=ao,e=null!==ms&&null!==ms.next,fs=0,gs=ms=ds=null,ys=!1,e)throw Error(a(300));return t}function Ss(){var t=0!==bs;return bs=0,t}function Es(){var t={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===gs?ds.memoizedState=gs=t:gs=gs.next=t,gs}function Cs(){if(null===ms){var t=ds.alternate;t=null!==t?t.memoizedState:null}else t=ms.next;var e=null===gs?ds.memoizedState:gs.next;if(null!==e)gs=e,ms=t;else{if(null===t)throw Error(a(310));t={memoizedState:(ms=t).memoizedState,baseState:ms.baseState,baseQueue:ms.baseQueue,queue:ms.queue,next:null},null===gs?ds.memoizedState=gs=t:gs=gs.next=t}return gs}function Ms(t,e){return"function"==typeof e?e(t):e}function Ps(t){var e=Cs(),r=e.queue;if(null===r)throw Error(a(311));r.lastRenderedReducer=t;var n=ms,i=n.baseQueue,s=r.pending;if(null!==s){if(null!==i){var o=i.next;i.next=s.next,s.next=o}n.baseQueue=i=s,r.pending=null}if(null!==i){s=i.next,n=n.baseState;var l=o=null,h=null,u=s;do{var c=u.lane;if((fs&c)===c)null!==h&&(h=h.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),n=u.hasEagerState?u.eagerState:t(n,u.action);else{var p={lane:c,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===h?(l=h=p,o=n):h=h.next=p,ds.lanes|=c,Ll|=c}u=u.next}while(null!==u&&u!==s);null===h?o=n:h.next=l,on(n,e.memoizedState)||(wo=!0),e.memoizedState=n,e.baseState=o,e.baseQueue=h,r.lastRenderedState=n}if(null!==(t=r.interleaved)){i=t;do{s=i.lane,ds.lanes|=s,Ll|=s,i=i.next}while(i!==t)}else null===i&&(r.lanes=0);return[e.memoizedState,r.dispatch]}function As(t){var e=Cs(),r=e.queue;if(null===r)throw Error(a(311));r.lastRenderedReducer=t;var n=r.dispatch,i=r.pending,s=e.memoizedState;if(null!==i){r.pending=null;var o=i=i.next;do{s=t(s,o.action),o=o.next}while(o!==i);on(s,e.memoizedState)||(wo=!0),e.memoizedState=s,null===e.baseQueue&&(e.baseState=s),r.lastRenderedState=s}return[s,n]}function Ts(){}function Ds(t,e){var r=ds,n=Cs(),i=e(),s=!on(n.memoizedState,i);if(s&&(n.memoizedState=i,wo=!0),n=n.queue,Hs(Rs.bind(null,r,n,t),[t]),n.getSnapshot!==e||s||null!==gs&&1&gs.memoizedState.tag){if(r.flags|=2048,Os(9,Fs.bind(null,r,n,i,e),void 0,null),null===Al)throw Error(a(349));0!=(30&fs)||Is(r,e,i)}return i}function Is(t,e,r){t.flags|=16384,t={getSnapshot:e,value:r},null===(e=ds.updateQueue)?(e={lastEffect:null,stores:null},ds.updateQueue=e,e.stores=[t]):null===(r=e.stores)?e.stores=[t]:r.push(t)}function Fs(t,e,r,n){e.value=r,e.getSnapshot=n,Bs(e)&&Ls(t)}function Rs(t,e,r){return r((function(){Bs(e)&&Ls(t)}))}function Bs(t){var e=t.getSnapshot;t=t.value;try{var r=e();return!on(t,r)}catch(t){return!0}}function Ls(t){var e=Aa(t,1);null!==e&&rh(e,t,1,-1)}function Ns(t){var e=Es();return"function"==typeof t&&(t=t()),e.memoizedState=e.baseState=t,t={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ms,lastRenderedState:t},e.queue=t,t=t.dispatch=eo.bind(null,ds,t),[e.memoizedState,t]}function Os(t,e,r,n){return t={tag:t,create:e,destroy:r,deps:n,next:null},null===(e=ds.updateQueue)?(e={lastEffect:null,stores:null},ds.updateQueue=e,e.lastEffect=t.next=t):null===(r=e.lastEffect)?e.lastEffect=t.next=t:(n=r.next,r.next=t,t.next=n,e.lastEffect=t),t}function Vs(){return Cs().memoizedState}function zs(t,e,r,n){var i=Es();ds.flags|=t,i.memoizedState=Os(1|e,r,void 0,void 0===n?null:n)}function Gs(t,e,r,n){var i=Cs();n=void 0===n?null:n;var a=void 0;if(null!==ms){var s=ms.memoizedState;if(a=s.destroy,null!==n&&_s(n,s.deps))return void(i.memoizedState=Os(e,r,a,n))}ds.flags|=t,i.memoizedState=Os(1|e,r,a,n)}function js(t,e){return zs(8390656,8,t,e)}function Hs(t,e){return Gs(2048,8,t,e)}function qs(t,e){return Gs(4,2,t,e)}function Ws(t,e){return Gs(4,4,t,e)}function Us(t,e){return"function"==typeof e?(t=t(),e(t),function(){e(null)}):null!=e?(t=t(),e.current=t,function(){e.current=null}):void 0}function $s(t,e,r){return r=null!=r?r.concat([t]):null,Gs(4,4,Us.bind(null,e,t),r)}function Zs(){}function Qs(t,e){var r=Cs();e=void 0===e?null:e;var n=r.memoizedState;return null!==n&&null!==e&&_s(e,n[1])?n[0]:(r.memoizedState=[t,e],t)}function Ys(t,e){var r=Cs();e=void 0===e?null:e;var n=r.memoizedState;return null!==n&&null!==e&&_s(e,n[1])?n[0]:(t=t(),r.memoizedState=[t,e],t)}function Ks(t,e,r){return 0==(21&fs)?(t.baseState&&(t.baseState=!1,wo=!0),t.memoizedState=r):(on(r,e)||(r=me(),ds.lanes|=r,Ll|=r,t.baseState=!0),e)}function Js(t,e){var r=be;be=0!==r&&4>r?r:4,t(!0);var n=ps.transition;ps.transition={};try{t(!1),e()}finally{be=r,ps.transition=n}}function Xs(){return Cs().memoizedState}function to(t,e,r){var n=eh(t);r={lane:n,action:r,hasEagerState:!1,eagerState:null,next:null},ro(t)?no(e,r):null!==(r=Pa(t,e,r,n))&&(rh(r,t,n,th()),io(r,e,n))}function eo(t,e,r){var n=eh(t),i={lane:n,action:r,hasEagerState:!1,eagerState:null,next:null};if(ro(t))no(e,i);else{var a=t.alternate;if(0===t.lanes&&(null===a||0===a.lanes)&&null!==(a=e.lastRenderedReducer))try{var s=e.lastRenderedState,o=a(s,r);if(i.hasEagerState=!0,i.eagerState=o,on(o,s)){var l=e.interleaved;return null===l?(i.next=i,Ma(e)):(i.next=l.next,l.next=i),void(e.interleaved=i)}}catch(t){}null!==(r=Pa(t,e,i,n))&&(rh(r,t,n,i=th()),io(r,e,n))}}function ro(t){var e=t.alternate;return t===ds||null!==e&&e===ds}function no(t,e){vs=ys=!0;var r=t.pending;null===r?e.next=e:(e.next=r.next,r.next=e),t.pending=e}function io(t,e,r){if(0!=(4194240&r)){var n=e.lanes;r|=n&=t.pendingLanes,e.lanes=r,ve(t,r)}}var ao={readContext:Ea,useCallback:xs,useContext:xs,useEffect:xs,useImperativeHandle:xs,useInsertionEffect:xs,useLayoutEffect:xs,useMemo:xs,useReducer:xs,useRef:xs,useState:xs,useDebugValue:xs,useDeferredValue:xs,useTransition:xs,useMutableSource:xs,useSyncExternalStore:xs,useId:xs,unstable_isNewReconciler:!1},so={readContext:Ea,useCallback:function(t,e){return Es().memoizedState=[t,void 0===e?null:e],t},useContext:Ea,useEffect:js,useImperativeHandle:function(t,e,r){return r=null!=r?r.concat([t]):null,zs(4194308,4,Us.bind(null,e,t),r)},useLayoutEffect:function(t,e){return zs(4194308,4,t,e)},useInsertionEffect:function(t,e){return zs(4,2,t,e)},useMemo:function(t,e){var r=Es();return e=void 0===e?null:e,t=t(),r.memoizedState=[t,e],t},useReducer:function(t,e,r){var n=Es();return e=void 0!==r?r(e):e,n.memoizedState=n.baseState=e,t={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:t,lastRenderedState:e},n.queue=t,t=t.dispatch=to.bind(null,ds,t),[n.memoizedState,t]},useRef:function(t){return t={current:t},Es().memoizedState=t},useState:Ns,useDebugValue:Zs,useDeferredValue:function(t){return Es().memoizedState=t},useTransition:function(){var t=Ns(!1),e=t[0];return t=Js.bind(null,t[1]),Es().memoizedState=t,[e,t]},useMutableSource:function(){},useSyncExternalStore:function(t,e,r){var n=ds,i=Es();if(ia){if(void 0===r)throw Error(a(407));r=r()}else{if(r=e(),null===Al)throw Error(a(349));0!=(30&fs)||Is(n,e,r)}i.memoizedState=r;var s={value:r,getSnapshot:e};return i.queue=s,js(Rs.bind(null,n,s,t),[t]),n.flags|=2048,Os(9,Fs.bind(null,n,s,r,e),void 0,null),r},useId:function(){var t=Es(),e=Al.identifierPrefix;if(ia){var r=Ki;e=":"+e+"R"+(r=(Yi&~(1<<32-se(Yi)-1)).toString(32)+r),0<(r=bs++)&&(e+="H"+r.toString(32)),e+=":"}else e=":"+e+"r"+(r=ws++).toString(32)+":";return t.memoizedState=e},unstable_isNewReconciler:!1},oo={readContext:Ea,useCallback:Qs,useContext:Ea,useEffect:Hs,useImperativeHandle:$s,useInsertionEffect:qs,useLayoutEffect:Ws,useMemo:Ys,useReducer:Ps,useRef:Vs,useState:function(){return Ps(Ms)},useDebugValue:Zs,useDeferredValue:function(t){return Ks(Cs(),ms.memoizedState,t)},useTransition:function(){return[Ps(Ms)[0],Cs().memoizedState]},useMutableSource:Ts,useSyncExternalStore:Ds,useId:Xs,unstable_isNewReconciler:!1},lo={readContext:Ea,useCallback:Qs,useContext:Ea,useEffect:Hs,useImperativeHandle:$s,useInsertionEffect:qs,useLayoutEffect:Ws,useMemo:Ys,useReducer:As,useRef:Vs,useState:function(){return As(Ms)},useDebugValue:Zs,useDeferredValue:function(t){var e=Cs();return null===ms?e.memoizedState=t:Ks(e,ms.memoizedState,t)},useTransition:function(){return[As(Ms)[0],Cs().memoizedState]},useMutableSource:Ts,useSyncExternalStore:Ds,useId:Xs,unstable_isNewReconciler:!1};function ho(t,e){try{var r="",n=e;do{r+=G(n),n=n.return}while(n);var i=r}catch(t){i="\nError generating stack: "+t.message+"\n"+t.stack}return{value:t,source:e,stack:i,digest:null}}function uo(t,e,r){return{value:t,source:null,stack:null!=r?r:null,digest:null!=e?e:null}}function co(t,e){try{console.error(e.value)}catch(t){setTimeout((function(){throw t}))}}var po="function"==typeof WeakMap?WeakMap:Map;function fo(t,e,r){(r=Fa(-1,r)).tag=3,r.payload={element:null};var n=e.value;return r.callback=function(){ql||(ql=!0,Wl=n),co(0,e)},r}function mo(t,e,r){(r=Fa(-1,r)).tag=3;var n=t.type.getDerivedStateFromError;if("function"==typeof n){var i=e.value;r.payload=function(){return n(i)},r.callback=function(){co(0,e)}}var a=t.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(r.callback=function(){co(0,e),"function"!=typeof n&&(null===Ul?Ul=new Set([this]):Ul.add(this));var t=e.stack;this.componentDidCatch(e.value,{componentStack:null!==t?t:""})}),r}function go(t,e,r){var n=t.pingCache;if(null===n){n=t.pingCache=new po;var i=new Set;n.set(e,i)}else void 0===(i=n.get(e))&&(i=new Set,n.set(e,i));i.has(r)||(i.add(r),t=Eh.bind(null,t,e,r),e.then(t,t))}function yo(t){do{var e;if((e=13===t.tag)&&(e=null===(e=t.memoizedState)||null!==e.dehydrated),e)return t;t=t.return}while(null!==t);return null}function vo(t,e,r,n,i){return 0==(1&t.mode)?(t===e?t.flags|=65536:(t.flags|=128,r.flags|=131072,r.flags&=-52805,1===r.tag&&(null===r.alternate?r.tag=17:((e=Fa(-1,1)).tag=2,Ra(r,e,1))),r.lanes|=1),t):(t.flags|=65536,t.lanes=i,t)}var bo=w.ReactCurrentOwner,wo=!1;function xo(t,e,r,n){e.child=null===t?Ka(e,null,r,n):Ya(e,t.child,r,n)}function _o(t,e,r,n,i){r=r.render;var a=e.ref;return Sa(e,i),n=ks(t,e,r,n,a,i),r=Ss(),null===t||wo?(ia&&r&&ta(e),e.flags|=1,xo(t,e,n,i),e.child):(e.updateQueue=t.updateQueue,e.flags&=-2053,t.lanes&=~i,qo(t,e,i))}function ko(t,e,r,n,i){if(null===t){var a=r.type;return"function"!=typeof a||Ih(a)||void 0!==a.defaultProps||null!==r.compare||void 0!==r.defaultProps?((t=Rh(r.type,null,n,e,e.mode,i)).ref=e.ref,t.return=e,e.child=t):(e.tag=15,e.type=a,So(t,e,a,n,i))}if(a=t.child,0==(t.lanes&i)){var s=a.memoizedProps;if((r=null!==(r=r.compare)?r:ln)(s,n)&&t.ref===e.ref)return qo(t,e,i)}return e.flags|=1,(t=Fh(a,n)).ref=e.ref,t.return=e,e.child=t}function So(t,e,r,n,i){if(null!==t){var a=t.memoizedProps;if(ln(a,n)&&t.ref===e.ref){if(wo=!1,e.pendingProps=n=a,0==(t.lanes&i))return e.lanes=t.lanes,qo(t,e,i);0!=(131072&t.flags)&&(wo=!0)}}return Mo(t,e,r,n,i)}function Eo(t,e,r){var n=e.pendingProps,i=n.children,a=null!==t?t.memoizedState:null;if("hidden"===n.mode)if(0==(1&e.mode))e.memoizedState={baseLanes:0,cachePool:null,transitions:null},Ci(Fl,Il),Il|=r;else{if(0==(1073741824&r))return t=null!==a?a.baseLanes|r:r,e.lanes=e.childLanes=1073741824,e.memoizedState={baseLanes:t,cachePool:null,transitions:null},e.updateQueue=null,Ci(Fl,Il),Il|=t,null;e.memoizedState={baseLanes:0,cachePool:null,transitions:null},n=null!==a?a.baseLanes:r,Ci(Fl,Il),Il|=n}else null!==a?(n=a.baseLanes|r,e.memoizedState=null):n=r,Ci(Fl,Il),Il|=n;return xo(t,e,i,r),e.child}function Co(t,e){var r=e.ref;(null===t&&null!==r||null!==t&&t.ref!==r)&&(e.flags|=512,e.flags|=2097152)}function Mo(t,e,r,n,i){var a=Ii(r)?Ti:Pi.current;return a=Di(e,a),Sa(e,i),r=ks(t,e,r,n,a,i),n=Ss(),null===t||wo?(ia&&n&&ta(e),e.flags|=1,xo(t,e,r,i),e.child):(e.updateQueue=t.updateQueue,e.flags&=-2053,t.lanes&=~i,qo(t,e,i))}function Po(t,e,r,n,i){if(Ii(r)){var a=!0;Li(e)}else a=!1;if(Sa(e,i),null===e.stateNode)Ho(t,e),Ha(e,r,n),Wa(e,r,n,i),n=!0;else if(null===t){var s=e.stateNode,o=e.memoizedProps;s.props=o;var l=s.context,h=r.contextType;h="object"==typeof h&&null!==h?Ea(h):Di(e,h=Ii(r)?Ti:Pi.current);var u=r.getDerivedStateFromProps,c="function"==typeof u||"function"==typeof s.getSnapshotBeforeUpdate;c||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(o!==n||l!==h)&&qa(e,s,n,h),Ta=!1;var p=e.memoizedState;s.state=p,Na(e,n,s,i),l=e.memoizedState,o!==n||p!==l||Ai.current||Ta?("function"==typeof u&&(za(e,r,u,n),l=e.memoizedState),(o=Ta||ja(e,r,o,n,p,l,h))?(c||"function"!=typeof s.UNSAFE_componentWillMount&&"function"!=typeof s.componentWillMount||("function"==typeof s.componentWillMount&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&s.UNSAFE_componentWillMount()),"function"==typeof s.componentDidMount&&(e.flags|=4194308)):("function"==typeof s.componentDidMount&&(e.flags|=4194308),e.memoizedProps=n,e.memoizedState=l),s.props=n,s.state=l,s.context=h,n=o):("function"==typeof s.componentDidMount&&(e.flags|=4194308),n=!1)}else{s=e.stateNode,Ia(t,e),o=e.memoizedProps,h=e.type===e.elementType?o:ga(e.type,o),s.props=h,c=e.pendingProps,p=s.context,l="object"==typeof(l=r.contextType)&&null!==l?Ea(l):Di(e,l=Ii(r)?Ti:Pi.current);var f=r.getDerivedStateFromProps;(u="function"==typeof f||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(o!==c||p!==l)&&qa(e,s,n,l),Ta=!1,p=e.memoizedState,s.state=p,Na(e,n,s,i);var d=e.memoizedState;o!==c||p!==d||Ai.current||Ta?("function"==typeof f&&(za(e,r,f,n),d=e.memoizedState),(h=Ta||ja(e,r,h,n,p,d,l)||!1)?(u||"function"!=typeof s.UNSAFE_componentWillUpdate&&"function"!=typeof s.componentWillUpdate||("function"==typeof s.componentWillUpdate&&s.componentWillUpdate(n,d,l),"function"==typeof s.UNSAFE_componentWillUpdate&&s.UNSAFE_componentWillUpdate(n,d,l)),"function"==typeof s.componentDidUpdate&&(e.flags|=4),"function"==typeof s.getSnapshotBeforeUpdate&&(e.flags|=1024)):("function"!=typeof s.componentDidUpdate||o===t.memoizedProps&&p===t.memoizedState||(e.flags|=4),"function"!=typeof s.getSnapshotBeforeUpdate||o===t.memoizedProps&&p===t.memoizedState||(e.flags|=1024),e.memoizedProps=n,e.memoizedState=d),s.props=n,s.state=d,s.context=l,n=h):("function"!=typeof s.componentDidUpdate||o===t.memoizedProps&&p===t.memoizedState||(e.flags|=4),"function"!=typeof s.getSnapshotBeforeUpdate||o===t.memoizedProps&&p===t.memoizedState||(e.flags|=1024),n=!1)}return Ao(t,e,r,n,a,i)}function Ao(t,e,r,n,i,a){Co(t,e);var s=0!=(128&e.flags);if(!n&&!s)return i&&Ni(e,r,!1),qo(t,e,a);n=e.stateNode,bo.current=e;var o=s&&"function"!=typeof r.getDerivedStateFromError?null:n.render();return e.flags|=1,null!==t&&s?(e.child=Ya(e,t.child,null,a),e.child=Ya(e,null,o,a)):xo(t,e,o,a),e.memoizedState=n.state,i&&Ni(e,r,!0),e.child}function To(t){var e=t.stateNode;e.pendingContext?Ri(0,e.pendingContext,e.pendingContext!==e.context):e.context&&Ri(0,e.context,!1),ns(t,e.containerInfo)}function Do(t,e,r,n,i){return fa(),da(i),e.flags|=256,xo(t,e,r,n),e.child}var Io,Fo,Ro,Bo={dehydrated:null,treeContext:null,retryLane:0};function Lo(t){return{baseLanes:t,cachePool:null,transitions:null}}function No(t,e,r){var n,i=e.pendingProps,s=os.current,o=!1,l=0!=(128&e.flags);if((n=l)||(n=(null===t||null!==t.memoizedState)&&0!=(2&s)),n?(o=!0,e.flags&=-129):null!==t&&null===t.memoizedState||(s|=1),Ci(os,1&s),null===t)return ha(e),null!==(t=e.memoizedState)&&null!==(t=t.dehydrated)?(0==(1&e.mode)?e.lanes=1:"$!"===t.data?e.lanes=8:e.lanes=1073741824,null):(l=i.children,t=i.fallback,o?(i=e.mode,o=e.child,l={mode:"hidden",children:l},0==(1&i)&&null!==o?(o.childLanes=0,o.pendingProps=l):o=Lh(l,i,0,null),t=Bh(t,i,r,null),o.return=e,t.return=e,o.sibling=t,e.child=o,e.child.memoizedState=Lo(r),e.memoizedState=Bo,t):Oo(e,l));if(null!==(s=t.memoizedState)&&null!==(n=s.dehydrated))return function(t,e,r,n,i,s,o){if(r)return 256&e.flags?(e.flags&=-257,Vo(t,e,o,n=uo(Error(a(422))))):null!==e.memoizedState?(e.child=t.child,e.flags|=128,null):(s=n.fallback,i=e.mode,n=Lh({mode:"visible",children:n.children},i,0,null),(s=Bh(s,i,o,null)).flags|=2,n.return=e,s.return=e,n.sibling=s,e.child=n,0!=(1&e.mode)&&Ya(e,t.child,null,o),e.child.memoizedState=Lo(o),e.memoizedState=Bo,s);if(0==(1&e.mode))return Vo(t,e,o,null);if("$!"===i.data){if(n=i.nextSibling&&i.nextSibling.dataset)var l=n.dgst;return n=l,Vo(t,e,o,n=uo(s=Error(a(419)),n,void 0))}if(l=0!=(o&t.childLanes),wo||l){if(null!==(n=Al)){switch(o&-o){case 4:i=2;break;case 16:i=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:i=32;break;case 536870912:i=268435456;break;default:i=0}0!==(i=0!=(i&(n.suspendedLanes|o))?0:i)&&i!==s.retryLane&&(s.retryLane=i,Aa(t,i),rh(n,t,i,-1))}return mh(),Vo(t,e,o,n=uo(Error(a(421))))}return"$?"===i.data?(e.flags|=128,e.child=t.child,e=Mh.bind(null,t),i._reactRetry=e,null):(t=s.treeContext,na=hi(i.nextSibling),ra=e,ia=!0,aa=null,null!==t&&($i[Zi++]=Yi,$i[Zi++]=Ki,$i[Zi++]=Qi,Yi=t.id,Ki=t.overflow,Qi=e),(e=Oo(e,n.children)).flags|=4096,e)}(t,e,l,i,n,s,r);if(o){o=i.fallback,l=e.mode,n=(s=t.child).sibling;var h={mode:"hidden",children:i.children};return 0==(1&l)&&e.child!==s?((i=e.child).childLanes=0,i.pendingProps=h,e.deletions=null):(i=Fh(s,h)).subtreeFlags=14680064&s.subtreeFlags,null!==n?o=Fh(n,o):(o=Bh(o,l,r,null)).flags|=2,o.return=e,i.return=e,i.sibling=o,e.child=i,i=o,o=e.child,l=null===(l=t.child.memoizedState)?Lo(r):{baseLanes:l.baseLanes|r,cachePool:null,transitions:l.transitions},o.memoizedState=l,o.childLanes=t.childLanes&~r,e.memoizedState=Bo,i}return t=(o=t.child).sibling,i=Fh(o,{mode:"visible",children:i.children}),0==(1&e.mode)&&(i.lanes=r),i.return=e,i.sibling=null,null!==t&&(null===(r=e.deletions)?(e.deletions=[t],e.flags|=16):r.push(t)),e.child=i,e.memoizedState=null,i}function Oo(t,e){return(e=Lh({mode:"visible",children:e},t.mode,0,null)).return=t,t.child=e}function Vo(t,e,r,n){return null!==n&&da(n),Ya(e,t.child,null,r),(t=Oo(e,e.pendingProps.children)).flags|=2,e.memoizedState=null,t}function zo(t,e,r){t.lanes|=e;var n=t.alternate;null!==n&&(n.lanes|=e),ka(t.return,e,r)}function Go(t,e,r,n,i){var a=t.memoizedState;null===a?t.memoizedState={isBackwards:e,rendering:null,renderingStartTime:0,last:n,tail:r,tailMode:i}:(a.isBackwards=e,a.rendering=null,a.renderingStartTime=0,a.last=n,a.tail=r,a.tailMode=i)}function jo(t,e,r){var n=e.pendingProps,i=n.revealOrder,a=n.tail;if(xo(t,e,n.children,r),0!=(2&(n=os.current)))n=1&n|2,e.flags|=128;else{if(null!==t&&0!=(128&t.flags))t:for(t=e.child;null!==t;){if(13===t.tag)null!==t.memoizedState&&zo(t,r,e);else if(19===t.tag)zo(t,r,e);else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break t;for(;null===t.sibling;){if(null===t.return||t.return===e)break t;t=t.return}t.sibling.return=t.return,t=t.sibling}n&=1}if(Ci(os,n),0==(1&e.mode))e.memoizedState=null;else switch(i){case"forwards":for(r=e.child,i=null;null!==r;)null!==(t=r.alternate)&&null===ls(t)&&(i=r),r=r.sibling;null===(r=i)?(i=e.child,e.child=null):(i=r.sibling,r.sibling=null),Go(e,!1,i,r,a);break;case"backwards":for(r=null,i=e.child,e.child=null;null!==i;){if(null!==(t=i.alternate)&&null===ls(t)){e.child=i;break}t=i.sibling,i.sibling=r,r=i,i=t}Go(e,!0,r,null,a);break;case"together":Go(e,!1,null,null,void 0);break;default:e.memoizedState=null}return e.child}function Ho(t,e){0==(1&e.mode)&&null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2)}function qo(t,e,r){if(null!==t&&(e.dependencies=t.dependencies),Ll|=e.lanes,0==(r&e.childLanes))return null;if(null!==t&&e.child!==t.child)throw Error(a(153));if(null!==e.child){for(r=Fh(t=e.child,t.pendingProps),e.child=r,r.return=e;null!==t.sibling;)t=t.sibling,(r=r.sibling=Fh(t,t.pendingProps)).return=e;r.sibling=null}return e.child}function Wo(t,e){if(!ia)switch(t.tailMode){case"hidden":e=t.tail;for(var r=null;null!==e;)null!==e.alternate&&(r=e),e=e.sibling;null===r?t.tail=null:r.sibling=null;break;case"collapsed":r=t.tail;for(var n=null;null!==r;)null!==r.alternate&&(n=r),r=r.sibling;null===n?e||null===t.tail?t.tail=null:t.tail.sibling=null:n.sibling=null}}function Uo(t){var e=null!==t.alternate&&t.alternate.child===t.child,r=0,n=0;if(e)for(var i=t.child;null!==i;)r|=i.lanes|i.childLanes,n|=14680064&i.subtreeFlags,n|=14680064&i.flags,i.return=t,i=i.sibling;else for(i=t.child;null!==i;)r|=i.lanes|i.childLanes,n|=i.subtreeFlags,n|=i.flags,i.return=t,i=i.sibling;return t.subtreeFlags|=n,t.childLanes=r,e}function $o(t,e,r){var n=e.pendingProps;switch(ea(e),e.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Uo(e),null;case 1:case 17:return Ii(e.type)&&Fi(),Uo(e),null;case 3:return n=e.stateNode,is(),Ei(Ai),Ei(Pi),us(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==t&&null!==t.child||(ca(e)?e.flags|=4:null===t||t.memoizedState.isDehydrated&&0==(256&e.flags)||(e.flags|=1024,null!==aa&&(sh(aa),aa=null))),Uo(e),null;case 5:ss(e);var i=rs(es.current);if(r=e.type,null!==t&&null!=e.stateNode)Fo(t,e,r,n),t.ref!==e.ref&&(e.flags|=512,e.flags|=2097152);else{if(!n){if(null===e.stateNode)throw Error(a(166));return Uo(e),null}if(t=rs(Xa.current),ca(e)){n=e.stateNode,r=e.type;var s=e.memoizedProps;switch(n[pi]=e,n[fi]=s,t=0!=(1&e.mode),r){case"dialog":Vn("cancel",n),Vn("close",n);break;case"iframe":case"object":case"embed":Vn("load",n);break;case"video":case"audio":for(i=0;i<Bn.length;i++)Vn(Bn[i],n);break;case"source":Vn("error",n);break;case"img":case"image":case"link":Vn("error",n),Vn("load",n);break;case"details":Vn("toggle",n);break;case"input":Y(n,s),Vn("invalid",n);break;case"select":n._wrapperState={wasMultiple:!!s.multiple},Vn("invalid",n);break;case"textarea":it(n,s),Vn("invalid",n)}for(var l in vt(r,s),i=null,s)if(s.hasOwnProperty(l)){var h=s[l];"children"===l?"string"==typeof h?n.textContent!==h&&(!0!==s.suppressHydrationWarning&&Jn(n.textContent,h,t),i=["children",h]):"number"==typeof h&&n.textContent!==""+h&&(!0!==s.suppressHydrationWarning&&Jn(n.textContent,h,t),i=["children",""+h]):o.hasOwnProperty(l)&&null!=h&&"onScroll"===l&&Vn("scroll",n)}switch(r){case"input":U(n),X(n,s,!0);break;case"textarea":U(n),st(n);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(n.onclick=Xn)}n=i,e.updateQueue=n,null!==n&&(e.flags|=4)}else{l=9===i.nodeType?i:i.ownerDocument,"http://www.w3.org/1999/xhtml"===t&&(t=ot(r)),"http://www.w3.org/1999/xhtml"===t?"script"===r?((t=l.createElement("div")).innerHTML="<script><\/script>",t=t.removeChild(t.firstChild)):"string"==typeof n.is?t=l.createElement(r,{is:n.is}):(t=l.createElement(r),"select"===r&&(l=t,n.multiple?l.multiple=!0:n.size&&(l.size=n.size))):t=l.createElementNS(t,r),t[pi]=e,t[fi]=n,Io(t,e),e.stateNode=t;t:{switch(l=bt(r,n),r){case"dialog":Vn("cancel",t),Vn("close",t),i=n;break;case"iframe":case"object":case"embed":Vn("load",t),i=n;break;case"video":case"audio":for(i=0;i<Bn.length;i++)Vn(Bn[i],t);i=n;break;case"source":Vn("error",t),i=n;break;case"img":case"image":case"link":Vn("error",t),Vn("load",t),i=n;break;case"details":Vn("toggle",t),i=n;break;case"input":Y(t,n),i=Q(t,n),Vn("invalid",t);break;case"option":default:i=n;break;case"select":t._wrapperState={wasMultiple:!!n.multiple},i=N({},n,{value:void 0}),Vn("invalid",t);break;case"textarea":it(t,n),i=nt(t,n),Vn("invalid",t)}for(s in vt(r,i),h=i)if(h.hasOwnProperty(s)){var u=h[s];"style"===s?gt(t,u):"dangerouslySetInnerHTML"===s?null!=(u=u?u.__html:void 0)&&ct(t,u):"children"===s?"string"==typeof u?("textarea"!==r||""!==u)&&pt(t,u):"number"==typeof u&&pt(t,""+u):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(o.hasOwnProperty(s)?null!=u&&"onScroll"===s&&Vn("scroll",t):null!=u&&b(t,s,u,l))}switch(r){case"input":U(t),X(t,n,!1);break;case"textarea":U(t),st(t);break;case"option":null!=n.value&&t.setAttribute("value",""+q(n.value));break;case"select":t.multiple=!!n.multiple,null!=(s=n.value)?rt(t,!!n.multiple,s,!1):null!=n.defaultValue&&rt(t,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof i.onClick&&(t.onclick=Xn)}switch(r){case"button":case"input":case"select":case"textarea":n=!!n.autoFocus;break t;case"img":n=!0;break t;default:n=!1}}n&&(e.flags|=4)}null!==e.ref&&(e.flags|=512,e.flags|=2097152)}return Uo(e),null;case 6:if(t&&null!=e.stateNode)Ro(0,e,t.memoizedProps,n);else{if("string"!=typeof n&&null===e.stateNode)throw Error(a(166));if(r=rs(es.current),rs(Xa.current),ca(e)){if(n=e.stateNode,r=e.memoizedProps,n[pi]=e,(s=n.nodeValue!==r)&&null!==(t=ra))switch(t.tag){case 3:Jn(n.nodeValue,r,0!=(1&t.mode));break;case 5:!0!==t.memoizedProps.suppressHydrationWarning&&Jn(n.nodeValue,r,0!=(1&t.mode))}s&&(e.flags|=4)}else(n=(9===r.nodeType?r:r.ownerDocument).createTextNode(n))[pi]=e,e.stateNode=n}return Uo(e),null;case 13:if(Ei(os),n=e.memoizedState,null===t||null!==t.memoizedState&&null!==t.memoizedState.dehydrated){if(ia&&null!==na&&0!=(1&e.mode)&&0==(128&e.flags))pa(),fa(),e.flags|=98560,s=!1;else if(s=ca(e),null!==n&&null!==n.dehydrated){if(null===t){if(!s)throw Error(a(318));if(!(s=null!==(s=e.memoizedState)?s.dehydrated:null))throw Error(a(317));s[pi]=e}else fa(),0==(128&e.flags)&&(e.memoizedState=null),e.flags|=4;Uo(e),s=!1}else null!==aa&&(sh(aa),aa=null),s=!0;if(!s)return 65536&e.flags?e:null}return 0!=(128&e.flags)?(e.lanes=r,e):((n=null!==n)!=(null!==t&&null!==t.memoizedState)&&n&&(e.child.flags|=8192,0!=(1&e.mode)&&(null===t||0!=(1&os.current)?0===Rl&&(Rl=3):mh())),null!==e.updateQueue&&(e.flags|=4),Uo(e),null);case 4:return is(),null===t&&jn(e.stateNode.containerInfo),Uo(e),null;case 10:return _a(e.type._context),Uo(e),null;case 19:if(Ei(os),null===(s=e.memoizedState))return Uo(e),null;if(n=0!=(128&e.flags),null===(l=s.rendering))if(n)Wo(s,!1);else{if(0!==Rl||null!==t&&0!=(128&t.flags))for(t=e.child;null!==t;){if(null!==(l=ls(t))){for(e.flags|=128,Wo(s,!1),null!==(n=l.updateQueue)&&(e.updateQueue=n,e.flags|=4),e.subtreeFlags=0,n=r,r=e.child;null!==r;)t=n,(s=r).flags&=14680066,null===(l=s.alternate)?(s.childLanes=0,s.lanes=t,s.child=null,s.subtreeFlags=0,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=l.childLanes,s.lanes=l.lanes,s.child=l.child,s.subtreeFlags=0,s.deletions=null,s.memoizedProps=l.memoizedProps,s.memoizedState=l.memoizedState,s.updateQueue=l.updateQueue,s.type=l.type,t=l.dependencies,s.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),r=r.sibling;return Ci(os,1&os.current|2),e.child}t=t.sibling}null!==s.tail&&Kt()>jl&&(e.flags|=128,n=!0,Wo(s,!1),e.lanes=4194304)}else{if(!n)if(null!==(t=ls(l))){if(e.flags|=128,n=!0,null!==(r=t.updateQueue)&&(e.updateQueue=r,e.flags|=4),Wo(s,!0),null===s.tail&&"hidden"===s.tailMode&&!l.alternate&&!ia)return Uo(e),null}else 2*Kt()-s.renderingStartTime>jl&&1073741824!==r&&(e.flags|=128,n=!0,Wo(s,!1),e.lanes=4194304);s.isBackwards?(l.sibling=e.child,e.child=l):(null!==(r=s.last)?r.sibling=l:e.child=l,s.last=l)}return null!==s.tail?(e=s.tail,s.rendering=e,s.tail=e.sibling,s.renderingStartTime=Kt(),e.sibling=null,r=os.current,Ci(os,n?1&r|2:1&r),e):(Uo(e),null);case 22:case 23:return ch(),n=null!==e.memoizedState,null!==t&&null!==t.memoizedState!==n&&(e.flags|=8192),n&&0!=(1&e.mode)?0!=(1073741824&Il)&&(Uo(e),6&e.subtreeFlags&&(e.flags|=8192)):Uo(e),null;case 24:case 25:return null}throw Error(a(156,e.tag))}function Zo(t,e){switch(ea(e),e.tag){case 1:return Ii(e.type)&&Fi(),65536&(t=e.flags)?(e.flags=-65537&t|128,e):null;case 3:return is(),Ei(Ai),Ei(Pi),us(),0!=(65536&(t=e.flags))&&0==(128&t)?(e.flags=-65537&t|128,e):null;case 5:return ss(e),null;case 13:if(Ei(os),null!==(t=e.memoizedState)&&null!==t.dehydrated){if(null===e.alternate)throw Error(a(340));fa()}return 65536&(t=e.flags)?(e.flags=-65537&t|128,e):null;case 19:return Ei(os),null;case 4:return is(),null;case 10:return _a(e.type._context),null;case 22:case 23:return ch(),null;default:return null}}Io=function(t,e){for(var r=e.child;null!==r;){if(5===r.tag||6===r.tag)t.appendChild(r.stateNode);else if(4!==r.tag&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===e)break;for(;null===r.sibling;){if(null===r.return||r.return===e)return;r=r.return}r.sibling.return=r.return,r=r.sibling}},Fo=function(t,e,r,n){var i=t.memoizedProps;if(i!==n){t=e.stateNode,rs(Xa.current);var a,s=null;switch(r){case"input":i=Q(t,i),n=Q(t,n),s=[];break;case"select":i=N({},i,{value:void 0}),n=N({},n,{value:void 0}),s=[];break;case"textarea":i=nt(t,i),n=nt(t,n),s=[];break;default:"function"!=typeof i.onClick&&"function"==typeof n.onClick&&(t.onclick=Xn)}for(u in vt(r,n),r=null,i)if(!n.hasOwnProperty(u)&&i.hasOwnProperty(u)&&null!=i[u])if("style"===u){var l=i[u];for(a in l)l.hasOwnProperty(a)&&(r||(r={}),r[a]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(o.hasOwnProperty(u)?s||(s=[]):(s=s||[]).push(u,null));for(u in n){var h=n[u];if(l=null!=i?i[u]:void 0,n.hasOwnProperty(u)&&h!==l&&(null!=h||null!=l))if("style"===u)if(l){for(a in l)!l.hasOwnProperty(a)||h&&h.hasOwnProperty(a)||(r||(r={}),r[a]="");for(a in h)h.hasOwnProperty(a)&&l[a]!==h[a]&&(r||(r={}),r[a]=h[a])}else r||(s||(s=[]),s.push(u,r)),r=h;else"dangerouslySetInnerHTML"===u?(h=h?h.__html:void 0,l=l?l.__html:void 0,null!=h&&l!==h&&(s=s||[]).push(u,h)):"children"===u?"string"!=typeof h&&"number"!=typeof h||(s=s||[]).push(u,""+h):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(o.hasOwnProperty(u)?(null!=h&&"onScroll"===u&&Vn("scroll",t),s||l===h||(s=[])):(s=s||[]).push(u,h))}r&&(s=s||[]).push("style",r);var u=s;(e.updateQueue=u)&&(e.flags|=4)}},Ro=function(t,e,r,n){r!==n&&(e.flags|=4)};var Qo=!1,Yo=!1,Ko="function"==typeof WeakSet?WeakSet:Set,Jo=null;function Xo(t,e){var r=t.ref;if(null!==r)if("function"==typeof r)try{r(null)}catch(r){Sh(t,e,r)}else r.current=null}function tl(t,e,r){try{r()}catch(r){Sh(t,e,r)}}var el=!1;function rl(t,e,r){var n=e.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var i=n=n.next;do{if((i.tag&t)===t){var a=i.destroy;i.destroy=void 0,void 0!==a&&tl(e,r,a)}i=i.next}while(i!==n)}}function nl(t,e){if(null!==(e=null!==(e=e.updateQueue)?e.lastEffect:null)){var r=e=e.next;do{if((r.tag&t)===t){var n=r.create;r.destroy=n()}r=r.next}while(r!==e)}}function il(t){var e=t.ref;if(null!==e){var r=t.stateNode;t.tag,t=r,"function"==typeof e?e(t):e.current=t}}function al(t){var e=t.alternate;null!==e&&(t.alternate=null,al(e)),t.child=null,t.deletions=null,t.sibling=null,5===t.tag&&null!==(e=t.stateNode)&&(delete e[pi],delete e[fi],delete e[mi],delete e[gi],delete e[yi]),t.stateNode=null,t.return=null,t.dependencies=null,t.memoizedProps=null,t.memoizedState=null,t.pendingProps=null,t.stateNode=null,t.updateQueue=null}function sl(t){return 5===t.tag||3===t.tag||4===t.tag}function ol(t){t:for(;;){for(;null===t.sibling;){if(null===t.return||sl(t.return))return null;t=t.return}for(t.sibling.return=t.return,t=t.sibling;5!==t.tag&&6!==t.tag&&18!==t.tag;){if(2&t.flags)continue t;if(null===t.child||4===t.tag)continue t;t.child.return=t,t=t.child}if(!(2&t.flags))return t.stateNode}}function ll(t,e,r){var n=t.tag;if(5===n||6===n)t=t.stateNode,e?8===r.nodeType?r.parentNode.insertBefore(t,e):r.insertBefore(t,e):(8===r.nodeType?(e=r.parentNode).insertBefore(t,r):(e=r).appendChild(t),null!=(r=r._reactRootContainer)||null!==e.onclick||(e.onclick=Xn));else if(4!==n&&null!==(t=t.child))for(ll(t,e,r),t=t.sibling;null!==t;)ll(t,e,r),t=t.sibling}function hl(t,e,r){var n=t.tag;if(5===n||6===n)t=t.stateNode,e?r.insertBefore(t,e):r.appendChild(t);else if(4!==n&&null!==(t=t.child))for(hl(t,e,r),t=t.sibling;null!==t;)hl(t,e,r),t=t.sibling}var ul=null,cl=!1;function pl(t,e,r){for(r=r.child;null!==r;)fl(t,e,r),r=r.sibling}function fl(t,e,r){if(ae&&"function"==typeof ae.onCommitFiberUnmount)try{ae.onCommitFiberUnmount(ie,r)}catch(t){}switch(r.tag){case 5:Yo||Xo(r,e);case 6:var n=ul,i=cl;ul=null,pl(t,e,r),cl=i,null!==(ul=n)&&(cl?(t=ul,r=r.stateNode,8===t.nodeType?t.parentNode.removeChild(r):t.removeChild(r)):ul.removeChild(r.stateNode));break;case 18:null!==ul&&(cl?(t=ul,r=r.stateNode,8===t.nodeType?li(t.parentNode,r):1===t.nodeType&&li(t,r),je(t)):li(ul,r.stateNode));break;case 4:n=ul,i=cl,ul=r.stateNode.containerInfo,cl=!0,pl(t,e,r),ul=n,cl=i;break;case 0:case 11:case 14:case 15:if(!Yo&&null!==(n=r.updateQueue)&&null!==(n=n.lastEffect)){i=n=n.next;do{var a=i,s=a.destroy;a=a.tag,void 0!==s&&(0!=(2&a)||0!=(4&a))&&tl(r,e,s),i=i.next}while(i!==n)}pl(t,e,r);break;case 1:if(!Yo&&(Xo(r,e),"function"==typeof(n=r.stateNode).componentWillUnmount))try{n.props=r.memoizedProps,n.state=r.memoizedState,n.componentWillUnmount()}catch(t){Sh(r,e,t)}pl(t,e,r);break;case 21:pl(t,e,r);break;case 22:1&r.mode?(Yo=(n=Yo)||null!==r.memoizedState,pl(t,e,r),Yo=n):pl(t,e,r);break;default:pl(t,e,r)}}function dl(t){var e=t.updateQueue;if(null!==e){t.updateQueue=null;var r=t.stateNode;null===r&&(r=t.stateNode=new Ko),e.forEach((function(e){var n=Ph.bind(null,t,e);r.has(e)||(r.add(e),e.then(n,n))}))}}function ml(t,e){var r=e.deletions;if(null!==r)for(var n=0;n<r.length;n++){var i=r[n];try{var s=t,o=e,l=o;t:for(;null!==l;){switch(l.tag){case 5:ul=l.stateNode,cl=!1;break t;case 3:case 4:ul=l.stateNode.containerInfo,cl=!0;break t}l=l.return}if(null===ul)throw Error(a(160));fl(s,o,i),ul=null,cl=!1;var h=i.alternate;null!==h&&(h.return=null),i.return=null}catch(t){Sh(i,e,t)}}if(12854&e.subtreeFlags)for(e=e.child;null!==e;)gl(e,t),e=e.sibling}function gl(t,e){var r=t.alternate,n=t.flags;switch(t.tag){case 0:case 11:case 14:case 15:if(ml(e,t),yl(t),4&n){try{rl(3,t,t.return),nl(3,t)}catch(e){Sh(t,t.return,e)}try{rl(5,t,t.return)}catch(e){Sh(t,t.return,e)}}break;case 1:ml(e,t),yl(t),512&n&&null!==r&&Xo(r,r.return);break;case 5:if(ml(e,t),yl(t),512&n&&null!==r&&Xo(r,r.return),32&t.flags){var i=t.stateNode;try{pt(i,"")}catch(e){Sh(t,t.return,e)}}if(4&n&&null!=(i=t.stateNode)){var s=t.memoizedProps,o=null!==r?r.memoizedProps:s,l=t.type,h=t.updateQueue;if(t.updateQueue=null,null!==h)try{"input"===l&&"radio"===s.type&&null!=s.name&&K(i,s),bt(l,o);var u=bt(l,s);for(o=0;o<h.length;o+=2){var c=h[o],p=h[o+1];"style"===c?gt(i,p):"dangerouslySetInnerHTML"===c?ct(i,p):"children"===c?pt(i,p):b(i,c,p,u)}switch(l){case"input":J(i,s);break;case"textarea":at(i,s);break;case"select":var f=i._wrapperState.wasMultiple;i._wrapperState.wasMultiple=!!s.multiple;var d=s.value;null!=d?rt(i,!!s.multiple,d,!1):f!==!!s.multiple&&(null!=s.defaultValue?rt(i,!!s.multiple,s.defaultValue,!0):rt(i,!!s.multiple,s.multiple?[]:"",!1))}i[fi]=s}catch(e){Sh(t,t.return,e)}}break;case 6:if(ml(e,t),yl(t),4&n){if(null===t.stateNode)throw Error(a(162));i=t.stateNode,s=t.memoizedProps;try{i.nodeValue=s}catch(e){Sh(t,t.return,e)}}break;case 3:if(ml(e,t),yl(t),4&n&&null!==r&&r.memoizedState.isDehydrated)try{je(e.containerInfo)}catch(e){Sh(t,t.return,e)}break;case 4:default:ml(e,t),yl(t);break;case 13:ml(e,t),yl(t),8192&(i=t.child).flags&&(s=null!==i.memoizedState,i.stateNode.isHidden=s,!s||null!==i.alternate&&null!==i.alternate.memoizedState||(Gl=Kt())),4&n&&dl(t);break;case 22:if(c=null!==r&&null!==r.memoizedState,1&t.mode?(Yo=(u=Yo)||c,ml(e,t),Yo=u):ml(e,t),yl(t),8192&n){if(u=null!==t.memoizedState,(t.stateNode.isHidden=u)&&!c&&0!=(1&t.mode))for(Jo=t,c=t.child;null!==c;){for(p=Jo=c;null!==Jo;){switch(d=(f=Jo).child,f.tag){case 0:case 11:case 14:case 15:rl(4,f,f.return);break;case 1:Xo(f,f.return);var m=f.stateNode;if("function"==typeof m.componentWillUnmount){n=f,r=f.return;try{e=n,m.props=e.memoizedProps,m.state=e.memoizedState,m.componentWillUnmount()}catch(t){Sh(n,r,t)}}break;case 5:Xo(f,f.return);break;case 22:if(null!==f.memoizedState){xl(p);continue}}null!==d?(d.return=f,Jo=d):xl(p)}c=c.sibling}t:for(c=null,p=t;;){if(5===p.tag){if(null===c){c=p;try{i=p.stateNode,u?"function"==typeof(s=i.style).setProperty?s.setProperty("display","none","important"):s.display="none":(l=p.stateNode,o=null!=(h=p.memoizedProps.style)&&h.hasOwnProperty("display")?h.display:null,l.style.display=mt("display",o))}catch(e){Sh(t,t.return,e)}}}else if(6===p.tag){if(null===c)try{p.stateNode.nodeValue=u?"":p.memoizedProps}catch(e){Sh(t,t.return,e)}}else if((22!==p.tag&&23!==p.tag||null===p.memoizedState||p===t)&&null!==p.child){p.child.return=p,p=p.child;continue}if(p===t)break t;for(;null===p.sibling;){if(null===p.return||p.return===t)break t;c===p&&(c=null),p=p.return}c===p&&(c=null),p.sibling.return=p.return,p=p.sibling}}break;case 19:ml(e,t),yl(t),4&n&&dl(t);case 21:}}function yl(t){var e=t.flags;if(2&e){try{t:{for(var r=t.return;null!==r;){if(sl(r)){var n=r;break t}r=r.return}throw Error(a(160))}switch(n.tag){case 5:var i=n.stateNode;32&n.flags&&(pt(i,""),n.flags&=-33),hl(t,ol(t),i);break;case 3:case 4:var s=n.stateNode.containerInfo;ll(t,ol(t),s);break;default:throw Error(a(161))}}catch(e){Sh(t,t.return,e)}t.flags&=-3}4096&e&&(t.flags&=-4097)}function vl(t,e,r){Jo=t,bl(t,e,r)}function bl(t,e,r){for(var n=0!=(1&t.mode);null!==Jo;){var i=Jo,a=i.child;if(22===i.tag&&n){var s=null!==i.memoizedState||Qo;if(!s){var o=i.alternate,l=null!==o&&null!==o.memoizedState||Yo;o=Qo;var h=Yo;if(Qo=s,(Yo=l)&&!h)for(Jo=i;null!==Jo;)l=(s=Jo).child,22===s.tag&&null!==s.memoizedState?_l(i):null!==l?(l.return=s,Jo=l):_l(i);for(;null!==a;)Jo=a,bl(a,e,r),a=a.sibling;Jo=i,Qo=o,Yo=h}wl(t)}else 0!=(8772&i.subtreeFlags)&&null!==a?(a.return=i,Jo=a):wl(t)}}function wl(t){for(;null!==Jo;){var e=Jo;if(0!=(8772&e.flags)){var r=e.alternate;try{if(0!=(8772&e.flags))switch(e.tag){case 0:case 11:case 15:Yo||nl(5,e);break;case 1:var n=e.stateNode;if(4&e.flags&&!Yo)if(null===r)n.componentDidMount();else{var i=e.elementType===e.type?r.memoizedProps:ga(e.type,r.memoizedProps);n.componentDidUpdate(i,r.memoizedState,n.__reactInternalSnapshotBeforeUpdate)}var s=e.updateQueue;null!==s&&Oa(e,s,n);break;case 3:var o=e.updateQueue;if(null!==o){if(r=null,null!==e.child)switch(e.child.tag){case 5:case 1:r=e.child.stateNode}Oa(e,o,r)}break;case 5:var l=e.stateNode;if(null===r&&4&e.flags){r=l;var h=e.memoizedProps;switch(e.type){case"button":case"input":case"select":case"textarea":h.autoFocus&&r.focus();break;case"img":h.src&&(r.src=h.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===e.memoizedState){var u=e.alternate;if(null!==u){var c=u.memoizedState;if(null!==c){var p=c.dehydrated;null!==p&&je(p)}}}break;default:throw Error(a(163))}Yo||512&e.flags&&il(e)}catch(t){Sh(e,e.return,t)}}if(e===t){Jo=null;break}if(null!==(r=e.sibling)){r.return=e.return,Jo=r;break}Jo=e.return}}function xl(t){for(;null!==Jo;){var e=Jo;if(e===t){Jo=null;break}var r=e.sibling;if(null!==r){r.return=e.return,Jo=r;break}Jo=e.return}}function _l(t){for(;null!==Jo;){var e=Jo;try{switch(e.tag){case 0:case 11:case 15:var r=e.return;try{nl(4,e)}catch(t){Sh(e,r,t)}break;case 1:var n=e.stateNode;if("function"==typeof n.componentDidMount){var i=e.return;try{n.componentDidMount()}catch(t){Sh(e,i,t)}}var a=e.return;try{il(e)}catch(t){Sh(e,a,t)}break;case 5:var s=e.return;try{il(e)}catch(t){Sh(e,s,t)}}}catch(t){Sh(e,e.return,t)}if(e===t){Jo=null;break}var o=e.sibling;if(null!==o){o.return=e.return,Jo=o;break}Jo=e.return}}var kl,Sl=Math.ceil,El=w.ReactCurrentDispatcher,Cl=w.ReactCurrentOwner,Ml=w.ReactCurrentBatchConfig,Pl=0,Al=null,Tl=null,Dl=0,Il=0,Fl=Si(0),Rl=0,Bl=null,Ll=0,Nl=0,Ol=0,Vl=null,zl=null,Gl=0,jl=1/0,Hl=null,ql=!1,Wl=null,Ul=null,$l=!1,Zl=null,Ql=0,Yl=0,Kl=null,Jl=-1,Xl=0;function th(){return 0!=(6&Pl)?Kt():-1!==Jl?Jl:Jl=Kt()}function eh(t){return 0==(1&t.mode)?1:0!=(2&Pl)&&0!==Dl?Dl&-Dl:null!==ma.transition?(0===Xl&&(Xl=me()),Xl):0!==(t=be)?t:t=void 0===(t=window.event)?16:Ye(t.type)}function rh(t,e,r,n){if(50<Yl)throw Yl=0,Kl=null,Error(a(185));ye(t,r,n),0!=(2&Pl)&&t===Al||(t===Al&&(0==(2&Pl)&&(Nl|=r),4===Rl&&oh(t,Dl)),nh(t,n),1===r&&0===Pl&&0==(1&e.mode)&&(jl=Kt()+500,Vi&&ji()))}function nh(t,e){var r=t.callbackNode;!function(t,e){for(var r=t.suspendedLanes,n=t.pingedLanes,i=t.expirationTimes,a=t.pendingLanes;0<a;){var s=31-se(a),o=1<<s,l=i[s];-1===l?0!=(o&r)&&0==(o&n)||(i[s]=fe(o,e)):l<=e&&(t.expiredLanes|=o),a&=~o}}(t,e);var n=pe(t,t===Al?Dl:0);if(0===n)null!==r&&Zt(r),t.callbackNode=null,t.callbackPriority=0;else if(e=n&-n,t.callbackPriority!==e){if(null!=r&&Zt(r),1===e)0===t.tag?function(t){Vi=!0,Gi(t)}(lh.bind(null,t)):Gi(lh.bind(null,t)),si((function(){0==(6&Pl)&&ji()})),r=null;else{switch(we(n)){case 1:r=Xt;break;case 4:r=te;break;case 16:default:r=ee;break;case 536870912:r=ne}r=Ah(r,ih.bind(null,t))}t.callbackPriority=e,t.callbackNode=r}}function ih(t,e){if(Jl=-1,Xl=0,0!=(6&Pl))throw Error(a(327));var r=t.callbackNode;if(_h()&&t.callbackNode!==r)return null;var n=pe(t,t===Al?Dl:0);if(0===n)return null;if(0!=(30&n)||0!=(n&t.expiredLanes)||e)e=gh(t,n);else{e=n;var i=Pl;Pl|=2;var s=dh();for(Al===t&&Dl===e||(Hl=null,jl=Kt()+500,ph(t,e));;)try{vh();break}catch(e){fh(t,e)}xa(),El.current=s,Pl=i,null!==Tl?e=0:(Al=null,Dl=0,e=Rl)}if(0!==e){if(2===e&&0!==(i=de(t))&&(n=i,e=ah(t,i)),1===e)throw r=Bl,ph(t,0),oh(t,n),nh(t,Kt()),r;if(6===e)oh(t,n);else{if(i=t.current.alternate,0==(30&n)&&!function(t){for(var e=t;;){if(16384&e.flags){var r=e.updateQueue;if(null!==r&&null!==(r=r.stores))for(var n=0;n<r.length;n++){var i=r[n],a=i.getSnapshot;i=i.value;try{if(!on(a(),i))return!1}catch(t){return!1}}}if(r=e.child,16384&e.subtreeFlags&&null!==r)r.return=e,e=r;else{if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return!0;e=e.return}e.sibling.return=e.return,e=e.sibling}}return!0}(i)&&(2===(e=gh(t,n))&&0!==(s=de(t))&&(n=s,e=ah(t,s)),1===e))throw r=Bl,ph(t,0),oh(t,n),nh(t,Kt()),r;switch(t.finishedWork=i,t.finishedLanes=n,e){case 0:case 1:throw Error(a(345));case 2:case 5:xh(t,zl,Hl);break;case 3:if(oh(t,n),(130023424&n)===n&&10<(e=Gl+500-Kt())){if(0!==pe(t,0))break;if(((i=t.suspendedLanes)&n)!==n){th(),t.pingedLanes|=t.suspendedLanes&i;break}t.timeoutHandle=ni(xh.bind(null,t,zl,Hl),e);break}xh(t,zl,Hl);break;case 4:if(oh(t,n),(4194240&n)===n)break;for(e=t.eventTimes,i=-1;0<n;){var o=31-se(n);s=1<<o,(o=e[o])>i&&(i=o),n&=~s}if(n=i,10<(n=(120>(n=Kt()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Sl(n/1960))-n)){t.timeoutHandle=ni(xh.bind(null,t,zl,Hl),n);break}xh(t,zl,Hl);break;default:throw Error(a(329))}}}return nh(t,Kt()),t.callbackNode===r?ih.bind(null,t):null}function ah(t,e){var r=Vl;return t.current.memoizedState.isDehydrated&&(ph(t,e).flags|=256),2!==(t=gh(t,e))&&(e=zl,zl=r,null!==e&&sh(e)),t}function sh(t){null===zl?zl=t:zl.push.apply(zl,t)}function oh(t,e){for(e&=~Ol,e&=~Nl,t.suspendedLanes|=e,t.pingedLanes&=~e,t=t.expirationTimes;0<e;){var r=31-se(e),n=1<<r;t[r]=-1,e&=~n}}function lh(t){if(0!=(6&Pl))throw Error(a(327));_h();var e=pe(t,0);if(0==(1&e))return nh(t,Kt()),null;var r=gh(t,e);if(0!==t.tag&&2===r){var n=de(t);0!==n&&(e=n,r=ah(t,n))}if(1===r)throw r=Bl,ph(t,0),oh(t,e),nh(t,Kt()),r;if(6===r)throw Error(a(345));return t.finishedWork=t.current.alternate,t.finishedLanes=e,xh(t,zl,Hl),nh(t,Kt()),null}function hh(t,e){var r=Pl;Pl|=1;try{return t(e)}finally{0===(Pl=r)&&(jl=Kt()+500,Vi&&ji())}}function uh(t){null!==Zl&&0===Zl.tag&&0==(6&Pl)&&_h();var e=Pl;Pl|=1;var r=Ml.transition,n=be;try{if(Ml.transition=null,be=1,t)return t()}finally{be=n,Ml.transition=r,0==(6&(Pl=e))&&ji()}}function ch(){Il=Fl.current,Ei(Fl)}function ph(t,e){t.finishedWork=null,t.finishedLanes=0;var r=t.timeoutHandle;if(-1!==r&&(t.timeoutHandle=-1,ii(r)),null!==Tl)for(r=Tl.return;null!==r;){var n=r;switch(ea(n),n.tag){case 1:null!=(n=n.type.childContextTypes)&&Fi();break;case 3:is(),Ei(Ai),Ei(Pi),us();break;case 5:ss(n);break;case 4:is();break;case 13:case 19:Ei(os);break;case 10:_a(n.type._context);break;case 22:case 23:ch()}r=r.return}if(Al=t,Tl=t=Fh(t.current,null),Dl=Il=e,Rl=0,Bl=null,Ol=Nl=Ll=0,zl=Vl=null,null!==Ca){for(e=0;e<Ca.length;e++)if(null!==(n=(r=Ca[e]).interleaved)){r.interleaved=null;var i=n.next,a=r.pending;if(null!==a){var s=a.next;a.next=i,n.next=s}r.pending=n}Ca=null}return t}function fh(t,e){for(;;){var r=Tl;try{if(xa(),cs.current=ao,ys){for(var n=ds.memoizedState;null!==n;){var i=n.queue;null!==i&&(i.pending=null),n=n.next}ys=!1}if(fs=0,gs=ms=ds=null,vs=!1,bs=0,Cl.current=null,null===r||null===r.return){Rl=1,Bl=e,Tl=null;break}t:{var s=t,o=r.return,l=r,h=e;if(e=Dl,l.flags|=32768,null!==h&&"object"==typeof h&&"function"==typeof h.then){var u=h,c=l,p=c.tag;if(0==(1&c.mode)&&(0===p||11===p||15===p)){var f=c.alternate;f?(c.updateQueue=f.updateQueue,c.memoizedState=f.memoizedState,c.lanes=f.lanes):(c.updateQueue=null,c.memoizedState=null)}var d=yo(o);if(null!==d){d.flags&=-257,vo(d,o,l,0,e),1&d.mode&&go(s,u,e),h=u;var m=(e=d).updateQueue;if(null===m){var g=new Set;g.add(h),e.updateQueue=g}else m.add(h);break t}if(0==(1&e)){go(s,u,e),mh();break t}h=Error(a(426))}else if(ia&&1&l.mode){var y=yo(o);if(null!==y){0==(65536&y.flags)&&(y.flags|=256),vo(y,o,l,0,e),da(ho(h,l));break t}}s=h=ho(h,l),4!==Rl&&(Rl=2),null===Vl?Vl=[s]:Vl.push(s),s=o;do{switch(s.tag){case 3:s.flags|=65536,e&=-e,s.lanes|=e,La(s,fo(0,h,e));break t;case 1:l=h;var v=s.type,b=s.stateNode;if(0==(128&s.flags)&&("function"==typeof v.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Ul||!Ul.has(b)))){s.flags|=65536,e&=-e,s.lanes|=e,La(s,mo(s,l,e));break t}}s=s.return}while(null!==s)}wh(r)}catch(t){e=t,Tl===r&&null!==r&&(Tl=r=r.return);continue}break}}function dh(){var t=El.current;return El.current=ao,null===t?ao:t}function mh(){0!==Rl&&3!==Rl&&2!==Rl||(Rl=4),null===Al||0==(268435455&Ll)&&0==(268435455&Nl)||oh(Al,Dl)}function gh(t,e){var r=Pl;Pl|=2;var n=dh();for(Al===t&&Dl===e||(Hl=null,ph(t,e));;)try{yh();break}catch(e){fh(t,e)}if(xa(),Pl=r,El.current=n,null!==Tl)throw Error(a(261));return Al=null,Dl=0,Rl}function yh(){for(;null!==Tl;)bh(Tl)}function vh(){for(;null!==Tl&&!Qt();)bh(Tl)}function bh(t){var e=kl(t.alternate,t,Il);t.memoizedProps=t.pendingProps,null===e?wh(t):Tl=e,Cl.current=null}function wh(t){var e=t;do{var r=e.alternate;if(t=e.return,0==(32768&e.flags)){if(null!==(r=$o(r,e,Il)))return void(Tl=r)}else{if(null!==(r=Zo(r,e)))return r.flags&=32767,void(Tl=r);if(null===t)return Rl=6,void(Tl=null);t.flags|=32768,t.subtreeFlags=0,t.deletions=null}if(null!==(e=e.sibling))return void(Tl=e);Tl=e=t}while(null!==e);0===Rl&&(Rl=5)}function xh(t,e,r){var n=be,i=Ml.transition;try{Ml.transition=null,be=1,function(t,e,r,n){do{_h()}while(null!==Zl);if(0!=(6&Pl))throw Error(a(327));r=t.finishedWork;var i=t.finishedLanes;if(null===r)return null;if(t.finishedWork=null,t.finishedLanes=0,r===t.current)throw Error(a(177));t.callbackNode=null,t.callbackPriority=0;var s=r.lanes|r.childLanes;if(function(t,e){var r=t.pendingLanes&~e;t.pendingLanes=e,t.suspendedLanes=0,t.pingedLanes=0,t.expiredLanes&=e,t.mutableReadLanes&=e,t.entangledLanes&=e,e=t.entanglements;var n=t.eventTimes;for(t=t.expirationTimes;0<r;){var i=31-se(r),a=1<<i;e[i]=0,n[i]=-1,t[i]=-1,r&=~a}}(t,s),t===Al&&(Tl=Al=null,Dl=0),0==(2064&r.subtreeFlags)&&0==(2064&r.flags)||$l||($l=!0,Ah(ee,(function(){return _h(),null}))),s=0!=(15990&r.flags),0!=(15990&r.subtreeFlags)||s){s=Ml.transition,Ml.transition=null;var o=be;be=1;var l=Pl;Pl|=4,Cl.current=null,function(t,e){if(ti=qe,fn(t=pn())){if("selectionStart"in t)var r={start:t.selectionStart,end:t.selectionEnd};else t:{var n=(r=(r=t.ownerDocument)&&r.defaultView||window).getSelection&&r.getSelection();if(n&&0!==n.rangeCount){r=n.anchorNode;var i=n.anchorOffset,s=n.focusNode;n=n.focusOffset;try{r.nodeType,s.nodeType}catch(t){r=null;break t}var o=0,l=-1,h=-1,u=0,c=0,p=t,f=null;e:for(;;){for(var d;p!==r||0!==i&&3!==p.nodeType||(l=o+i),p!==s||0!==n&&3!==p.nodeType||(h=o+n),3===p.nodeType&&(o+=p.nodeValue.length),null!==(d=p.firstChild);)f=p,p=d;for(;;){if(p===t)break e;if(f===r&&++u===i&&(l=o),f===s&&++c===n&&(h=o),null!==(d=p.nextSibling))break;f=(p=f).parentNode}p=d}r=-1===l||-1===h?null:{start:l,end:h}}else r=null}r=r||{start:0,end:0}}else r=null;for(ei={focusedElem:t,selectionRange:r},qe=!1,Jo=e;null!==Jo;)if(t=(e=Jo).child,0!=(1028&e.subtreeFlags)&&null!==t)t.return=e,Jo=t;else for(;null!==Jo;){e=Jo;try{var m=e.alternate;if(0!=(1024&e.flags))switch(e.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var g=m.memoizedProps,y=m.memoizedState,v=e.stateNode,b=v.getSnapshotBeforeUpdate(e.elementType===e.type?g:ga(e.type,g),y);v.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=e.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(a(163))}}catch(t){Sh(e,e.return,t)}if(null!==(t=e.sibling)){t.return=e.return,Jo=t;break}Jo=e.return}m=el,el=!1}(t,r),gl(r,t),dn(ei),qe=!!ti,ei=ti=null,t.current=r,vl(r,t,i),Yt(),Pl=l,be=o,Ml.transition=s}else t.current=r;if($l&&($l=!1,Zl=t,Ql=i),0===(s=t.pendingLanes)&&(Ul=null),function(t){if(ae&&"function"==typeof ae.onCommitFiberRoot)try{ae.onCommitFiberRoot(ie,t,void 0,128==(128&t.current.flags))}catch(t){}}(r.stateNode),nh(t,Kt()),null!==e)for(n=t.onRecoverableError,r=0;r<e.length;r++)n((i=e[r]).value,{componentStack:i.stack,digest:i.digest});if(ql)throw ql=!1,t=Wl,Wl=null,t;0!=(1&Ql)&&0!==t.tag&&_h(),0!=(1&(s=t.pendingLanes))?t===Kl?Yl++:(Yl=0,Kl=t):Yl=0,ji()}(t,e,r,n)}finally{Ml.transition=i,be=n}return null}function _h(){if(null!==Zl){var t=we(Ql),e=Ml.transition,r=be;try{if(Ml.transition=null,be=16>t?16:t,null===Zl)var n=!1;else{if(t=Zl,Zl=null,Ql=0,0!=(6&Pl))throw Error(a(331));var i=Pl;for(Pl|=4,Jo=t.current;null!==Jo;){var s=Jo,o=s.child;if(0!=(16&Jo.flags)){var l=s.deletions;if(null!==l){for(var h=0;h<l.length;h++){var u=l[h];for(Jo=u;null!==Jo;){var c=Jo;switch(c.tag){case 0:case 11:case 15:rl(8,c,s)}var p=c.child;if(null!==p)p.return=c,Jo=p;else for(;null!==Jo;){var f=(c=Jo).sibling,d=c.return;if(al(c),c===u){Jo=null;break}if(null!==f){f.return=d,Jo=f;break}Jo=d}}}var m=s.alternate;if(null!==m){var g=m.child;if(null!==g){m.child=null;do{var y=g.sibling;g.sibling=null,g=y}while(null!==g)}}Jo=s}}if(0!=(2064&s.subtreeFlags)&&null!==o)o.return=s,Jo=o;else t:for(;null!==Jo;){if(0!=(2048&(s=Jo).flags))switch(s.tag){case 0:case 11:case 15:rl(9,s,s.return)}var v=s.sibling;if(null!==v){v.return=s.return,Jo=v;break t}Jo=s.return}}var b=t.current;for(Jo=b;null!==Jo;){var w=(o=Jo).child;if(0!=(2064&o.subtreeFlags)&&null!==w)w.return=o,Jo=w;else t:for(o=b;null!==Jo;){if(0!=(2048&(l=Jo).flags))try{switch(l.tag){case 0:case 11:case 15:nl(9,l)}}catch(t){Sh(l,l.return,t)}if(l===o){Jo=null;break t}var x=l.sibling;if(null!==x){x.return=l.return,Jo=x;break t}Jo=l.return}}if(Pl=i,ji(),ae&&"function"==typeof ae.onPostCommitFiberRoot)try{ae.onPostCommitFiberRoot(ie,t)}catch(t){}n=!0}return n}finally{be=r,Ml.transition=e}}return!1}function kh(t,e,r){t=Ra(t,e=fo(0,e=ho(r,e),1),1),e=th(),null!==t&&(ye(t,1,e),nh(t,e))}function Sh(t,e,r){if(3===t.tag)kh(t,t,r);else for(;null!==e;){if(3===e.tag){kh(e,t,r);break}if(1===e.tag){var n=e.stateNode;if("function"==typeof e.type.getDerivedStateFromError||"function"==typeof n.componentDidCatch&&(null===Ul||!Ul.has(n))){e=Ra(e,t=mo(e,t=ho(r,t),1),1),t=th(),null!==e&&(ye(e,1,t),nh(e,t));break}}e=e.return}}function Eh(t,e,r){var n=t.pingCache;null!==n&&n.delete(e),e=th(),t.pingedLanes|=t.suspendedLanes&r,Al===t&&(Dl&r)===r&&(4===Rl||3===Rl&&(130023424&Dl)===Dl&&500>Kt()-Gl?ph(t,0):Ol|=r),nh(t,e)}function Ch(t,e){0===e&&(0==(1&t.mode)?e=1:(e=ue,0==(130023424&(ue<<=1))&&(ue=4194304)));var r=th();null!==(t=Aa(t,e))&&(ye(t,e,r),nh(t,r))}function Mh(t){var e=t.memoizedState,r=0;null!==e&&(r=e.retryLane),Ch(t,r)}function Ph(t,e){var r=0;switch(t.tag){case 13:var n=t.stateNode,i=t.memoizedState;null!==i&&(r=i.retryLane);break;case 19:n=t.stateNode;break;default:throw Error(a(314))}null!==n&&n.delete(e),Ch(t,r)}function Ah(t,e){return $t(t,e)}function Th(t,e,r,n){this.tag=t,this.key=r,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=e,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=n,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Dh(t,e,r,n){return new Th(t,e,r,n)}function Ih(t){return!(!(t=t.prototype)||!t.isReactComponent)}function Fh(t,e){var r=t.alternate;return null===r?((r=Dh(t.tag,e,t.key,t.mode)).elementType=t.elementType,r.type=t.type,r.stateNode=t.stateNode,r.alternate=t,t.alternate=r):(r.pendingProps=e,r.type=t.type,r.flags=0,r.subtreeFlags=0,r.deletions=null),r.flags=14680064&t.flags,r.childLanes=t.childLanes,r.lanes=t.lanes,r.child=t.child,r.memoizedProps=t.memoizedProps,r.memoizedState=t.memoizedState,r.updateQueue=t.updateQueue,e=t.dependencies,r.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext},r.sibling=t.sibling,r.index=t.index,r.ref=t.ref,r}function Rh(t,e,r,n,i,s){var o=2;if(n=t,"function"==typeof t)Ih(t)&&(o=1);else if("string"==typeof t)o=5;else t:switch(t){case k:return Bh(r.children,i,s,e);case S:o=8,i|=8;break;case E:return(t=Dh(12,r,e,2|i)).elementType=E,t.lanes=s,t;case A:return(t=Dh(13,r,e,i)).elementType=A,t.lanes=s,t;case T:return(t=Dh(19,r,e,i)).elementType=T,t.lanes=s,t;case F:return Lh(r,i,s,e);default:if("object"==typeof t&&null!==t)switch(t.$$typeof){case C:o=10;break t;case M:o=9;break t;case P:o=11;break t;case D:o=14;break t;case I:o=16,n=null;break t}throw Error(a(130,null==t?t:typeof t,""))}return(e=Dh(o,r,e,i)).elementType=t,e.type=n,e.lanes=s,e}function Bh(t,e,r,n){return(t=Dh(7,t,n,e)).lanes=r,t}function Lh(t,e,r,n){return(t=Dh(22,t,n,e)).elementType=F,t.lanes=r,t.stateNode={isHidden:!1},t}function Nh(t,e,r){return(t=Dh(6,t,null,e)).lanes=r,t}function Oh(t,e,r){return(e=Dh(4,null!==t.children?t.children:[],t.key,e)).lanes=r,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}function Vh(t,e,r,n,i){this.tag=e,this.containerInfo=t,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=ge(0),this.expirationTimes=ge(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=ge(0),this.identifierPrefix=n,this.onRecoverableError=i,this.mutableSourceEagerHydrationData=null}function zh(t,e,r,n,i,a,s,o,l){return t=new Vh(t,e,r,o,l),1===e?(e=1,!0===a&&(e|=8)):e=0,a=Dh(3,null,null,e),t.current=a,a.stateNode=t,a.memoizedState={element:n,isDehydrated:r,cache:null,transitions:null,pendingSuspenseBoundaries:null},Da(a),t}function Gh(t,e,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:_,key:null==n?null:""+n,children:t,containerInfo:e,implementation:r}}function jh(t){if(!t)return Mi;t:{if(jt(t=t._reactInternals)!==t||1!==t.tag)throw Error(a(170));var e=t;do{switch(e.tag){case 3:e=e.stateNode.context;break t;case 1:if(Ii(e.type)){e=e.stateNode.__reactInternalMemoizedMergedChildContext;break t}}e=e.return}while(null!==e);throw Error(a(171))}if(1===t.tag){var r=t.type;if(Ii(r))return Bi(t,r,e)}return e}function Hh(t,e,r,n,i,a,s,o,l){return(t=zh(r,n,!0,t,0,a,0,o,l)).context=jh(null),r=t.current,(a=Fa(n=th(),i=eh(r))).callback=null!=e?e:null,Ra(r,a,i),t.current.lanes=i,ye(t,i,n),nh(t,n),t}function qh(t,e,r,n){var i=e.current,a=th(),s=eh(i);return r=jh(r),null===e.context?e.context=r:e.pendingContext=r,(e=Fa(a,s)).payload={element:t},null!==(n=void 0===n?null:n)&&(e.callback=n),null!==(t=Ra(i,e,s))&&(rh(t,i,s,a),Ba(t,i,s)),s}function Wh(t){return(t=t.current).child?(t.child.tag,t.child.stateNode):null}function Uh(t,e){if(null!==(t=t.memoizedState)&&null!==t.dehydrated){var r=t.retryLane;t.retryLane=0!==r&&r<e?r:e}}function $h(t,e){Uh(t,e),(t=t.alternate)&&Uh(t,e)}kl=function(t,e,r){if(null!==t)if(t.memoizedProps!==e.pendingProps||Ai.current)wo=!0;else{if(0==(t.lanes&r)&&0==(128&e.flags))return wo=!1,function(t,e,r){switch(e.tag){case 3:To(e),fa();break;case 5:as(e);break;case 1:Ii(e.type)&&Li(e);break;case 4:ns(e,e.stateNode.containerInfo);break;case 10:var n=e.type._context,i=e.memoizedProps.value;Ci(ya,n._currentValue),n._currentValue=i;break;case 13:if(null!==(n=e.memoizedState))return null!==n.dehydrated?(Ci(os,1&os.current),e.flags|=128,null):0!=(r&e.child.childLanes)?No(t,e,r):(Ci(os,1&os.current),null!==(t=qo(t,e,r))?t.sibling:null);Ci(os,1&os.current);break;case 19:if(n=0!=(r&e.childLanes),0!=(128&t.flags)){if(n)return jo(t,e,r);e.flags|=128}if(null!==(i=e.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),Ci(os,os.current),n)break;return null;case 22:case 23:return e.lanes=0,Eo(t,e,r)}return qo(t,e,r)}(t,e,r);wo=0!=(131072&t.flags)}else wo=!1,ia&&0!=(1048576&e.flags)&&Xi(e,Ui,e.index);switch(e.lanes=0,e.tag){case 2:var n=e.type;Ho(t,e),t=e.pendingProps;var i=Di(e,Pi.current);Sa(e,r),i=ks(null,e,n,t,i,r);var s=Ss();return e.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof?(e.tag=1,e.memoizedState=null,e.updateQueue=null,Ii(n)?(s=!0,Li(e)):s=!1,e.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,Da(e),i.updater=Ga,e.stateNode=i,i._reactInternals=e,Wa(e,n,t,r),e=Ao(null,e,n,!0,s,r)):(e.tag=0,ia&&s&&ta(e),xo(null,e,i,r),e=e.child),e;case 16:n=e.elementType;t:{switch(Ho(t,e),t=e.pendingProps,n=(i=n._init)(n._payload),e.type=n,i=e.tag=function(t){if("function"==typeof t)return Ih(t)?1:0;if(null!=t){if((t=t.$$typeof)===P)return 11;if(t===D)return 14}return 2}(n),t=ga(n,t),i){case 0:e=Mo(null,e,n,t,r);break t;case 1:e=Po(null,e,n,t,r);break t;case 11:e=_o(null,e,n,t,r);break t;case 14:e=ko(null,e,n,ga(n.type,t),r);break t}throw Error(a(306,n,""))}return e;case 0:return n=e.type,i=e.pendingProps,Mo(t,e,n,i=e.elementType===n?i:ga(n,i),r);case 1:return n=e.type,i=e.pendingProps,Po(t,e,n,i=e.elementType===n?i:ga(n,i),r);case 3:t:{if(To(e),null===t)throw Error(a(387));n=e.pendingProps,i=(s=e.memoizedState).element,Ia(t,e),Na(e,n,null,r);var o=e.memoizedState;if(n=o.element,s.isDehydrated){if(s={element:n,isDehydrated:!1,cache:o.cache,pendingSuspenseBoundaries:o.pendingSuspenseBoundaries,transitions:o.transitions},e.updateQueue.baseState=s,e.memoizedState=s,256&e.flags){e=Do(t,e,n,r,i=ho(Error(a(423)),e));break t}if(n!==i){e=Do(t,e,n,r,i=ho(Error(a(424)),e));break t}for(na=hi(e.stateNode.containerInfo.firstChild),ra=e,ia=!0,aa=null,r=Ka(e,null,n,r),e.child=r;r;)r.flags=-3&r.flags|4096,r=r.sibling}else{if(fa(),n===i){e=qo(t,e,r);break t}xo(t,e,n,r)}e=e.child}return e;case 5:return as(e),null===t&&ha(e),n=e.type,i=e.pendingProps,s=null!==t?t.memoizedProps:null,o=i.children,ri(n,i)?o=null:null!==s&&ri(n,s)&&(e.flags|=32),Co(t,e),xo(t,e,o,r),e.child;case 6:return null===t&&ha(e),null;case 13:return No(t,e,r);case 4:return ns(e,e.stateNode.containerInfo),n=e.pendingProps,null===t?e.child=Ya(e,null,n,r):xo(t,e,n,r),e.child;case 11:return n=e.type,i=e.pendingProps,_o(t,e,n,i=e.elementType===n?i:ga(n,i),r);case 7:return xo(t,e,e.pendingProps,r),e.child;case 8:case 12:return xo(t,e,e.pendingProps.children,r),e.child;case 10:t:{if(n=e.type._context,i=e.pendingProps,s=e.memoizedProps,o=i.value,Ci(ya,n._currentValue),n._currentValue=o,null!==s)if(on(s.value,o)){if(s.children===i.children&&!Ai.current){e=qo(t,e,r);break t}}else for(null!==(s=e.child)&&(s.return=e);null!==s;){var l=s.dependencies;if(null!==l){o=s.child;for(var h=l.firstContext;null!==h;){if(h.context===n){if(1===s.tag){(h=Fa(-1,r&-r)).tag=2;var u=s.updateQueue;if(null!==u){var c=(u=u.shared).pending;null===c?h.next=h:(h.next=c.next,c.next=h),u.pending=h}}s.lanes|=r,null!==(h=s.alternate)&&(h.lanes|=r),ka(s.return,r,e),l.lanes|=r;break}h=h.next}}else if(10===s.tag)o=s.type===e.type?null:s.child;else if(18===s.tag){if(null===(o=s.return))throw Error(a(341));o.lanes|=r,null!==(l=o.alternate)&&(l.lanes|=r),ka(o,r,e),o=s.sibling}else o=s.child;if(null!==o)o.return=s;else for(o=s;null!==o;){if(o===e){o=null;break}if(null!==(s=o.sibling)){s.return=o.return,o=s;break}o=o.return}s=o}xo(t,e,i.children,r),e=e.child}return e;case 9:return i=e.type,n=e.pendingProps.children,Sa(e,r),n=n(i=Ea(i)),e.flags|=1,xo(t,e,n,r),e.child;case 14:return i=ga(n=e.type,e.pendingProps),ko(t,e,n,i=ga(n.type,i),r);case 15:return So(t,e,e.type,e.pendingProps,r);case 17:return n=e.type,i=e.pendingProps,i=e.elementType===n?i:ga(n,i),Ho(t,e),e.tag=1,Ii(n)?(t=!0,Li(e)):t=!1,Sa(e,r),Ha(e,n,i),Wa(e,n,i,r),Ao(null,e,n,!0,t,r);case 19:return jo(t,e,r);case 22:return Eo(t,e,r)}throw Error(a(156,e.tag))};var Zh="function"==typeof reportError?reportError:function(t){console.error(t)};function Qh(t){this._internalRoot=t}function Yh(t){this._internalRoot=t}function Kh(t){return!(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)}function Jh(t){return!(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType&&(8!==t.nodeType||" react-mount-point-unstable "!==t.nodeValue))}function Xh(){}function tu(t,e,r,n,i){var a=r._reactRootContainer;if(a){var s=a;if("function"==typeof i){var o=i;i=function(){var t=Wh(s);o.call(t)}}qh(e,s,t,i)}else s=function(t,e,r,n,i){if(i){if("function"==typeof n){var a=n;n=function(){var t=Wh(s);a.call(t)}}var s=Hh(e,n,t,0,null,!1,0,"",Xh);return t._reactRootContainer=s,t[di]=s.current,jn(8===t.nodeType?t.parentNode:t),uh(),s}for(;i=t.lastChild;)t.removeChild(i);if("function"==typeof n){var o=n;n=function(){var t=Wh(l);o.call(t)}}var l=zh(t,0,!1,null,0,!1,0,"",Xh);return t._reactRootContainer=l,t[di]=l.current,jn(8===t.nodeType?t.parentNode:t),uh((function(){qh(e,l,r,n)})),l}(r,e,t,i,n);return Wh(s)}Yh.prototype.render=Qh.prototype.render=function(t){var e=this._internalRoot;if(null===e)throw Error(a(409));qh(t,e,null,null)},Yh.prototype.unmount=Qh.prototype.unmount=function(){var t=this._internalRoot;if(null!==t){this._internalRoot=null;var e=t.containerInfo;uh((function(){qh(null,t,null,null)})),e[di]=null}},Yh.prototype.unstable_scheduleHydration=function(t){if(t){var e=Se();t={blockedOn:null,target:t,priority:e};for(var r=0;r<Fe.length&&0!==e&&e<Fe[r].priority;r++);Fe.splice(r,0,t),0===r&&Ne(t)}},xe=function(t){switch(t.tag){case 3:var e=t.stateNode;if(e.current.memoizedState.isDehydrated){var r=ce(e.pendingLanes);0!==r&&(ve(e,1|r),nh(e,Kt()),0==(6&Pl)&&(jl=Kt()+500,ji()))}break;case 13:uh((function(){var e=Aa(t,1);if(null!==e){var r=th();rh(e,t,1,r)}})),$h(t,1)}},_e=function(t){if(13===t.tag){var e=Aa(t,134217728);null!==e&&rh(e,t,134217728,th()),$h(t,134217728)}},ke=function(t){if(13===t.tag){var e=eh(t),r=Aa(t,e);null!==r&&rh(r,t,e,th()),$h(t,e)}},Se=function(){return be},Ee=function(t,e){var r=be;try{return be=t,e()}finally{be=r}},_t=function(t,e,r){switch(e){case"input":if(J(t,r),e=r.name,"radio"===r.type&&null!=e){for(r=t;r.parentNode;)r=r.parentNode;for(r=r.querySelectorAll("input[name="+JSON.stringify(""+e)+'][type="radio"]'),e=0;e<r.length;e++){var n=r[e];if(n!==t&&n.form===t.form){var i=xi(n);if(!i)throw Error(a(90));$(n),J(n,i)}}}break;case"textarea":at(t,r);break;case"select":null!=(e=r.value)&&rt(t,!!r.multiple,e,!1)}},Pt=hh,At=uh;var eu={usingClientEntryPoint:!1,Events:[bi,wi,xi,Ct,Mt,hh]},ru={findFiberByHostInstance:vi,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},nu={bundleType:ru.bundleType,version:ru.version,rendererPackageName:ru.rendererPackageName,rendererConfig:ru.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(t){return null===(t=Wt(t))?null:t.stateNode},findFiberByHostInstance:ru.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var iu=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!iu.isDisabled&&iu.supportsFiber)try{ie=iu.inject(nu),ae=iu}catch(ut){}}e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=eu,e.createPortal=function(t,e){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Kh(e))throw Error(a(200));return Gh(t,e,null,r)},e.createRoot=function(t,e){if(!Kh(t))throw Error(a(299));var r=!1,n="",i=Zh;return null!=e&&(!0===e.unstable_strictMode&&(r=!0),void 0!==e.identifierPrefix&&(n=e.identifierPrefix),void 0!==e.onRecoverableError&&(i=e.onRecoverableError)),e=zh(t,1,!1,null,0,r,0,n,i),t[di]=e.current,jn(8===t.nodeType?t.parentNode:t),new Qh(e)},e.findDOMNode=function(t){if(null==t)return null;if(1===t.nodeType)return t;var e=t._reactInternals;if(void 0===e){if("function"==typeof t.render)throw Error(a(188));throw t=Object.keys(t).join(","),Error(a(268,t))}return null===(t=Wt(e))?null:t.stateNode},e.flushSync=function(t){return uh(t)},e.hydrate=function(t,e,r){if(!Jh(e))throw Error(a(200));return tu(null,t,e,!0,r)},e.hydrateRoot=function(t,e,r){if(!Kh(t))throw Error(a(405));var n=null!=r&&r.hydratedSources||null,i=!1,s="",o=Zh;if(null!=r&&(!0===r.unstable_strictMode&&(i=!0),void 0!==r.identifierPrefix&&(s=r.identifierPrefix),void 0!==r.onRecoverableError&&(o=r.onRecoverableError)),e=Hh(e,null,t,1,null!=r?r:null,i,0,s,o),t[di]=e.current,jn(t),n)for(t=0;t<n.length;t++)i=(i=(r=n[t])._getVersion)(r._source),null==e.mutableSourceEagerHydrationData?e.mutableSourceEagerHydrationData=[r,i]:e.mutableSourceEagerHydrationData.push(r,i);return new Yh(e)},e.render=function(t,e,r){if(!Jh(e))throw Error(a(200));return tu(null,t,e,!1,r)},e.unmountComponentAtNode=function(t){if(!Jh(t))throw Error(a(40));return!!t._reactRootContainer&&(uh((function(){tu(null,null,t,!1,(function(){t._reactRootContainer=null,t[di]=null}))})),!0)},e.unstable_batchedUpdates=hh,e.unstable_renderSubtreeIntoContainer=function(t,e,r,n){if(!Jh(r))throw Error(a(200));if(null==t||void 0===t._reactInternals)throw Error(a(38));return tu(t,e,r,!1,n)},e.version="18.2.0-next-9e3b772b8-20220608"},745:(t,e,r)=>{"use strict";var n=r(3935);e.createRoot=n.createRoot,e.hydrateRoot=n.hydrateRoot},3935:(t,e,r)=>{"use strict";!function t(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(t)}catch(t){console.error(t)}}(),t.exports=r(3101)},5718:function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},n(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0}),e.QRCode=void 0;var a=r(2307),s=r(6192),o=r(7294),l=r(3935),h=function(t){function e(e){var r=t.call(this,e)||this;return r.canvas=o.createRef(),r}return i(e,t),e.utf16to8=function(t){var e,r,n="",i=t.length;for(e=0;e<i;e++)(r=t.charCodeAt(e))>=1&&r<=127?n+=t.charAt(e):r>2047?(n+=String.fromCharCode(224|r>>12&15),n+=String.fromCharCode(128|r>>6&63),n+=String.fromCharCode(128|r>>0&63)):(n+=String.fromCharCode(192|r>>6&31),n+=String.fromCharCode(128|r>>0&63));return n},e.prototype.drawRoundedSquare=function(t,e,r,n,i,a,s){s.lineWidth=t,r+=t/2,e+=t/2,n-=t,Array.isArray(i)||(i=[i,i,i,i]);var o=(i=i.map((function(t){return(t=Math.min(t,n/2))<0?0:t})))[0]||0,l=i[1]||0,h=i[2]||0,u=i[3]||0;s.beginPath(),s.moveTo(e+o,r),s.lineTo(e+n-l,r),l&&s.quadraticCurveTo(e+n,r,e+n,r+l),s.lineTo(e+n,r+n-h),h&&s.quadraticCurveTo(e+n,r+n,e+n-h,r+n),s.lineTo(e+u,r+n),u&&s.quadraticCurveTo(e,r+n,e,r+n-u),s.lineTo(e,r+o),o&&s.quadraticCurveTo(e,r,e+o,r),s.closePath(),s.stroke(),a&&s.fill()},e.prototype.drawPositioningPattern=function(t,e,r,n,i,a){void 0===a&&(a=[0,0,0,0]);var s,o,l=Math.ceil(e);"number"==typeof a||Array.isArray(a)?o=s=a:(s=a.outer||0,o=a.inner||0);var h=n*e+r,u=i*e+r,c=7*e;this.drawRoundedSquare(l,u,h,c,s,!1,t),c=3*e,h+=2*e,u+=2*e,this.drawRoundedSquare(l,u,h,c,o,!0,t)},e.prototype.isInPositioninZone=function(t,e,r){return r.some((function(r){return e>=r.row&&e<=r.row+7&&t>=r.col&&t<=r.col+7}))},e.prototype.transformPixelLengthIntoNumberOfCells=function(t,e){return t/e},e.prototype.isCoordinateInImage=function(t,e,r,n,i,a,s,o){if(o){var l=this.transformPixelLengthIntoNumberOfCells(i,s),h=this.transformPixelLengthIntoNumberOfCells(a,s),u=this.transformPixelLengthIntoNumberOfCells(r,s)-1,c=this.transformPixelLengthIntoNumberOfCells(n,s)-1;return e>=l-2&&e<=l+u+2&&t>=h-2&&t<=h+c+2}return!1},e.prototype.shouldComponentUpdate=function(t){return!a(this.props,t)},e.prototype.componentDidMount=function(){this.update()},e.prototype.componentDidUpdate=function(){this.update()},e.prototype.update=function(){var t=this.props,r=t.value,n=t.ecLevel,i=t.enableCORS,a=t.size,o=t.quietZone,h=t.bgColor,u=t.fgColor,c=t.logoImage,p=t.logoWidth,f=t.logoHeight,d=t.logoOpacity,m=t.removeQrCodeBehindLogo,g=t.qrStyle,y=t.eyeRadius,v=s(0,n);v.addData(e.utf16to8(r)),v.make();var b=l.findDOMNode(this.canvas.current),w=b.getContext("2d"),x=+a+2*+o,_=v.getModuleCount(),k=a/_,S=window.devicePixelRatio||1;b.height=b.width=x*S,w.scale(S,S),w.fillStyle=h,w.fillRect(0,0,x,x);var E=+o,C=p||.2*a,M=f||C,P=(a-C)/2,A=(a-M)/2,T=[{row:0,col:0},{row:0,col:_-7},{row:_-7,col:0}];if(w.strokeStyle=u,"dots"===g){w.fillStyle=u;for(var D=k/2,I=0;I<_;I++)for(var F=0;F<_;F++)!v.isDark(I,F)||this.isInPositioninZone(I,F,T)||m&&this.isCoordinateInImage(I,F,C,M,P,A,k,c)||(w.beginPath(),w.arc(Math.round(F*k)+D+E,Math.round(I*k)+D+E,D/100*75,0,2*Math.PI,!1),w.closePath(),w.fill())}else for(I=0;I<_;I++)for(F=0;F<_;F++)if(v.isDark(I,F)&&!this.isInPositioninZone(I,F,T)&&(!m||!this.isCoordinateInImage(I,F,C,M,P,A,k,c))){w.fillStyle=u;var R=Math.ceil((F+1)*k)-Math.floor(F*k),B=Math.ceil((I+1)*k)-Math.floor(I*k);w.fillRect(Math.round(F*k)+E,Math.round(I*k)+E,R,B)}for(var L=0;L<3;L++){var N=T[L],O=(I=N.row,F=N.col,y);Array.isArray(O)&&(O=O[L]),"number"==typeof O&&(O=[O,O,O,O]),this.drawPositioningPattern(w,k,E,I,F,O)}if(c){var V=new Image;i&&(V.crossOrigin="Anonymous"),V.onload=function(){w.save(),w.globalAlpha=d,w.drawImage(V,P+E,A+E,C,M),w.restore()},V.src=c}},e.prototype.render=function(){var t,e=+this.props.size+2*+this.props.quietZone;return o.createElement("canvas",{id:null!==(t=this.props.id)&&void 0!==t?t:"react-qrcode-logo",height:e,width:e,style:{height:e+"px",width:e+"px"},ref:this.canvas})},e.defaultProps={value:"https://reactjs.org/",ecLevel:"M",enableCORS:!1,size:150,quietZone:10,bgColor:"#FFFFFF",fgColor:"#000000",logoOpacity:1,removeQrCodeBehindLogo:!1,qrStyle:"squares",eyeRadius:[]},e}(o.Component);e.QRCode=h},2408:(t,e)=>{"use strict";var r=Symbol.for("react.element"),n=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),s=Symbol.for("react.profiler"),o=Symbol.for("react.provider"),l=Symbol.for("react.context"),h=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),c=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),f=Symbol.iterator,d={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function y(t,e,r){this.props=t,this.context=e,this.refs=g,this.updater=r||d}function v(){}function b(t,e,r){this.props=t,this.context=e,this.refs=g,this.updater=r||d}y.prototype.isReactComponent={},y.prototype.setState=function(t,e){if("object"!=typeof t&&"function"!=typeof t&&null!=t)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,t,e,"setState")},y.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},v.prototype=y.prototype;var w=b.prototype=new v;w.constructor=b,m(w,y.prototype),w.isPureReactComponent=!0;var x=Array.isArray,_=Object.prototype.hasOwnProperty,k={current:null},S={key:!0,ref:!0,__self:!0,__source:!0};function E(t,e,n){var i,a={},s=null,o=null;if(null!=e)for(i in void 0!==e.ref&&(o=e.ref),void 0!==e.key&&(s=""+e.key),e)_.call(e,i)&&!S.hasOwnProperty(i)&&(a[i]=e[i]);var l=arguments.length-2;if(1===l)a.children=n;else if(1<l){for(var h=Array(l),u=0;u<l;u++)h[u]=arguments[u+2];a.children=h}if(t&&t.defaultProps)for(i in l=t.defaultProps)void 0===a[i]&&(a[i]=l[i]);return{$$typeof:r,type:t,key:s,ref:o,props:a,_owner:k.current}}function C(t){return"object"==typeof t&&null!==t&&t.$$typeof===r}var M=/\/+/g;function P(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+t.replace(/[=:]/g,(function(t){return e[t]}))}(""+t.key):e.toString(36)}function A(t,e,i,a,s){var o=typeof t;"undefined"!==o&&"boolean"!==o||(t=null);var l=!1;if(null===t)l=!0;else switch(o){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case r:case n:l=!0}}if(l)return s=s(l=t),t=""===a?"."+P(l,0):a,x(s)?(i="",null!=t&&(i=t.replace(M,"$&/")+"/"),A(s,e,i,"",(function(t){return t}))):null!=s&&(C(s)&&(s=function(t,e){return{$$typeof:r,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}(s,i+(!s.key||l&&l.key===s.key?"":(""+s.key).replace(M,"$&/")+"/")+t)),e.push(s)),1;if(l=0,a=""===a?".":a+":",x(t))for(var h=0;h<t.length;h++){var u=a+P(o=t[h],h);l+=A(o,e,i,u,s)}else if(u=function(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=f&&t[f]||t["@@iterator"])?t:null}(t),"function"==typeof u)for(t=u.call(t),h=0;!(o=t.next()).done;)l+=A(o=o.value,e,i,u=a+P(o,h++),s);else if("object"===o)throw e=String(t),Error("Objects are not valid as a React child (found: "+("[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e)+"). If you meant to render a collection of children, use an array instead.");return l}function T(t,e,r){if(null==t)return t;var n=[],i=0;return A(t,n,"","",(function(t){return e.call(r,t,i++)})),n}function D(t){if(-1===t._status){var e=t._result;(e=e()).then((function(e){0!==t._status&&-1!==t._status||(t._status=1,t._result=e)}),(function(e){0!==t._status&&-1!==t._status||(t._status=2,t._result=e)})),-1===t._status&&(t._status=0,t._result=e)}if(1===t._status)return t._result.default;throw t._result}var I={current:null},F={transition:null},R={ReactCurrentDispatcher:I,ReactCurrentBatchConfig:F,ReactCurrentOwner:k};e.Children={map:T,forEach:function(t,e,r){T(t,(function(){e.apply(this,arguments)}),r)},count:function(t){var e=0;return T(t,(function(){e++})),e},toArray:function(t){return T(t,(function(t){return t}))||[]},only:function(t){if(!C(t))throw Error("React.Children.only expected to receive a single React element child.");return t}},e.Component=y,e.Fragment=i,e.Profiler=s,e.PureComponent=b,e.StrictMode=a,e.Suspense=u,e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,e.cloneElement=function(t,e,n){if(null==t)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+t+".");var i=m({},t.props),a=t.key,s=t.ref,o=t._owner;if(null!=e){if(void 0!==e.ref&&(s=e.ref,o=k.current),void 0!==e.key&&(a=""+e.key),t.type&&t.type.defaultProps)var l=t.type.defaultProps;for(h in e)_.call(e,h)&&!S.hasOwnProperty(h)&&(i[h]=void 0===e[h]&&void 0!==l?l[h]:e[h])}var h=arguments.length-2;if(1===h)i.children=n;else if(1<h){l=Array(h);for(var u=0;u<h;u++)l[u]=arguments[u+2];i.children=l}return{$$typeof:r,type:t.type,key:a,ref:s,props:i,_owner:o}},e.createContext=function(t){return(t={$$typeof:l,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:o,_context:t},t.Consumer=t},e.createElement=E,e.createFactory=function(t){var e=E.bind(null,t);return e.type=t,e},e.createRef=function(){return{current:null}},e.forwardRef=function(t){return{$$typeof:h,render:t}},e.isValidElement=C,e.lazy=function(t){return{$$typeof:p,_payload:{_status:-1,_result:t},_init:D}},e.memo=function(t,e){return{$$typeof:c,type:t,compare:void 0===e?null:e}},e.startTransition=function(t){var e=F.transition;F.transition={};try{t()}finally{F.transition=e}},e.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},e.useCallback=function(t,e){return I.current.useCallback(t,e)},e.useContext=function(t){return I.current.useContext(t)},e.useDebugValue=function(){},e.useDeferredValue=function(t){return I.current.useDeferredValue(t)},e.useEffect=function(t,e){return I.current.useEffect(t,e)},e.useId=function(){return I.current.useId()},e.useImperativeHandle=function(t,e,r){return I.current.useImperativeHandle(t,e,r)},e.useInsertionEffect=function(t,e){return I.current.useInsertionEffect(t,e)},e.useLayoutEffect=function(t,e){return I.current.useLayoutEffect(t,e)},e.useMemo=function(t,e){return I.current.useMemo(t,e)},e.useReducer=function(t,e,r){return I.current.useReducer(t,e,r)},e.useRef=function(t){return I.current.useRef(t)},e.useState=function(t){return I.current.useState(t)},e.useSyncExternalStore=function(t,e,r){return I.current.useSyncExternalStore(t,e,r)},e.useTransition=function(){return I.current.useTransition()},e.version="18.2.0"},7294:(t,e,r)=>{"use strict";t.exports=r(2408)},53:(t,e)=>{"use strict";function r(t,e){var r=t.length;t.push(e);t:for(;0<r;){var n=r-1>>>1,i=t[n];if(!(0<a(i,e)))break t;t[n]=e,t[r]=i,r=n}}function n(t){return 0===t.length?null:t[0]}function i(t){if(0===t.length)return null;var e=t[0],r=t.pop();if(r!==e){t[0]=r;t:for(var n=0,i=t.length,s=i>>>1;n<s;){var o=2*(n+1)-1,l=t[o],h=o+1,u=t[h];if(0>a(l,r))h<i&&0>a(u,l)?(t[n]=u,t[h]=r,n=h):(t[n]=l,t[o]=r,n=o);else{if(!(h<i&&0>a(u,r)))break t;t[n]=u,t[h]=r,n=h}}}return e}function a(t,e){var r=t.sortIndex-e.sortIndex;return 0!==r?r:t.id-e.id}if("object"==typeof performance&&"function"==typeof performance.now){var s=performance;e.unstable_now=function(){return s.now()}}else{var o=Date,l=o.now();e.unstable_now=function(){return o.now()-l}}var h=[],u=[],c=1,p=null,f=3,d=!1,m=!1,g=!1,y="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(t){for(var e=n(u);null!==e;){if(null===e.callback)i(u);else{if(!(e.startTime<=t))break;i(u),e.sortIndex=e.expirationTime,r(h,e)}e=n(u)}}function x(t){if(g=!1,w(t),!m)if(null!==n(h))m=!0,F(_);else{var e=n(u);null!==e&&R(x,e.startTime-t)}}function _(t,r){m=!1,g&&(g=!1,v(C),C=-1),d=!0;var a=f;try{for(w(r),p=n(h);null!==p&&(!(p.expirationTime>r)||t&&!A());){var s=p.callback;if("function"==typeof s){p.callback=null,f=p.priorityLevel;var o=s(p.expirationTime<=r);r=e.unstable_now(),"function"==typeof o?p.callback=o:p===n(h)&&i(h),w(r)}else i(h);p=n(h)}if(null!==p)var l=!0;else{var c=n(u);null!==c&&R(x,c.startTime-r),l=!1}return l}finally{p=null,f=a,d=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var k,S=!1,E=null,C=-1,M=5,P=-1;function A(){return!(e.unstable_now()-P<M)}function T(){if(null!==E){var t=e.unstable_now();P=t;var r=!0;try{r=E(!0,t)}finally{r?k():(S=!1,E=null)}}else S=!1}if("function"==typeof b)k=function(){b(T)};else if("undefined"!=typeof MessageChannel){var D=new MessageChannel,I=D.port2;D.port1.onmessage=T,k=function(){I.postMessage(null)}}else k=function(){y(T,0)};function F(t){E=t,S||(S=!0,k())}function R(t,r){C=y((function(){t(e.unstable_now())}),r)}e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(t){t.callback=null},e.unstable_continueExecution=function(){m||d||(m=!0,F(_))},e.unstable_forceFrameRate=function(t){0>t||125<t?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):M=0<t?Math.floor(1e3/t):5},e.unstable_getCurrentPriorityLevel=function(){return f},e.unstable_getFirstCallbackNode=function(){return n(h)},e.unstable_next=function(t){switch(f){case 1:case 2:case 3:var e=3;break;default:e=f}var r=f;f=e;try{return t()}finally{f=r}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=function(){},e.unstable_runWithPriority=function(t,e){switch(t){case 1:case 2:case 3:case 4:case 5:break;default:t=3}var r=f;f=t;try{return e()}finally{f=r}},e.unstable_scheduleCallback=function(t,i,a){var s=e.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?s+a:s,t){case 1:var o=-1;break;case 2:o=250;break;case 5:o=1073741823;break;case 4:o=1e4;break;default:o=5e3}return t={id:c++,callback:i,priorityLevel:t,startTime:a,expirationTime:o=a+o,sortIndex:-1},a>s?(t.sortIndex=a,r(u,t),null===n(h)&&t===n(u)&&(g?(v(C),C=-1):g=!0,R(x,a-s))):(t.sortIndex=o,r(h,t),m||d||(m=!0,F(_))),t},e.unstable_shouldYield=A,e.unstable_wrapCallback=function(t){var e=f;return function(){var r=f;f=e;try{return t.apply(this,arguments)}finally{f=r}}}},3840:(t,e,r)=>{"use strict";t.exports=r(53)},500:t=>{"use strict";t.exports=(t,e)=>{if("string"!=typeof t||"string"!=typeof e)throw new TypeError("Expected the arguments to be of type `string`");if(""===e)return[t];const r=t.indexOf(e);return-1===r?[t]:[t.slice(0,r),t.slice(r+e.length)]}},610:t=>{"use strict";t.exports=t=>encodeURIComponent(t).replace(/[!'()*]/g,(t=>`%${t.charCodeAt(0).toString(16).toUpperCase()}`))},5054:(t,e,r)=>{var n=r(8764).Buffer,i=r(4501).strict;t.exports=function(t){if(i(t)){var e=n.from(t.buffer);return t.byteLength!==t.buffer.byteLength&&(e=e.slice(t.byteOffset,t.byteOffset+t.byteLength)),e}return n.from(t)}},7026:t=>{"use strict";t.exports=function(){throw new Error("ws does not work in the browser. Browser clients must use the native WebSocket object")}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,