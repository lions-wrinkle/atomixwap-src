"use strict";(self.webpackChunkatomixwap=self.webpackChunkatomixwap||[]).push([[948],{1948:(e,t,s)=>{s.r(t),s.d(t,{SwapLinkForm:()=>l});var i=s(4050),a=s.n(i),r=s(2592),n=s(9182);class l{constructor(e,t,s,i,a){this.ui=document.createElement("div"),this.defaultRoyalties=t,this.submitCallback=s,this.walletConnect=i,this.algoIndexer=a,this.data={},this.isAssetCreator=!1,this.numNfts=0,this.ndfWalletAddress,this.ui.innerHTML=`<h4>Create swap link</h4>\n        <form>\n                    <div class="mb-3" id="nfts">\n                    </div>\n                    <div class="mb-3">\n                        <label for="inputAlgoAddress" class="form-label">Receiver</label>\n                        <input type="text" class="form-control" id="inputAlgoAddress"\n                            aria-describedby="AlgoAddressdHelp" required>\n                        <div id="AlgoAddressdHelp" class="form-text">Algorand Wallet Address or NFD</div>\n                    </div>\n                    <div class="mb-3">\n                        <div class="row">\n                        <label for="inputPrice" class="form-label" id="price-label">Price</label>\n                        <label for="inputPriceAssetId" class="form-label" id="nft-label" hidden>NFT to receive</label>\n                            <div class="col" id="price-div">\n                                <input type="number" class="form-control" id="inputPrice" min="0" step="1">\n                            </div>\n                            <div class="col" id="nft-div" hidden>\n                                <input type="text" class="form-control" id="inputPriceAssetId" aria-describedby="priceAssetIdHelp"\n                                    pattern="\\d*">\n                                <div id="priceAssetIdHelp" class="form-text">ASA asset ID</div>\n                            </div>\n                            <div class="col">\n                                <select class="form-select" id="inputCurrency" aria-label="Select currency">\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="mb-3">\n                      <div class="row">\n                        <div class="col-6">\n                          <div class="d-flex justify-content-between">\n                          <label for="inputRoyalties" class="form-label">Creator royalty</label>\n                          <span id="royaltiesValueLabel" class="royalties">0&percnt;</span>\n                      </div>\n\n                      <input type="range" class="form-range" value="${this.defaultRoyalties}" min="0" max="10" step="0.5" id="inputRoyalties"\n                          aria-describedby="royaltiesdHelp">\n                      <div id="royaltiesdHelp" class="form-text"></div>\n                        </div>\n                        <div class="col-6 position-relative">\n                        <span class="position-absolute heart" id="royaltiesLoveRed" hidden>&#10084;</span>\n                        <span class="position-absolute heart" id="royaltiesLoveGreen">&#128154;</span>\n                        \n                        </div>\n                      </div>\n                       \n                    </div>\n                    <div class="mb-3 form-check">\n                        <input type="checkbox" class="form-check-input" id="checkAcceptRisk" required>\n                        <label class="form-check-label" for="checkAcceptRisk">I accept to use this tool at my own\n                            risk</label>\n                    </div>\n                    <button type="submit" id="buttonSubmit" class="btn btn-generate fw-bold">Preview</button>\n\n\n                </form>`,this.addNFT();const r=this.ui.querySelector("#inputCurrency"),n=document.createElement("option");n.textContent="ALGO",n.value="algo",n.selected=!0,r.append(n);const l=document.createElement("option");l.textContent="NFT",l.value="nft",r.append(l);const o=document.createElement("optgroup");o.label="ASAs",r.append(o);for(const t of e){const e=document.createElement("option");e.textContent=t.name,e.value=t.assetId,o.append(e)}this.ui.querySelector("#inputRoyalties").addEventListener("input",this.royaltiesChange.bind(this),!1),this.ui.querySelector("#inputCurrency").addEventListener("change",this.currencyChange.bind(this),!1),this.ui.querySelector("form").addEventListener("submit",this.submitForm.bind(this),!1),this.ui.querySelector("#inputAlgoAddress").addEventListener("focusout",this.checkNfd.bind(this),!1),this.ui.querySelector("#inputRoyalties").dispatchEvent(new Event("input"))}addNFT(e){if(e&&e.currentTarget&&(e.currentTarget.hidden=!0),this.numNfts>=n.Z.maxNfts)return;const t=this.ui.querySelector("#nfts"),s=document.createElement("div");s.className="row mt-2",s.innerHTML=`\n      <div class="col-6">\n        <label for="inputAssetId" class="form-label">NFT</label>\n        <input type="text" class="form-control" id="inputAssetId" data-id="${this.numNfts}" aria-describedby="assetIdHelp"\n            pattern="\\d*">\n        <div id="assetIdHelp" class="form-text">ASA asset ID</div>\n      </div>\n      <div class="col-1">\n        <br>\n        <a href="javascript:void(0);" id="add-nft" hidden>\n          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus-square mt-3" viewBox="0 0 16 16">\n            <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"/>\n            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>\n          </svg>\n        </a>\n      </div>\n      <div class="col-5 text-center">\n        <img src="default.png" id="imgAssetPreview" width="auto" height="95">\n      </div>\n    `;const i=s.querySelector("#inputAssetId");0===this.numNfts&&(i.required=!0),i.addEventListener("focusout",this.assetIdFocusOut.bind(this),!1);const a=s.querySelector("#add-nft");this.numNfts<n.Z.maxNfts-1&&(a.hidden=!1,a.addEventListener("click",this.addNFT.bind(this),!1)),t.append(s),this.numNfts++}async assetIdFocusOut(e){const t=e.currentTarget;this.displayAssetInfo(t)}async displayAssetInfo(e){const t=e.parentNode.parentNode,s=t.querySelector("#assetIdHelp"),i=t.querySelector("#imgAssetPreview"),a=this.ui.querySelector("#inputRoyalties"),n=this.ui.querySelector("#royaltiesdHelp"),l=parseInt(e.value);if(isNaN(l))s.innerHTML='<span class="text-danger">Wrong asset ID format</span>',a.disabled=!1,n.textContent="";else{try{const e=await this.algoIndexer.lookupAssetByID(l).do();s.innerHTML=`<span class="text-success">${e.asset.params.name} (${e.asset.params["unit-name"]})</span>`,e.asset.params.creator===this.walletConnect.walletAddress?this.isAssetCreator=!0:this.isAssetCreator=!1}catch(e){console.log(e),s.innerHTML=`<span class="text-danger">Error: Asset with ID ${l} not found</span>`,this.isAssetCreator=!1}this.checkRoyaltiesAvailability(),(0,r.g)(l,i,200)}}async checkNfd(e){const t=e.currentTarget.value,s=this.ui.querySelector("#AlgoAddressdHelp");if(this.ndfWalletAddress=void 0,t.endsWith(".algo"))try{const e=await fetch("https://api.nf.domains/nfd/"+t);if(200===e.status){const t=await e.json();t.owner&&(s.innerHTML=`<span class="text-success">${t.owner}</span>`,this.ndfWalletAddress=t.owner)}else s.innerHTML=`<span class="text-danger">Error: NFD ${t} not found</span>`}catch(e){console.error(e),s.innerHTML='<span class="text-danger">Error: Can\'t load NFD</span>'}else a().isValidAddress(t)?s.textContent="Algorand Wallet Address or NFD":s.innerHTML='<span class="text-danger">Wrong wallet address format</span>'}currencyChange(e){const t=e.currentTarget.value,s=this.ui.querySelector("#nft-div"),i=this.ui.querySelector("#nft-label"),a=this.ui.querySelector("#price-div"),r=this.ui.querySelector("#price-label");"nft"===t?(s.hidden=!1,i.hidden=!1,s.querySelector("input").required=!0,a.hidden=!0,r.hidden=!0,a.querySelector("input").required=!1):(s.hidden=!0,i.hidden=!0,s.querySelector("input").required=!1,a.hidden=!1,r.hidden=!1,a.querySelector("input").required=!0),this.checkRoyaltiesAvailability()}async checkRoyaltiesAvailability(){const e=this.ui.querySelector("#inputCurrency"),t=this.ui.querySelector("#inputRoyalties"),s=this.ui.querySelector("#royaltiesdHelp"),i=this.ui.querySelector("#royaltiesLoveGreen"),a=this.ui.querySelector("#royaltiesLoveRed");let r=!1;if(this.numNfts>1){let e="";console.log("--");for(const t of this.ui.querySelectorAll("#inputAssetId"))if(t.value&&!isNaN(t.value))try{const s=await this.algoIndexer.lookupAssetByID(parseInt(t.value)).do();console.log(s.asset.params.creator),e&&e!=s.asset.params.creator&&(r=!0),e=s.asset.params.creator}catch(e){console.error(e)}}console.log(r),"algo"!==e.value||this.isAssetCreator||r?(t.value=0,t.disabled=!0,"algo"!==e.value?s.textContent="Royalty not available for other token than Algo":this.isAssetCreator?s.textContent="You're the creator of this asset, royalty disabled.":r&&(s.textContent="Multiple creators detected, royalty disabled."),i.hidden=!0,a.hidden=!0):(t.disabled=!1,s.textContent="",i.hidden=!1),t.dispatchEvent(new Event("input"))}royaltiesChange(e){const t=this.ui.querySelector("#inputRoyalties");this.ui.querySelector("#royaltiesValueLabel").textContent=`${t.value} %`;const s=this.ui.querySelector("#royaltiesLoveGreen"),i=this.ui.querySelector("#royaltiesLoveRed"),a=Number(t.min),r=Number(t.max),n=1+(t.value-t.min)/(t.max-t.min)*3.5;if(s.style=`font-size: ${n}rem`,t.value>a+(r-a)/2){const e=(t.value-(a+(r-a)/2))/((r-a)/2);let l="";t.value===t.max&&(l="animation: animateHeart 1.2s infinite;"),i.hidden=!1,i.style=`font-size: ${n}rem; ${l}`,s.style=`font-size: ${n}rem; opacity: ${1-e}`}else i.hidden=!0}async validate(){await this.checkRoyaltiesAvailability();const e=[];if(this.ui.querySelectorAll("#inputAssetId").forEach((async t=>{if(t.value&&!isNaN(t.value))e.push(parseInt(t.value,10)),await this.displayAssetInfo(t);else if(t.value&&isNaN(t.value))throw new Error(`Wrong format for asset id ${t.value}`)})),this.data.assetIds=e,this.data.buyerAddress=this.ui.querySelector("#inputAlgoAddress").value,this.data.price=this.ui.querySelector("#inputPrice").value,this.data.currency=this.ui.querySelector("#inputCurrency").value,this.data.royaltiesPercent=this.ui.querySelector("#inputRoyalties").value,this.data.acceptRisk=this.ui.querySelector("#checkAcceptRisk").checked,0===this.data.assetIds.length)throw new Error("No asset id provided or wrong format");if(this.data.buyerAddress.endsWith(".algo")&&!this.ndfWalletAddress)throw new Error("NFD not found");if(!this.data.buyerAddress.endsWith(".algo")&&!a().isValidAddress(this.data.buyerAddress))throw new Error("Algorand wallet address is not valid");if(isNaN(this.data.price))throw new Error("Price is not a number");if(isNaN(this.data.royaltiesPercent))throw new Error("Royalties value is not a number");if(!this.data.acceptRisk)throw new Error("Risk not accepted");if("nft"===this.data.currency&&isNaN(this.ui.querySelector("#inputPriceAssetId").value))throw new Error(`Wrong format for asset id ${this.ui.querySelector("#inputPriceAssetId").value}`);this.data.buyerAddress.endsWith(".algo")&&(this.data.buyerAddress=this.ndfWalletAddress),this.data.priceAssetId=parseInt(this.ui.querySelector("#inputPriceAssetId").value)}async submitForm(e){e.preventDefault();try{await this.validate()}catch(e){return void alert(e)}this.submitCallback&&this.submitCallback(this)}makeBusy(){const e=this.ui.querySelector("#buttonSubmit");e.disabled=!0,e.innerHTML='<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>\n    Preview'}stopBusy(){const e=this.ui.querySelector("#buttonSubmit");e.textContent="Preview",e.disabled=!1}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,