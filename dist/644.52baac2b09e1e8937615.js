"use strict";(self.webpackChunkatomixwap=self.webpackChunkatomixwap||[]).push([[644],{644:(t,e,s)=>{s.r(e),s.d(e,{Claim:()=>o});var a=s(4050),n=s.n(a),i=s(9182),l=s(2592);class r{constructor(t,e){this.API_URL=i.Z.urls[i.Z.network].claimApiUrl,this.walletConnect=t,this.algodClient=e,this.claimables,this.suggestedParams,this.escrowAddress}async load(){const t=await fetch(this.API_URL+"/claim/get?recipient="+this.walletConnect.walletAddress),e=await t.json();this.claimables=e.claimables,this.suggestedParams=e.suggestedParams,this.escrowAddress=e.escrowAddress;for(const t of this.claimables){const e=await this.algodClient.getAssetByID(t.assetId).do();t.params=e.params}}getClaimablesUI(){let t=0,e=[];const s=document.createElement("div");let a,n,i=0;for(const r of this.claimables){0===t&&(a=document.createElement("div"),a.className="mt-4 mb-1",s.append(a),n=n=document.createElement("div"),n.className="row text-center gx-2 gy-2 mb-3",a.append(n));const o=document.createElement("div");if(o.className="col-6 col-md-3",o.innerHTML=`<div class="h-100 nft-card"><img src="default.png" class="img-fluid" id="nft-${r.assetId}"><div class="nft-card-info"><strong>${r.params.name}</strong><br>\n      <small><a href="https://www.nftexplorer.app/asset/${r.assetId}" target="_blank">${r.assetId}</a></small></div></div>`,(0,l.g)(r.assetId,o.querySelector(`#nft-${r.assetId}`),400),e.push(r.assetId),n.append(o),t++,i===this.claimables.length-1||8===t){const s=document.createElement("button");s.className="btn btn-generate",s.textContent="Claim "+(t>1?`(${t})`:""),s.dataset.assetIds=e.join(","),s.addEventListener("click",this.claim.bind(this),!1),a.append(s),t=0,e=[]}i++}return s}async claim(t){const e=t.currentTarget;try{e.innerHTML='<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>\n      Waiting for signatures...',e.disabled=!0;const s=t.currentTarget.dataset.assetIds.split(",");let a=[];for(const t of s){let e=a.find((e=>e.assetId===t));if(e)e.amount++;else{const e={assetId:t,amount:1};a.push(e)}}let i=[],l=[];for(const t of a){let e=n().makeAssetTransferTxnWithSuggestedParamsFromObject({from:this.walletConnect.walletAddress,to:this.walletConnect.walletAddress,amount:0,assetIndex:parseInt(t.assetId),suggestedParams:this.suggestedParams});i.push(e);let s=n().makeAssetTransferTxnWithSuggestedParamsFromObject({from:this.escrowAddress,to:this.walletConnect.walletAddress,amount:t.amount,assetIndex:parseInt(t.assetId),suggestedParams:this.suggestedParams});l.push(s)}let r=i.concat(l);n().assignGroupID(r);const o=await this.walletConnect.signTransactions(r);let c=[];for(let t=0;t<o.length;t++)c.push({amount:a[t].amount,txn:btoa(String.fromCharCode.apply(null,o[t]))});e.innerHTML='<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>\n      Claiming...',e.disabled=!0;const d=await fetch(this.API_URL+"/claim/claim",{method:"POST",body:JSON.stringify({signedTxns:c}),headers:{Accept:"application/json","Content-Type":"application/json"}});if(200!==d.status){const t=await d.json();throw new Error(t.error)}await d.json(),e.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-check-circle-fill" viewBox="0 0 16 16">\n        <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>\n      </svg>\n        Claimed',e.disabled=!0}catch(t){console.error(t),alert(t.message),e.textContent="Claim",e.disabled=!1}}}class o{constructor(t,e){this.walletConnect=t,this.algodClient=e,this.ui=document.createElement("div"),this.claimApi=new r(this.walletConnect,this.algodClient),this.displayUI(),this.loadClaimables()}displayUI(){this.ui.innerHTML='\n        <h4 id="claim-title">Claim</h4>\n        <div id="claim-list">Loading...</div>\n        '}async loadClaimables(){try{await this.claimApi.load()}catch(t){return console.error(t),void(this.ui.innerHTML=`\n        <h4 id="claim-title">Claim</h4>\n        <div class="alert alert-danger" role="alert">${t.message}</div>\n        `)}const t=this.ui.querySelector("#claim-title"),e=this.ui.querySelector("#claim-list"),s=this.claimApi.claimables.length;0===s?(t.textContent="ðŸ˜ž",e.textContent="No NFTS to claim."):(t.textContent=`${s} NFT${s>1?"s":""} to claim! ðŸ¥³`,e.textContent="",e.append(this.claimApi.getClaimablesUI()))}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,